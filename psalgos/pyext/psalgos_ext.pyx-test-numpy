
# Example:
# /reg/g/psdm/sw/releases/ana-current/ConfigSvc/pyext/_ConfigSvc.pyx

# passing numpy arrays:
# http://stackoverflow.com/questions/17855032/passing-and-returning-numpy-arrays-to-c-methods-via-cython

# issue with outdated numpy
# https://docs.scipy.org/doc/numpy/reference/c-api.deprecations.html#deprecation-mechanism-npy-no-deprecated-api

#------------------------------

#from libcpp.vector cimport vector
#from libcpp cimport bool

from libc.time cimport time_t, ctime
from libcpp.string cimport string

#------------------------------

cdef extern from "<stdint.h>" nogil:
    ctypedef   signed char  int8_t
    ctypedef   signed short int16_t
    ctypedef   signed int   int32_t
    ctypedef   signed long  int64_t
    ctypedef unsigned char  uint8_t
    ctypedef unsigned short uint16_t
    ctypedef unsigned int   uint32_t
    ctypedef unsigned long  uint64_t

#------------------------------

cimport numpy as np
import numpy as np

#------------------------------

ctypedef fused dtype2d :
    np.ndarray[np.double_t,  ndim=2, mode="c"]
    np.ndarray[np.float64_t, ndim=2, mode="c"]
    np.ndarray[np.int16_t,   ndim=2, mode="c"]
    np.ndarray[np.int32_t,   ndim=2, mode="c"]
    np.ndarray[np.int64_t,   ndim=2, mode="c"]
    np.ndarray[np.uint16_t,  ndim=2, mode="c"]
    np.ndarray[np.uint32_t,  ndim=2, mode="c"]
    np.ndarray[np.uint64_t,  ndim=2, mode="c"]

#------------------------------
# TEST example
#------------------------------

cdef extern from "psalgos/cfib.h":
    double cfib(int n)

def fib(n):
    """Returns the n-th Fibonacci number"""
    return cfib(n)

#------------------------------
# TEST np.array <-> C++
#------------------------------

cdef extern from "psalgos/ctest_nda.h":
    void ctest_nda[T](T *arr, int r, int c) except +
    void ctest_nda_f8(double   *arr, int r, int c) except +
    void ctest_nda_i2(int16_t  *arr, int r, int c) except +
    void ctest_nda_u2(uint16_t *arr, int r, int c) except +

#------------------------------
# Most compact working case 
#------------------------------

## WORKS but uses depricated nda.data
#def test_nda_v0(np.ndarray nda):
#    print 'nda.dtype =', str(nda.dtype)
#    if   nda.dtype == np.float64 : ctest_nda(<double*>   nda.data, nda.shape[0], nda.shape[1])
#    elif nda.dtype == np.int16   : ctest_nda(<int16_t*>  nda.data, nda.shape[0], nda.shape[1])
#    elif nda.dtype == np.uint16  : ctest_nda(<uint16_t*> nda.data, nda.shape[0], nda.shape[1])
#    else: raise ValueError("Array data type is unknown")


# compiles with warnings
#def test_nda_v1(dtype2d nda):
#    print 'nda.dtype =', str(nda.dtype)
#    if   nda.dtype == np.float64 : ctest_nda(&nda[0,0], nda.shape[0], nda.shape[1])
#    elif nda.dtype == np.int16   : ctest_nda(&nda[0,0], nda.shape[0], nda.shape[1])
#    elif nda.dtype == np.uint16  : ctest_nda(&nda[0,0], nda.shape[0], nda.shape[1])
#    else: raise ValueError("Array data type is unknown")

# WORKS for specialized methods
def test_nda_v0(nda):
    print 'nda.dtype =', str(nda.dtype)
    if   nda.dtype == np.float64 : test_nda_f8(nda)
    elif nda.dtype == np.int16   : test_nda_i2(nda)
    elif nda.dtype == np.uint16  : test_nda_u2(nda)
    else: raise ValueError("Array data type is unknown")

# WORKS, but compiles with warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
def test_nda_v1(dtype2d nda): ctest_nda(&nda[0,0], nda.shape[0], nda.shape[1])
    

#------------------------------
# Specialized methods for each type
#------------------------------

# WORKS for templated ctest_nda
def test_nda_f8(np.ndarray[np.double_t, ndim=2, mode="c"] nda): ctest_nda(&nda[0,0], nda.shape[0], nda.shape[1])
def test_nda_i2(np.ndarray[np.int16_t,  ndim=2, mode="c"] nda): ctest_nda(&nda[0,0], nda.shape[0], nda.shape[1])
def test_nda_u2(np.ndarray[np.uint16_t, ndim=2, mode="c"] nda): ctest_nda(&nda[0,0], nda.shape[0], nda.shape[1])

# WORKS with specialized methods
#def test_nda_f8(np.ndarray[np.double_t, ndim=2, mode="c"] nda): ctest_nda_f8(&nda[0,0], nda.shape[0], nda.shape[1])
#def test_nda_i2(np.ndarray[np.int16_t,  ndim=2, mode="c"] nda): ctest_nda_i2(&nda[0,0], nda.shape[0], nda.shape[1])
#def test_nda_u2(np.ndarray[np.uint16_t, ndim=2, mode="c"] nda): ctest_nda_u2(&nda[0,0], nda.shape[0], nda.shape[1])

# WORKS, but uses depricated nda.data
#def test_nda_f8(np.ndarray[np.double_t, ndim=2, mode="c"] nda): ctest_nda_f8(<double*>  nda.data, nda.shape[0], nda.shape[1])
#def test_nda_i2(np.ndarray[np.int16_t,  ndim=2, mode="c"] nda): ctest_nda_i2(<int16_t*> nda.data, nda.shape[0], nda.shape[1])
#def test_nda_u2(np.ndarray[np.uint16_t, ndim=2, mode="c"] nda): ctest_nda_u2(<uint16_t*>nda.data, nda.shape[0], nda.shape[1])

#------------------------------
#------------------------------
#------------------------------

#cdef extern from "ndarray/ndarray.h" : # namespace "std":
#    cdef cppclass ndarray[ElemType, NDim]:
#        double x, y, time
#        int32_t method
#        hit_class(sort_class *) except +

#cdef class py_ndarray:
#    """ Python wrapper for C++ class. 
#    """
#    cdef hit_ndarray* cptr  # holds a C++ instance

#    def __cinit__(self, py_sort_class sorter, int i=0):
#        #print "In py_hit_class.__cinit__ index: %d" % i
#        self.cptr = sorter.cptr.output_hit_array[i]

##    def __dealloc__(self):
##        print "In py_hit_class.__dealloc__"
##        del self.cptr

#    @property
#    def x(self) : return self.cptr.x

#------------------------------
#------------------------------
#------------------------------
#------------------------------
#------------------------------
