#ifndef PDS_PULNIX_DDL_H
#define PDS_PULNIX_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include <vector>
#include <iosfwd>
#include <cstddef>
#include <cstring>
#include "pdsdata/xtc/TypeId.hh"
#include "ndarray/ndarray.h"
namespace Pds {
namespace Pulnix {

/** @class TM6740ConfigV1

  
*/


class TM6740ConfigV1 {
public:
  enum { TypeId = Pds::TypeId::Id_TM6740Config /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  enum { Row_Pixels = 480 };
  enum { Column_Pixels = 640 };
  enum Depth {
    Eight_bit,
    Ten_bit,
  };
  enum Binning {
    x1,
    x2,
    x4,
  };
  enum LookupTable {
    Gamma,
    Linear,
  };
  TM6740ConfigV1(uint16_t arg__bf_gain_a, uint16_t arg__bf_gain_b, uint16_t arg__bf_vref, uint16_t arg__bf_shutter, uint8_t arg__bf_gain_balance, Pulnix::TM6740ConfigV1::Depth arg__bf_output_resolution, Pulnix::TM6740ConfigV1::Binning arg__bf_horizontal_binning, Pulnix::TM6740ConfigV1::Binning arg__bf_vertical_binning, Pulnix::TM6740ConfigV1::LookupTable arg__bf_lookuptable_mode)
    : _gain_a_b(((arg__bf_gain_a) & 0xffff)|(((arg__bf_gain_b) & 0xffff)<<16)), _vref_shutter(((arg__bf_vref) & 0xffff)|(((arg__bf_shutter) & 0xffff)<<16)), _control(((arg__bf_gain_balance) & 0x1)|(((arg__bf_output_resolution) & 0x1)<<1)|(((arg__bf_horizontal_binning) & 0x3)<<2)|(((arg__bf_vertical_binning) & 0x3)<<4)|(((arg__bf_lookuptable_mode) & 0x1)<<6))
  {
  }
  TM6740ConfigV1() {}
  TM6740ConfigV1(const TM6740ConfigV1& other) {
    const char* src = reinterpret_cast<const char*>(&other);
    std::copy(src, src+other._sizeof(), reinterpret_cast<char*>(this));
  }
  TM6740ConfigV1& operator=(const TM6740ConfigV1& other) {
    const char* src = reinterpret_cast<const char*>(&other);
    std::copy(src, src+other._sizeof(), reinterpret_cast<char*>(this));
    return *this;
  }
  uint16_t gain_a() const { return uint16_t(this->_gain_a_b & 0xffff); }
  uint16_t gain_b() const { return uint16_t((this->_gain_a_b>>16) & 0xffff); }
  uint16_t vref() const { return uint16_t(this->_vref_shutter & 0xffff); }
  uint16_t shutter_width() const { return uint16_t((this->_vref_shutter>>16) & 0xffff); }
  uint8_t gain_balance() const { return uint8_t(this->_control & 0x1); }
  Pulnix::TM6740ConfigV1::Depth output_resolution() const { return Depth((this->_control>>1) & 0x1); }
  Pulnix::TM6740ConfigV1::Binning horizontal_binning() const { return Binning((this->_control>>2) & 0x3); }
  Pulnix::TM6740ConfigV1::Binning vertical_binning() const { return Binning((this->_control>>4) & 0x3); }
  Pulnix::TM6740ConfigV1::LookupTable lookuptable_mode() const { return LookupTable((this->_control>>6) & 0x1); }
  /** bit-depth of pixel counts */
  uint8_t output_resolution_bits() const;
  static uint32_t _sizeof() { return 12; }
private:
  uint32_t	_gain_a_b;
  uint32_t	_vref_shutter;
  uint32_t	_control;
};
std::ostream& operator<<(std::ostream& str, Pulnix::TM6740ConfigV1::Depth enval);
std::ostream& operator<<(std::ostream& str, Pulnix::TM6740ConfigV1::Binning enval);
std::ostream& operator<<(std::ostream& str, Pulnix::TM6740ConfigV1::LookupTable enval);

/** @class TM6740ConfigV2

  
*/


class TM6740ConfigV2 {
public:
  enum { TypeId = Pds::TypeId::Id_TM6740Config /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 2 /**< XTC type version number */ };
  enum { Row_Pixels = 480 };
  enum { Column_Pixels = 640 };
  enum Depth {
    Eight_bit,
    Ten_bit,
  };
  enum Binning {
    x1,
    x2,
    x4,
  };
  enum LookupTable {
    Gamma,
    Linear,
  };
  TM6740ConfigV2(uint16_t arg__bf_gain_a, uint16_t arg__bf_gain_b, uint16_t arg__bf_vref_a, uint16_t arg__bf_vref_b, uint8_t arg__bf_gain_balance, Pulnix::TM6740ConfigV2::Depth arg__bf_output_resolution, Pulnix::TM6740ConfigV2::Binning arg__bf_horizontal_binning, Pulnix::TM6740ConfigV2::Binning arg__bf_vertical_binning, Pulnix::TM6740ConfigV2::LookupTable arg__bf_lookuptable_mode)
    : _gain_a_b(((arg__bf_gain_a) & 0xffff)|(((arg__bf_gain_b) & 0xffff)<<16)), _vref_shutter(((arg__bf_vref_a) & 0x3ff)|(((arg__bf_vref_b) & 0x3ff)<<16)), _control(((arg__bf_gain_balance) & 0x1)|(((arg__bf_output_resolution) & 0x1)<<1)|(((arg__bf_horizontal_binning) & 0x3)<<2)|(((arg__bf_vertical_binning) & 0x3)<<4)|(((arg__bf_lookuptable_mode) & 0x1)<<6))
  {
  }
  TM6740ConfigV2() {}
  TM6740ConfigV2(const TM6740ConfigV2& other) {
    const char* src = reinterpret_cast<const char*>(&other);
    std::copy(src, src+other._sizeof(), reinterpret_cast<char*>(this));
  }
  TM6740ConfigV2& operator=(const TM6740ConfigV2& other) {
    const char* src = reinterpret_cast<const char*>(&other);
    std::copy(src, src+other._sizeof(), reinterpret_cast<char*>(this));
    return *this;
  }
  uint16_t gain_a() const { return uint16_t(this->_gain_a_b & 0xffff); }
  uint16_t gain_b() const { return uint16_t((this->_gain_a_b>>16) & 0xffff); }
  uint16_t vref_a() const { return uint16_t(this->_vref_shutter & 0x3ff); }
  uint16_t vref_b() const { return uint16_t((this->_vref_shutter>>16) & 0x3ff); }
  uint8_t gain_balance() const { return uint8_t(this->_control & 0x1); }
  Pulnix::TM6740ConfigV2::Depth output_resolution() const { return Depth((this->_control>>1) & 0x1); }
  Pulnix::TM6740ConfigV2::Binning horizontal_binning() const { return Binning((this->_control>>2) & 0x3); }
  Pulnix::TM6740ConfigV2::Binning vertical_binning() const { return Binning((this->_control>>4) & 0x3); }
  Pulnix::TM6740ConfigV2::LookupTable lookuptable_mode() const { return LookupTable((this->_control>>6) & 0x1); }
  /** bit-depth of pixel counts */
  uint8_t output_resolution_bits() const;
  static uint32_t _sizeof() { return 12; }
private:
  uint32_t	_gain_a_b;
  uint32_t	_vref_shutter;
  uint32_t	_control;
};
std::ostream& operator<<(std::ostream& str, Pulnix::TM6740ConfigV2::Depth enval);
std::ostream& operator<<(std::ostream& str, Pulnix::TM6740ConfigV2::Binning enval);
std::ostream& operator<<(std::ostream& str, Pulnix::TM6740ConfigV2::LookupTable enval);
} // namespace Pulnix
} // namespace Pds
#endif // PDS_PULNIX_DDL_H
