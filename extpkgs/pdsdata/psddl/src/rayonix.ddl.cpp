
// *** Do not edit this file, it is auto-generated ***

#include "pdsdata/psddl/rayonix.ddl.h"

#include <iostream>
namespace Pds {
namespace Rayonix {
std::ostream& operator<<(std::ostream& str, Rayonix::ConfigV1::ReadoutMode enval) {
  const char* val;
  switch (enval) {
  case Rayonix::ConfigV1::Standard:
    val = "Standard";
    break;
  case Rayonix::ConfigV1::HighGain:
    val = "HighGain";
    break;
  case Rayonix::ConfigV1::LowNoise:
    val = "LowNoise";
    break;
  case Rayonix::ConfigV1::EDR:
    val = "EDR";
    break;
  default:
    return str << "ReadoutMode(" << int(enval) << ")";
  }
  return str << val;
}
uint32_t
ConfigV2::maxWidth() const {
  
    if (!strncmp(this->deviceID(), "MX340-HS", 8)) {
      return MX340HS_Column_Pixels;
    } else if (!strncmp(this->deviceID(), "MX170-HS", 8)) {
      return MX170HS_Column_Pixels;
    } else {
      return MX170HS_Column_Pixels;
    }

}
uint32_t
ConfigV2::maxHeight() const {
  
    if (!strncmp(this->deviceID(), "MX340-HS", 8)) {
      return MX340HS_Row_Pixels;
    } else if (!strncmp(this->deviceID(), "MX170-HS", 8)) {
      return MX170HS_Row_Pixels;
    } else {
      return MX170HS_Row_Pixels;
    }

}
std::ostream& operator<<(std::ostream& str, Rayonix::ConfigV2::ReadoutMode enval) {
  const char* val;
  switch (enval) {
  case Rayonix::ConfigV2::Unknown:
    val = "Unknown";
    break;
  case Rayonix::ConfigV2::Standard:
    val = "Standard";
    break;
  case Rayonix::ConfigV2::HighGain:
    val = "HighGain";
    break;
  case Rayonix::ConfigV2::LowNoise:
    val = "LowNoise";
    break;
  case Rayonix::ConfigV2::HDR:
    val = "HDR";
    break;
  default:
    return str << "ReadoutMode(" << int(enval) << ")";
  }
  return str << val;
}
} // namespace Rayonix
} // namespace Pds
