
// *** Do not edit this file, it is auto-generated ***

#include "pdsdata/psddl/genericpgp.ddl.h"

#include <iostream>
namespace Pds {
namespace GenericPgp {
std::ostream& operator<<(std::ostream& str, GenericPgp::CRegister::Action enval) {
  const char* val;
  switch (enval) {
  case GenericPgp::CRegister::RegisterRead:
    val = "RegisterRead";
    break;
  case GenericPgp::CRegister::RegisterWrite:
    val = "RegisterWrite";
    break;
  case GenericPgp::CRegister::RegisterWriteA:
    val = "RegisterWriteA";
    break;
  case GenericPgp::CRegister::RegisterVerify:
    val = "RegisterVerify";
    break;
  case GenericPgp::CRegister::Spin:
    val = "Spin";
    break;
  case GenericPgp::CRegister::Usleep:
    val = "Usleep";
    break;
  case GenericPgp::CRegister::Flush:
    val = "Flush";
    break;
  default:
    return str << "Action(" << int(enval) << ")";
  }
  return str << val;
}
ConfigV1::ConfigV1(uint32_t arg__id, const GenericPgp::CDimension& arg__frame_dim, const GenericPgp::CDimension& arg__aux_dim, const GenericPgp::CDimension& arg__env_dim, uint32_t arg__number_of_registers, uint32_t arg__number_of_sequences, uint32_t arg__number_of_streams, uint32_t arg__payload_size, const uint32_t* arg__pixel_settings, const uint32_t* arg__sequence_length, const GenericPgp::CRegister* arg__sequence, const GenericPgp::CStream* arg__stream, const uint32_t* arg__payload)
    : _id(arg__id), _frame_dim(arg__frame_dim), _aux_dim(arg__aux_dim), _env_dim(arg__env_dim), _number_of_registers(arg__number_of_registers), _number_of_sequences(arg__number_of_sequences), _number_of_streams(arg__number_of_streams), _payload_size(arg__payload_size)
{
  if (arg__pixel_settings and ((this->frame_dim().rows())*(this->frame_dim().columns()))) {
    ptrdiff_t offset = 44;
    uint32_t* data = reinterpret_cast<uint32_t*>(((char*)this)+offset);
    std::copy(arg__pixel_settings, arg__pixel_settings+((this->frame_dim().rows())*(this->frame_dim().columns())), data);
  }
  if (arg__sequence_length and (this->number_of_sequences())) {
    ptrdiff_t offset = 44+(4*((this->frame_dim().rows())*(this->frame_dim().columns())));
    uint32_t* data = reinterpret_cast<uint32_t*>(((char*)this)+offset);
    std::copy(arg__sequence_length, arg__sequence_length+(this->number_of_sequences()), data);
  }
  if (arg__sequence and (this->number_of_registers())) {
    ptrdiff_t offset = (44+(4*((this->frame_dim().rows())*(this->frame_dim().columns()))))+(4*(this->number_of_sequences()));
    GenericPgp::CRegister* data = reinterpret_cast<GenericPgp::CRegister*>(((char*)this)+offset);
    std::copy(arg__sequence, arg__sequence+(this->number_of_registers()), data);
  }
  if (arg__stream and (this->number_of_streams())) {
    ptrdiff_t offset = ((44+(4*((this->frame_dim().rows())*(this->frame_dim().columns()))))+(4*(this->number_of_sequences())))+(16*(this->number_of_registers()));
    GenericPgp::CStream* data = reinterpret_cast<GenericPgp::CStream*>(((char*)this)+offset);
    std::copy(arg__stream, arg__stream+(this->number_of_streams()), data);
  }
  if (arg__payload and (this->payload_size())) {
    ptrdiff_t offset = (((44+(4*((this->frame_dim().rows())*(this->frame_dim().columns()))))+(4*(this->number_of_sequences())))+(16*(this->number_of_registers())))+(16*(this->number_of_streams()));
    uint32_t* data = reinterpret_cast<uint32_t*>(((char*)this)+offset);
    std::copy(arg__payload, arg__payload+(this->payload_size()), data);
  }
}
} // namespace GenericPgp
} // namespace Pds
