
// *** Do not edit this file, it is auto-generated ***

#include "pdsdata/psddl/epics.ddl.h"

#include <iostream>
namespace Pds {
namespace Epics {
std::ostream& operator<<(std::ostream& str, Epics::DbrTypes enval) {
  const char* val;
  switch (enval) {
  case Epics::DBR_STRING:
    val = "DBR_STRING";
    break;
  case Epics::DBR_SHORT:
    val = "DBR_SHORT";
    break;
  case Epics::DBR_FLOAT:
    val = "DBR_FLOAT";
    break;
  case Epics::DBR_ENUM:
    val = "DBR_ENUM";
    break;
  case Epics::DBR_CHAR:
    val = "DBR_CHAR";
    break;
  case Epics::DBR_LONG:
    val = "DBR_LONG";
    break;
  case Epics::DBR_DOUBLE:
    val = "DBR_DOUBLE";
    break;
  case Epics::DBR_STS_STRING:
    val = "DBR_STS_STRING";
    break;
  case Epics::DBR_STS_SHORT:
    val = "DBR_STS_SHORT";
    break;
  case Epics::DBR_STS_FLOAT:
    val = "DBR_STS_FLOAT";
    break;
  case Epics::DBR_STS_ENUM:
    val = "DBR_STS_ENUM";
    break;
  case Epics::DBR_STS_CHAR:
    val = "DBR_STS_CHAR";
    break;
  case Epics::DBR_STS_LONG:
    val = "DBR_STS_LONG";
    break;
  case Epics::DBR_STS_DOUBLE:
    val = "DBR_STS_DOUBLE";
    break;
  case Epics::DBR_TIME_STRING:
    val = "DBR_TIME_STRING";
    break;
  case Epics::DBR_TIME_INT:
    val = "DBR_TIME_INT";
    break;
  case Epics::DBR_TIME_FLOAT:
    val = "DBR_TIME_FLOAT";
    break;
  case Epics::DBR_TIME_ENUM:
    val = "DBR_TIME_ENUM";
    break;
  case Epics::DBR_TIME_CHAR:
    val = "DBR_TIME_CHAR";
    break;
  case Epics::DBR_TIME_LONG:
    val = "DBR_TIME_LONG";
    break;
  case Epics::DBR_TIME_DOUBLE:
    val = "DBR_TIME_DOUBLE";
    break;
  case Epics::DBR_GR_STRING:
    val = "DBR_GR_STRING";
    break;
  case Epics::DBR_GR_SHORT:
    val = "DBR_GR_SHORT";
    break;
  case Epics::DBR_GR_FLOAT:
    val = "DBR_GR_FLOAT";
    break;
  case Epics::DBR_GR_ENUM:
    val = "DBR_GR_ENUM";
    break;
  case Epics::DBR_GR_CHAR:
    val = "DBR_GR_CHAR";
    break;
  case Epics::DBR_GR_LONG:
    val = "DBR_GR_LONG";
    break;
  case Epics::DBR_GR_DOUBLE:
    val = "DBR_GR_DOUBLE";
    break;
  case Epics::DBR_CTRL_STRING:
    val = "DBR_CTRL_STRING";
    break;
  case Epics::DBR_CTRL_SHORT:
    val = "DBR_CTRL_SHORT";
    break;
  case Epics::DBR_CTRL_FLOAT:
    val = "DBR_CTRL_FLOAT";
    break;
  case Epics::DBR_CTRL_ENUM:
    val = "DBR_CTRL_ENUM";
    break;
  case Epics::DBR_CTRL_CHAR:
    val = "DBR_CTRL_CHAR";
    break;
  case Epics::DBR_CTRL_LONG:
    val = "DBR_CTRL_LONG";
    break;
  case Epics::DBR_CTRL_DOUBLE:
    val = "DBR_CTRL_DOUBLE";
    break;
  default:
    return str << "DbrTypes(" << int(enval) << ")";
  }
  return str << val;
}
std::vector<int>
dbr_ctrl_short::units_shape() const {
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(MAX_UNITS_SIZE);
  return shape;
}
std::vector<int>
dbr_ctrl_float::units_shape() const {
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(MAX_UNITS_SIZE);
  return shape;
}
std::vector<int>
dbr_ctrl_enum::strings_shape() const {
  std::vector<int> shape;
  shape.reserve(2);
  shape.push_back(MAX_ENUM_STATES);
  shape.push_back(MAX_ENUM_STRING_SIZE);
  return shape;
}
std::vector<int>
dbr_ctrl_char::units_shape() const {
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(MAX_UNITS_SIZE);
  return shape;
}
std::vector<int>
dbr_ctrl_long::units_shape() const {
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(MAX_UNITS_SIZE);
  return shape;
}
std::vector<int>
dbr_ctrl_double::units_shape() const {
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(MAX_UNITS_SIZE);
  return shape;
}
EpicsPvHeader::EpicsPvHeader(int16_t arg__iPvId, int16_t arg__iDbrType, int16_t arg__iNumElements)
    : _iPvId(arg__iPvId), _iDbrType(arg__iDbrType), _iNumElements(arg__iNumElements)
{
}
uint8_t
EpicsPvHeader::isCtrl() const {
  return this->dbrType() >= DBR_CTRL_STRING and this->dbrType() <= DBR_CTRL_DOUBLE;
}
uint8_t
EpicsPvHeader::isTime() const {
  return this->dbrType() >= DBR_TIME_STRING and this->dbrType() <= DBR_TIME_DOUBLE;
}
EpicsPvCtrlHeader::EpicsPvCtrlHeader(int16_t arg__iPvId, int16_t arg__iDbrType, int16_t arg__iNumElements, const char* arg__sPvName)
    : EpicsPvHeader(arg__iPvId, arg__iDbrType, arg__iNumElements)
{
  if (arg__sPvName) std::copy(arg__sPvName, arg__sPvName+(64), &_sPvName[0]);
}
EpicsPvTimeHeader::EpicsPvTimeHeader(int16_t arg__iPvId, int16_t arg__iDbrType, int16_t arg__iNumElements)
    : EpicsPvHeader(arg__iPvId, arg__iDbrType, arg__iNumElements)
{
}
EpicsPvCtrlString::EpicsPvCtrlString(int16_t arg__iPvId, int16_t arg__iDbrType, int16_t arg__iNumElements, const char* arg__sPvName, const Epics::dbr_sts_string& arg__dbr, const char* arg__data)
    : EpicsPvCtrlHeader(arg__iPvId, arg__iDbrType, arg__iNumElements, arg__sPvName), _dbr(arg__dbr)
{
  if (arg__data and ((this->numElements())*( MAX_STRING_SIZE))) {
    ptrdiff_t offset = 74;
    char* data = reinterpret_cast<char*>(((char*)this)+offset);
    std::copy(arg__data, arg__data+((this->numElements())*( MAX_STRING_SIZE)), data);
  }
}
const char*
EpicsPvCtrlString::value(uint32_t i) const {
  return data(i);
}
std::vector<int>
EpicsPvCtrlString::data_shape() const {
  std::vector<int> shape;
  shape.reserve(2);
  shape.push_back(this->numElements());
  shape.push_back( MAX_STRING_SIZE);
  return shape;
}
EpicsPvCtrlShort::EpicsPvCtrlShort(int16_t arg__iPvId, int16_t arg__iDbrType, int16_t arg__iNumElements, const char* arg__sPvName, const Epics::dbr_ctrl_short& arg__dbr, const int16_t* arg__data)
    : EpicsPvCtrlHeader(arg__iPvId, arg__iDbrType, arg__iNumElements, arg__sPvName), _dbr(arg__dbr)
{
  if (arg__data and (this->numElements())) {
    ptrdiff_t offset = 98;
    int16_t* data = reinterpret_cast<int16_t*>(((char*)this)+offset);
    std::copy(arg__data, arg__data+(this->numElements()), data);
  }
}
int16_t
EpicsPvCtrlShort::value(uint32_t i) const {
  return data()[i];
}
EpicsPvCtrlFloat::EpicsPvCtrlFloat(int16_t arg__iPvId, int16_t arg__iDbrType, int16_t arg__iNumElements, const char* arg__sPvName, const Epics::dbr_ctrl_float& arg__dbr, const float* arg__data)
    : EpicsPvCtrlHeader(arg__iPvId, arg__iDbrType, arg__iNumElements, arg__sPvName), _dbr(arg__dbr)
{
  if (arg__data and (this->numElements())) {
    ptrdiff_t offset = 120;
    float* data = reinterpret_cast<float*>(((char*)this)+offset);
    std::copy(arg__data, arg__data+(this->numElements()), data);
  }
}
float
EpicsPvCtrlFloat::value(uint32_t i) const {
  return data()[i];
}
EpicsPvCtrlEnum::EpicsPvCtrlEnum(int16_t arg__iPvId, int16_t arg__iDbrType, int16_t arg__iNumElements, const char* arg__sPvName, const Epics::dbr_ctrl_enum& arg__dbr, const uint16_t* arg__data)
    : EpicsPvCtrlHeader(arg__iPvId, arg__iDbrType, arg__iNumElements, arg__sPvName), _dbr(arg__dbr)
{
  if (arg__data and (this->numElements())) {
    ptrdiff_t offset = 492;
    uint16_t* data = reinterpret_cast<uint16_t*>(((char*)this)+offset);
    std::copy(arg__data, arg__data+(this->numElements()), data);
  }
}
uint16_t
EpicsPvCtrlEnum::value(uint32_t i) const {
  return data()[i];
}
EpicsPvCtrlChar::EpicsPvCtrlChar(int16_t arg__iPvId, int16_t arg__iDbrType, int16_t arg__iNumElements, const char* arg__sPvName, const Epics::dbr_ctrl_char& arg__dbr, const uint8_t* arg__data)
    : EpicsPvCtrlHeader(arg__iPvId, arg__iDbrType, arg__iNumElements, arg__sPvName), _dbr(arg__dbr)
{
  if (arg__data and (this->numElements())) {
    ptrdiff_t offset = 91;
    uint8_t* data = reinterpret_cast<uint8_t*>(((char*)this)+offset);
    std::copy(arg__data, arg__data+(this->numElements()), data);
  }
}
uint8_t
EpicsPvCtrlChar::value(uint32_t i) const {
  return data()[i];
}
EpicsPvCtrlLong::EpicsPvCtrlLong(int16_t arg__iPvId, int16_t arg__iDbrType, int16_t arg__iNumElements, const char* arg__sPvName, const Epics::dbr_ctrl_long& arg__dbr, const int32_t* arg__data)
    : EpicsPvCtrlHeader(arg__iPvId, arg__iDbrType, arg__iNumElements, arg__sPvName), _dbr(arg__dbr)
{
  if (arg__data and (this->numElements())) {
    ptrdiff_t offset = 116;
    int32_t* data = reinterpret_cast<int32_t*>(((char*)this)+offset);
    std::copy(arg__data, arg__data+(this->numElements()), data);
  }
}
int32_t
EpicsPvCtrlLong::value(uint32_t i) const {
  return data()[i];
}
EpicsPvCtrlDouble::EpicsPvCtrlDouble(int16_t arg__iPvId, int16_t arg__iDbrType, int16_t arg__iNumElements, const char* arg__sPvName, const Epics::dbr_ctrl_double& arg__dbr, const double* arg__data)
    : EpicsPvCtrlHeader(arg__iPvId, arg__iDbrType, arg__iNumElements, arg__sPvName), _dbr(arg__dbr)
{
  if (arg__data and (this->numElements())) {
    ptrdiff_t offset = 152;
    double* data = reinterpret_cast<double*>(((char*)this)+offset);
    std::copy(arg__data, arg__data+(this->numElements()), data);
  }
}
double
EpicsPvCtrlDouble::value(uint32_t i) const {
  return data()[i];
}
EpicsPvTimeString::EpicsPvTimeString(int16_t arg__iPvId, int16_t arg__iDbrType, int16_t arg__iNumElements, const Epics::dbr_time_string& arg__dbr, const char* arg__data)
    : EpicsPvTimeHeader(arg__iPvId, arg__iDbrType, arg__iNumElements), _dbr(arg__dbr)
{
  if (arg__data and ((this->numElements())*( MAX_STRING_SIZE))) {
    ptrdiff_t offset = 20;
    char* data = reinterpret_cast<char*>(((char*)this)+offset);
    std::copy(arg__data, arg__data+((this->numElements())*( MAX_STRING_SIZE)), data);
  }
}
const char*
EpicsPvTimeString::value(uint32_t i) const {
  return data(i);
}
std::vector<int>
EpicsPvTimeString::data_shape() const {
  std::vector<int> shape;
  shape.reserve(2);
  shape.push_back(this->numElements());
  shape.push_back( MAX_STRING_SIZE);
  return shape;
}
EpicsPvTimeShort::EpicsPvTimeShort(int16_t arg__iPvId, int16_t arg__iDbrType, int16_t arg__iNumElements, const Epics::dbr_time_short& arg__dbr, const int16_t* arg__data)
    : EpicsPvTimeHeader(arg__iPvId, arg__iDbrType, arg__iNumElements), _dbr(arg__dbr)
{
  if (arg__data and (this->numElements())) {
    ptrdiff_t offset = 22;
    int16_t* data = reinterpret_cast<int16_t*>(((char*)this)+offset);
    std::copy(arg__data, arg__data+(this->numElements()), data);
  }
}
int16_t
EpicsPvTimeShort::value(uint32_t i) const {
  return data()[i];
}
EpicsPvTimeFloat::EpicsPvTimeFloat(int16_t arg__iPvId, int16_t arg__iDbrType, int16_t arg__iNumElements, const Epics::dbr_time_float& arg__dbr, const float* arg__data)
    : EpicsPvTimeHeader(arg__iPvId, arg__iDbrType, arg__iNumElements), _dbr(arg__dbr)
{
  if (arg__data and (this->numElements())) {
    ptrdiff_t offset = 20;
    float* data = reinterpret_cast<float*>(((char*)this)+offset);
    std::copy(arg__data, arg__data+(this->numElements()), data);
  }
}
float
EpicsPvTimeFloat::value(uint32_t i) const {
  return data()[i];
}
EpicsPvTimeEnum::EpicsPvTimeEnum(int16_t arg__iPvId, int16_t arg__iDbrType, int16_t arg__iNumElements, const Epics::dbr_time_enum& arg__dbr, const uint16_t* arg__data)
    : EpicsPvTimeHeader(arg__iPvId, arg__iDbrType, arg__iNumElements), _dbr(arg__dbr)
{
  if (arg__data and (this->numElements())) {
    ptrdiff_t offset = 22;
    uint16_t* data = reinterpret_cast<uint16_t*>(((char*)this)+offset);
    std::copy(arg__data, arg__data+(this->numElements()), data);
  }
}
uint16_t
EpicsPvTimeEnum::value(uint32_t i) const {
  return data()[i];
}
EpicsPvTimeChar::EpicsPvTimeChar(int16_t arg__iPvId, int16_t arg__iDbrType, int16_t arg__iNumElements, const Epics::dbr_time_char& arg__dbr, const uint8_t* arg__data)
    : EpicsPvTimeHeader(arg__iPvId, arg__iDbrType, arg__iNumElements), _dbr(arg__dbr)
{
  if (arg__data and (this->numElements())) {
    ptrdiff_t offset = 23;
    uint8_t* data = reinterpret_cast<uint8_t*>(((char*)this)+offset);
    std::copy(arg__data, arg__data+(this->numElements()), data);
  }
}
uint8_t
EpicsPvTimeChar::value(uint32_t i) const {
  return data()[i];
}
EpicsPvTimeLong::EpicsPvTimeLong(int16_t arg__iPvId, int16_t arg__iDbrType, int16_t arg__iNumElements, const Epics::dbr_time_long& arg__dbr, const int32_t* arg__data)
    : EpicsPvTimeHeader(arg__iPvId, arg__iDbrType, arg__iNumElements), _dbr(arg__dbr)
{
  if (arg__data and (this->numElements())) {
    ptrdiff_t offset = 20;
    int32_t* data = reinterpret_cast<int32_t*>(((char*)this)+offset);
    std::copy(arg__data, arg__data+(this->numElements()), data);
  }
}
int32_t
EpicsPvTimeLong::value(uint32_t i) const {
  return data()[i];
}
EpicsPvTimeDouble::EpicsPvTimeDouble(int16_t arg__iPvId, int16_t arg__iDbrType, int16_t arg__iNumElements, const Epics::dbr_time_double& arg__dbr, const double* arg__data)
    : EpicsPvTimeHeader(arg__iPvId, arg__iDbrType, arg__iNumElements), _dbr(arg__dbr)
{
  if (arg__data and (this->numElements())) {
    ptrdiff_t offset = 24;
    double* data = reinterpret_cast<double*>(((char*)this)+offset);
    std::copy(arg__data, arg__data+(this->numElements()), data);
  }
}
double
EpicsPvTimeDouble::value(uint32_t i) const {
  return data()[i];
}
ConfigV1::ConfigV1(int32_t arg__iNumPv, const Epics::PvConfigV1* arg__pvConfig)
    : _iNumPv(arg__iNumPv)
{
  if (arg__pvConfig and (this->numPv())) {
    ptrdiff_t offset = 4;
    Epics::PvConfigV1* data = reinterpret_cast<Epics::PvConfigV1*>(((char*)this)+offset);
    std::copy(arg__pvConfig, arg__pvConfig+(this->numPv()), data);
  }
}
} // namespace Epics
} // namespace Pds
