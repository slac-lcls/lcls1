
// *** Do not edit this file, it is auto-generated ***

#include "pdsdata/psddl/vimba.ddl.h"

#include <iostream>
namespace Pds {
namespace Vimba {
uint32_t
AlviumConfigV1::depth() const {
  
    uint32_t bits = 0;
    switch(this->pixelMode()) {
        case Mono8:
            bits = 8;
            break;
        case Mono10:
        case Mono10p:
            bits = 10;
            break;
        case Mono12:
        case Mono12p:
            bits = 12;
            break;
    }
    return bits;

}
uint32_t
AlviumConfigV1::frameSize() const {
  return numPixels() * 2;
}
std::ostream& operator<<(std::ostream& str, Vimba::AlviumConfigV1::VmbBool enval) {
  const char* val;
  switch (enval) {
  case Vimba::AlviumConfigV1::False:
    val = "False";
    break;
  case Vimba::AlviumConfigV1::True:
    val = "True";
    break;
  default:
    return str << "VmbBool(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Vimba::AlviumConfigV1::RoiMode enval) {
  const char* val;
  switch (enval) {
  case Vimba::AlviumConfigV1::Off:
    val = "Off";
    break;
  case Vimba::AlviumConfigV1::On:
    val = "On";
    break;
  case Vimba::AlviumConfigV1::Centered:
    val = "Centered";
    break;
  default:
    return str << "RoiMode(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Vimba::AlviumConfigV1::TriggerMode enval) {
  const char* val;
  switch (enval) {
  case Vimba::AlviumConfigV1::FreeRun:
    val = "FreeRun";
    break;
  case Vimba::AlviumConfigV1::External:
    val = "External";
    break;
  case Vimba::AlviumConfigV1::Software:
    val = "Software";
    break;
  default:
    return str << "TriggerMode(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Vimba::AlviumConfigV1::PixelMode enval) {
  const char* val;
  switch (enval) {
  case Vimba::AlviumConfigV1::Mono8:
    val = "Mono8";
    break;
  case Vimba::AlviumConfigV1::Mono10:
    val = "Mono10";
    break;
  case Vimba::AlviumConfigV1::Mono10p:
    val = "Mono10p";
    break;
  case Vimba::AlviumConfigV1::Mono12:
    val = "Mono12";
    break;
  case Vimba::AlviumConfigV1::Mono12p:
    val = "Mono12p";
    break;
  default:
    return str << "PixelMode(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Vimba::AlviumConfigV1::ImgCorrectionType enval) {
  const char* val;
  switch (enval) {
  case Vimba::AlviumConfigV1::DefectPixelCorrection:
    val = "DefectPixelCorrection";
    break;
  case Vimba::AlviumConfigV1::FixedPatternNoiseCorrection:
    val = "FixedPatternNoiseCorrection";
    break;
  default:
    return str << "ImgCorrectionType(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Vimba::AlviumConfigV1::ImgCorrectionSet enval) {
  const char* val;
  switch (enval) {
  case Vimba::AlviumConfigV1::Preset:
    val = "Preset";
    break;
  case Vimba::AlviumConfigV1::User:
    val = "User";
    break;
  default:
    return str << "ImgCorrectionSet(" << int(enval) << ")";
  }
  return str << val;
}
} // namespace Vimba
} // namespace Pds
