
// *** Do not edit this file, it is auto-generated ***

#include "pdsdata/psddl/streak.ddl.h"

#include <iostream>
namespace Pds {
namespace Streak {
double
ConfigV1::calibScaleFactor() const {
  
    double factor = 1.0;
    switch(this->calibScale()) {
      case Nanoseconds:
        factor = 1e-9;
        break;
      case Microseconds:
        factor = 1e-6;
        break;
      case Milliseconds:
        factor = 1e-3;
        break;
      case Seconds:
        factor = 1.0;
        break;
    }
    return factor;

}
ndarray<const double, 1>
ConfigV1::calibTimes() const {
  
    unsigned shape[1] = {Column_Pixels};
    ndarray<double,1> times(shape);
    times[0] = 0;
    for (unsigned n=1; n<Column_Pixels; ++n) {
      times[n] = times[n - 1] + (this->_calib[0] + this->_calib[1] * n + this->_calib[2] * n * n);
    }
    return times;

}
ndarray<const double, 1>
ConfigV1::calibTimesInSeconds() const {
  
    double factor = this->calibScaleFactor();
    unsigned shape[1] = {Column_Pixels};
    ndarray<double,1> times(shape);
    times[0] = 0;
    for (unsigned n=1; n<Column_Pixels; ++n) {
      times[n] = times[n - 1] + (this->_calib[0] + this->_calib[1] * n + this->_calib[2] * n * n) * factor;
    }
    return times;

}
std::ostream& operator<<(std::ostream& str, Streak::ConfigV1::DeviceMode enval) {
  const char* val;
  switch (enval) {
  case Streak::ConfigV1::Focus:
    val = "Focus";
    break;
  case Streak::ConfigV1::Operate:
    val = "Operate";
    break;
  default:
    return str << "DeviceMode(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Streak::ConfigV1::ShutterMode enval) {
  const char* val;
  switch (enval) {
  case Streak::ConfigV1::Closed:
    val = "Closed";
    break;
  case Streak::ConfigV1::Open:
    val = "Open";
    break;
  default:
    return str << "ShutterMode(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Streak::ConfigV1::GateMode enval) {
  const char* val;
  switch (enval) {
  case Streak::ConfigV1::Normal:
    val = "Normal";
    break;
  case Streak::ConfigV1::Gate:
    val = "Gate";
    break;
  case Streak::ConfigV1::OpenFixed:
    val = "OpenFixed";
    break;
  default:
    return str << "GateMode(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Streak::ConfigV1::TriggerMode enval) {
  const char* val;
  switch (enval) {
  case Streak::ConfigV1::Single:
    val = "Single";
    break;
  case Streak::ConfigV1::Continuous:
    val = "Continuous";
    break;
  default:
    return str << "TriggerMode(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Streak::ConfigV1::CalibScale enval) {
  const char* val;
  switch (enval) {
  case Streak::ConfigV1::Nanoseconds:
    val = "Nanoseconds";
    break;
  case Streak::ConfigV1::Microseconds:
    val = "Microseconds";
    break;
  case Streak::ConfigV1::Milliseconds:
    val = "Milliseconds";
    break;
  case Streak::ConfigV1::Seconds:
    val = "Seconds";
    break;
  default:
    return str << "CalibScale(" << int(enval) << ")";
  }
  return str << val;
}
} // namespace Streak
} // namespace Pds
