
// *** Do not edit this file, it is auto-generated ***

#include "pdsdata/psddl/bld.ddl.h"

#include <iostream>
namespace Pds {
namespace Bld {
std::ostream& operator<<(std::ostream& str, Bld::BldDataEBeamV0::DamageMask enval) {
  const char* val;
  switch (enval) {
  case Bld::BldDataEBeamV0::EbeamChargeDamage:
    val = "EbeamChargeDamage";
    break;
  case Bld::BldDataEBeamV0::EbeamL3EnergyDamage:
    val = "EbeamL3EnergyDamage";
    break;
  case Bld::BldDataEBeamV0::EbeamLTUPosXDamage:
    val = "EbeamLTUPosXDamage";
    break;
  case Bld::BldDataEBeamV0::EbeamLTUPosYDamage:
    val = "EbeamLTUPosYDamage";
    break;
  case Bld::BldDataEBeamV0::EbeamLTUAngXDamage:
    val = "EbeamLTUAngXDamage";
    break;
  case Bld::BldDataEBeamV0::EbeamLTUAngYDamage:
    val = "EbeamLTUAngYDamage";
    break;
  default:
    return str << "DamageMask(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Bld::BldDataEBeamV1::DamageMask enval) {
  const char* val;
  switch (enval) {
  case Bld::BldDataEBeamV1::EbeamChargeDamage:
    val = "EbeamChargeDamage";
    break;
  case Bld::BldDataEBeamV1::EbeamL3EnergyDamage:
    val = "EbeamL3EnergyDamage";
    break;
  case Bld::BldDataEBeamV1::EbeamLTUPosXDamage:
    val = "EbeamLTUPosXDamage";
    break;
  case Bld::BldDataEBeamV1::EbeamLTUPosYDamage:
    val = "EbeamLTUPosYDamage";
    break;
  case Bld::BldDataEBeamV1::EbeamLTUAngXDamage:
    val = "EbeamLTUAngXDamage";
    break;
  case Bld::BldDataEBeamV1::EbeamLTUAngYDamage:
    val = "EbeamLTUAngYDamage";
    break;
  case Bld::BldDataEBeamV1::EbeamPkCurrBC2Damage:
    val = "EbeamPkCurrBC2Damage";
    break;
  default:
    return str << "DamageMask(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Bld::BldDataEBeamV2::DamageMask enval) {
  const char* val;
  switch (enval) {
  case Bld::BldDataEBeamV2::EbeamChargeDamage:
    val = "EbeamChargeDamage";
    break;
  case Bld::BldDataEBeamV2::EbeamL3EnergyDamage:
    val = "EbeamL3EnergyDamage";
    break;
  case Bld::BldDataEBeamV2::EbeamLTUPosXDamage:
    val = "EbeamLTUPosXDamage";
    break;
  case Bld::BldDataEBeamV2::EbeamLTUPosYDamage:
    val = "EbeamLTUPosYDamage";
    break;
  case Bld::BldDataEBeamV2::EbeamLTUAngXDamage:
    val = "EbeamLTUAngXDamage";
    break;
  case Bld::BldDataEBeamV2::EbeamLTUAngYDamage:
    val = "EbeamLTUAngYDamage";
    break;
  case Bld::BldDataEBeamV2::EbeamPkCurrBC2Damage:
    val = "EbeamPkCurrBC2Damage";
    break;
  case Bld::BldDataEBeamV2::EbeamEnergyBC2Damage:
    val = "EbeamEnergyBC2Damage";
    break;
  default:
    return str << "DamageMask(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Bld::BldDataEBeamV3::DamageMask enval) {
  const char* val;
  switch (enval) {
  case Bld::BldDataEBeamV3::EbeamChargeDamage:
    val = "EbeamChargeDamage";
    break;
  case Bld::BldDataEBeamV3::EbeamL3EnergyDamage:
    val = "EbeamL3EnergyDamage";
    break;
  case Bld::BldDataEBeamV3::EbeamLTUPosXDamage:
    val = "EbeamLTUPosXDamage";
    break;
  case Bld::BldDataEBeamV3::EbeamLTUPosYDamage:
    val = "EbeamLTUPosYDamage";
    break;
  case Bld::BldDataEBeamV3::EbeamLTUAngXDamage:
    val = "EbeamLTUAngXDamage";
    break;
  case Bld::BldDataEBeamV3::EbeamLTUAngYDamage:
    val = "EbeamLTUAngYDamage";
    break;
  case Bld::BldDataEBeamV3::EbeamPkCurrBC2Damage:
    val = "EbeamPkCurrBC2Damage";
    break;
  case Bld::BldDataEBeamV3::EbeamEnergyBC2Damage:
    val = "EbeamEnergyBC2Damage";
    break;
  case Bld::BldDataEBeamV3::EbeamPkCurrBC1Damage:
    val = "EbeamPkCurrBC1Damage";
    break;
  case Bld::BldDataEBeamV3::EbeamEnergyBC1Damage:
    val = "EbeamEnergyBC1Damage";
    break;
  default:
    return str << "DamageMask(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Bld::BldDataEBeamV4::DamageMask enval) {
  const char* val;
  switch (enval) {
  case Bld::BldDataEBeamV4::EbeamChargeDamage:
    val = "EbeamChargeDamage";
    break;
  case Bld::BldDataEBeamV4::EbeamL3EnergyDamage:
    val = "EbeamL3EnergyDamage";
    break;
  case Bld::BldDataEBeamV4::EbeamLTUPosXDamage:
    val = "EbeamLTUPosXDamage";
    break;
  case Bld::BldDataEBeamV4::EbeamLTUPosYDamage:
    val = "EbeamLTUPosYDamage";
    break;
  case Bld::BldDataEBeamV4::EbeamLTUAngXDamage:
    val = "EbeamLTUAngXDamage";
    break;
  case Bld::BldDataEBeamV4::EbeamLTUAngYDamage:
    val = "EbeamLTUAngYDamage";
    break;
  case Bld::BldDataEBeamV4::EbeamPkCurrBC2Damage:
    val = "EbeamPkCurrBC2Damage";
    break;
  case Bld::BldDataEBeamV4::EbeamEnergyBC2Damage:
    val = "EbeamEnergyBC2Damage";
    break;
  case Bld::BldDataEBeamV4::EbeamPkCurrBC1Damage:
    val = "EbeamPkCurrBC1Damage";
    break;
  case Bld::BldDataEBeamV4::EbeamEnergyBC1Damage:
    val = "EbeamEnergyBC1Damage";
    break;
  case Bld::BldDataEBeamV4::EbeamUndPosXDamage:
    val = "EbeamUndPosXDamage";
    break;
  case Bld::BldDataEBeamV4::EbeamUndPosYDamage:
    val = "EbeamUndPosYDamage";
    break;
  case Bld::BldDataEBeamV4::EbeamUndAngXDamage:
    val = "EbeamUndAngXDamage";
    break;
  case Bld::BldDataEBeamV4::EbeamUndAngYDamage:
    val = "EbeamUndAngYDamage";
    break;
  default:
    return str << "DamageMask(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Bld::BldDataEBeamV5::DamageMask enval) {
  const char* val;
  switch (enval) {
  case Bld::BldDataEBeamV5::EbeamChargeDamage:
    val = "EbeamChargeDamage";
    break;
  case Bld::BldDataEBeamV5::EbeamL3EnergyDamage:
    val = "EbeamL3EnergyDamage";
    break;
  case Bld::BldDataEBeamV5::EbeamLTUPosXDamage:
    val = "EbeamLTUPosXDamage";
    break;
  case Bld::BldDataEBeamV5::EbeamLTUPosYDamage:
    val = "EbeamLTUPosYDamage";
    break;
  case Bld::BldDataEBeamV5::EbeamLTUAngXDamage:
    val = "EbeamLTUAngXDamage";
    break;
  case Bld::BldDataEBeamV5::EbeamLTUAngYDamage:
    val = "EbeamLTUAngYDamage";
    break;
  case Bld::BldDataEBeamV5::EbeamPkCurrBC2Damage:
    val = "EbeamPkCurrBC2Damage";
    break;
  case Bld::BldDataEBeamV5::EbeamEnergyBC2Damage:
    val = "EbeamEnergyBC2Damage";
    break;
  case Bld::BldDataEBeamV5::EbeamPkCurrBC1Damage:
    val = "EbeamPkCurrBC1Damage";
    break;
  case Bld::BldDataEBeamV5::EbeamEnergyBC1Damage:
    val = "EbeamEnergyBC1Damage";
    break;
  case Bld::BldDataEBeamV5::EbeamUndPosXDamage:
    val = "EbeamUndPosXDamage";
    break;
  case Bld::BldDataEBeamV5::EbeamUndPosYDamage:
    val = "EbeamUndPosYDamage";
    break;
  case Bld::BldDataEBeamV5::EbeamUndAngXDamage:
    val = "EbeamUndAngXDamage";
    break;
  case Bld::BldDataEBeamV5::EbeamUndAngYDamage:
    val = "EbeamUndAngYDamage";
    break;
  case Bld::BldDataEBeamV5::EbeamXTCAVAmplDamage:
    val = "EbeamXTCAVAmplDamage";
    break;
  case Bld::BldDataEBeamV5::EbeamXTCAVPhaseDamage:
    val = "EbeamXTCAVPhaseDamage";
    break;
  case Bld::BldDataEBeamV5::EbeamDumpChargeDamage:
    val = "EbeamDumpChargeDamage";
    break;
  default:
    return str << "DamageMask(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Bld::BldDataEBeamV6::DamageMask enval) {
  const char* val;
  switch (enval) {
  case Bld::BldDataEBeamV6::EbeamChargeDamage:
    val = "EbeamChargeDamage";
    break;
  case Bld::BldDataEBeamV6::EbeamL3EnergyDamage:
    val = "EbeamL3EnergyDamage";
    break;
  case Bld::BldDataEBeamV6::EbeamLTUPosXDamage:
    val = "EbeamLTUPosXDamage";
    break;
  case Bld::BldDataEBeamV6::EbeamLTUPosYDamage:
    val = "EbeamLTUPosYDamage";
    break;
  case Bld::BldDataEBeamV6::EbeamLTUAngXDamage:
    val = "EbeamLTUAngXDamage";
    break;
  case Bld::BldDataEBeamV6::EbeamLTUAngYDamage:
    val = "EbeamLTUAngYDamage";
    break;
  case Bld::BldDataEBeamV6::EbeamPkCurrBC2Damage:
    val = "EbeamPkCurrBC2Damage";
    break;
  case Bld::BldDataEBeamV6::EbeamEnergyBC2Damage:
    val = "EbeamEnergyBC2Damage";
    break;
  case Bld::BldDataEBeamV6::EbeamPkCurrBC1Damage:
    val = "EbeamPkCurrBC1Damage";
    break;
  case Bld::BldDataEBeamV6::EbeamEnergyBC1Damage:
    val = "EbeamEnergyBC1Damage";
    break;
  case Bld::BldDataEBeamV6::EbeamUndPosXDamage:
    val = "EbeamUndPosXDamage";
    break;
  case Bld::BldDataEBeamV6::EbeamUndPosYDamage:
    val = "EbeamUndPosYDamage";
    break;
  case Bld::BldDataEBeamV6::EbeamUndAngXDamage:
    val = "EbeamUndAngXDamage";
    break;
  case Bld::BldDataEBeamV6::EbeamUndAngYDamage:
    val = "EbeamUndAngYDamage";
    break;
  case Bld::BldDataEBeamV6::EbeamXTCAVAmplDamage:
    val = "EbeamXTCAVAmplDamage";
    break;
  case Bld::BldDataEBeamV6::EbeamXTCAVPhaseDamage:
    val = "EbeamXTCAVPhaseDamage";
    break;
  case Bld::BldDataEBeamV6::EbeamDumpChargeDamage:
    val = "EbeamDumpChargeDamage";
    break;
  case Bld::BldDataEBeamV6::EbeamPhotonEnergyDamage:
    val = "EbeamPhotonEnergyDamage";
    break;
  default:
    return str << "DamageMask(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Bld::BldDataEBeamV7::DamageMask enval) {
  const char* val;
  switch (enval) {
  case Bld::BldDataEBeamV7::EbeamChargeDamage:
    val = "EbeamChargeDamage";
    break;
  case Bld::BldDataEBeamV7::EbeamL3EnergyDamage:
    val = "EbeamL3EnergyDamage";
    break;
  case Bld::BldDataEBeamV7::EbeamLTUPosXDamage:
    val = "EbeamLTUPosXDamage";
    break;
  case Bld::BldDataEBeamV7::EbeamLTUPosYDamage:
    val = "EbeamLTUPosYDamage";
    break;
  case Bld::BldDataEBeamV7::EbeamLTUAngXDamage:
    val = "EbeamLTUAngXDamage";
    break;
  case Bld::BldDataEBeamV7::EbeamLTUAngYDamage:
    val = "EbeamLTUAngYDamage";
    break;
  case Bld::BldDataEBeamV7::EbeamPkCurrBC2Damage:
    val = "EbeamPkCurrBC2Damage";
    break;
  case Bld::BldDataEBeamV7::EbeamEnergyBC2Damage:
    val = "EbeamEnergyBC2Damage";
    break;
  case Bld::BldDataEBeamV7::EbeamPkCurrBC1Damage:
    val = "EbeamPkCurrBC1Damage";
    break;
  case Bld::BldDataEBeamV7::EbeamEnergyBC1Damage:
    val = "EbeamEnergyBC1Damage";
    break;
  case Bld::BldDataEBeamV7::EbeamUndPosXDamage:
    val = "EbeamUndPosXDamage";
    break;
  case Bld::BldDataEBeamV7::EbeamUndPosYDamage:
    val = "EbeamUndPosYDamage";
    break;
  case Bld::BldDataEBeamV7::EbeamUndAngXDamage:
    val = "EbeamUndAngXDamage";
    break;
  case Bld::BldDataEBeamV7::EbeamUndAngYDamage:
    val = "EbeamUndAngYDamage";
    break;
  case Bld::BldDataEBeamV7::EbeamXTCAVAmplDamage:
    val = "EbeamXTCAVAmplDamage";
    break;
  case Bld::BldDataEBeamV7::EbeamXTCAVPhaseDamage:
    val = "EbeamXTCAVPhaseDamage";
    break;
  case Bld::BldDataEBeamV7::EbeamDumpChargeDamage:
    val = "EbeamDumpChargeDamage";
    break;
  case Bld::BldDataEBeamV7::EbeamPhotonEnergyDamage:
    val = "EbeamPhotonEnergyDamage";
    break;
  default:
    return str << "DamageMask(" << int(enval) << ")";
  }
  return str << val;
}
BldDataSpectrometerV1::BldDataSpectrometerV1(uint32_t arg__width, uint32_t arg__hproj_y1, uint32_t arg__hproj_y2, double arg__fComRaw, double arg__fBaseline, double arg__fCom, double arg__fIntegral, uint32_t arg__nPeaks, const int32_t* arg__hproj, const double* arg__peakPos, const double* arg__peakHeight, const double* arg__Fwhm)
    : _width(arg__width), _hproj_y1(arg__hproj_y1), _hproj_y2(arg__hproj_y2), _fComRaw(arg__fComRaw), _fBaseline(arg__fBaseline), _fCom(arg__fCom), _fIntegral(arg__fIntegral), _nPeaks(arg__nPeaks)
{
  if (arg__hproj and (this->_width)) {
    ptrdiff_t offset = 48;
    int32_t* data = reinterpret_cast<int32_t*>(((char*)this)+offset);
    std::copy(arg__hproj, arg__hproj+(this->_width), data);
  }
  if (arg__peakPos and (this->_nPeaks)) {
    ptrdiff_t offset = 48+(4*(this->_width));
    double* data = reinterpret_cast<double*>(((char*)this)+offset);
    std::copy(arg__peakPos, arg__peakPos+(this->_nPeaks), data);
  }
  if (arg__peakHeight and (this->_nPeaks)) {
    ptrdiff_t offset = (48+(4*(this->_width)))+(8*(this->_nPeaks));
    double* data = reinterpret_cast<double*>(((char*)this)+offset);
    std::copy(arg__peakHeight, arg__peakHeight+(this->_nPeaks), data);
  }
  if (arg__Fwhm and (this->_nPeaks)) {
    ptrdiff_t offset = ((48+(4*(this->_width)))+(8*(this->_nPeaks)))+(8*(this->_nPeaks));
    double* data = reinterpret_cast<double*>(((char*)this)+offset);
    std::copy(arg__Fwhm, arg__Fwhm+(this->_nPeaks), data);
  }
}
} // namespace Bld
} // namespace Pds
