#ifndef PSDDL_HDF2PSANA_GENERIC1D_DDL_H
#define PSDDL_HDF2PSANA_GENERIC1D_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include "psddl_psana/generic1d.ddl.h"
#include "hdf5pp/Group.h"
#include "hdf5pp/Type.h"
#include "PSEvt/Proxy.h"
#include "psddl_hdf2psana/ChunkPolicy.h"
namespace psddl_hdf2psana {
namespace Generic1D {

namespace ns_ConfigV0_v0 {
struct dataset_config {
  static hdf5pp::Type native_type();
  static hdf5pp::Type stored_type();

  dataset_config();
  dataset_config(const Psana::Generic1D::ConfigV0& psanaobj);
  ~dataset_config();

  uint32_t NChannels;


};
}


class ConfigV0_v0 : public Psana::Generic1D::ConfigV0 {
public:
  typedef Psana::Generic1D::ConfigV0 PsanaType;
  ConfigV0_v0() {}
  ConfigV0_v0(hdf5pp::Group group, hsize_t idx)
    : m_group(group), m_idx(idx) {}
  virtual ~ConfigV0_v0() {}
  virtual uint32_t NChannels() const;
  virtual ndarray<const uint32_t, 1> Length() const;
  virtual ndarray<const uint32_t, 1> SampleType() const;
  virtual ndarray<const int32_t, 1> Offset() const;
  virtual ndarray<const double, 1> Period() const;
  virtual int32_t data_offset(uint32_t channel) const;
  virtual uint32_t Depth(uint32_t channel) const;
private:
  mutable hdf5pp::Group m_group;
  hsize_t m_idx;
  mutable boost::shared_ptr<Generic1D::ns_ConfigV0_v0::dataset_config> m_ds_config;
  void read_ds_config() const;
  mutable ndarray<const uint32_t, 1> m_ds_Length;
  void read_ds_Length() const;
  mutable ndarray<const uint32_t, 1> m_ds_SampleType;
  void read_ds_SampleType() const;
  mutable ndarray<const int32_t, 1> m_ds_Offset;
  void read_ds_Offset() const;
  mutable ndarray<const double, 1> m_ds_Period;
  void read_ds_Period() const;
  mutable ndarray<const int32_t, 1> m_ds_data_offset;
  void read_ds_data_offset() const;
  mutable ndarray<const uint32_t, 1> m_ds_Depth;
  void read_ds_Depth() const;
};

boost::shared_ptr<PSEvt::Proxy<Psana::Generic1D::ConfigV0> > make_ConfigV0(int version, hdf5pp::Group group, hsize_t idx);

/// Store object as a single instance (scalar dataset) inside specified group.
void store(const Psana::Generic1D::ConfigV0& obj, hdf5pp::Group group, int version = -1);
/// Create container (rank=1) datasets for storing objects of specified type.
void make_datasets(const Psana::Generic1D::ConfigV0& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version = -1);
/// Add one more object to the containers created by previous method at the specified index,
/// negative index means append to the end of dataset. If pointer to object is zero then
/// datsets are extended with zero-filled of default-initialized data.
void store_at(const Psana::Generic1D::ConfigV0* obj, hdf5pp::Group group, long index = -1, int version = -1);

boost::shared_ptr<PSEvt::Proxy<Psana::Generic1D::DataV0> > make_DataV0(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::Generic1D::ConfigV0>& cfg);

/// Store object as a single instance (scalar dataset) inside specified group.
void store(const Psana::Generic1D::DataV0& obj, hdf5pp::Group group, int version = -1);
/// Create container (rank=1) datasets for storing objects of specified type.
void make_datasets(const Psana::Generic1D::DataV0& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version = -1);
/// Add one more object to the containers created by previous method at the specified index,
/// negative index means append to the end of dataset. If pointer to object is zero then
/// datsets are extended with zero-filled of default-initialized data.
void store_at(const Psana::Generic1D::DataV0* obj, hdf5pp::Group group, long index = -1, int version = -1);

} // namespace Generic1D
} // namespace psddl_hdf2psana
#endif // PSDDL_HDF2PSANA_GENERIC1D_DDL_H
