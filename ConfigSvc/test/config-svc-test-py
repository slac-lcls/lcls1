#!@PYTHON@
#--------------------------------------------------------------------------
# File and Version Information:
#  $Id$
#
# Description:
#  Script config-svc-test-py...
#
#------------------------------------------------------------------------

"""Unit test for Python configuration service class

This software was developed for the LCLS project.  If you use all or 
part of it, please give an appropriate acknowledgement.

@see RelatedModule

@version $Id$ 

@author Andy Salnikov
"""

#------------------------------
#  Module's version from CVS --
#------------------------------
from future import standard_library
standard_library.install_aliases()
__version__ = "$Revision: 8 $"
# $Source$

#--------------------------------
#  Imports of standard modules --
#--------------------------------
import unittest
import six

#---------------------------------
#  Imports of base class module --
#---------------------------------

#-----------------------------
# Imports for other modules --
#-----------------------------
from ConfigSvc import *

#---------------------
# Local definitions --
#---------------------
_config = "\
# comment\n\
[section1]\n\
paramInt1 = 0\n\
paramInt2 = -1000\n\
paramInt3 = 1000\n\
\n\
paramFloat1 = 0.123456\n\
paramFloat2 = 1e10\n\
paramFloat3 = -1e10\n\
paramFloat4 = 1e-10\n\
\n\
paramBool1 = 0\n\
paramBool2 = 1\n\
paramBool3 = no\n\
paramBool4 = yes\n\
paramBool5 = off\n\
paramBool6 = on\n\
paramBool7 = FALSE\n\
paramBool8 = True\n\
\n\
paramString1 = \n\
paramString2 = OneWord \n\
paramString3 = Two Words \n\
\n\
paramList1 = \n\
paramList2 = 1000 \n\
paramList3 = 2000 3000 \n\
"

_init = False

#-------------------------------
#  Unit test class definition --
#-------------------------------

class config_svc_test_py ( unittest.TestCase ) :

    def setUp(self) :

        # init service once
        global _init
        if not _init:
            f = six.StringIO(_config)
            initConfigSvc(f)
            _init = True
    
    def tearDown(self) :
        pass
    
    def test_exceptions(self):

        cfgsvc = ConfigSvc()
  
        self.assertRaises(RuntimeError, cfgsvc.getStr, b"unknown_section", b"unknown_param")
        self.assertRaises(RuntimeError, cfgsvc.getStr, b"section1", b"unknown_param")
        self.assertRaises(RuntimeError, cfgsvc.getStrList, b"unknown_section", b"unknown_param")
        self.assertRaises(RuntimeError, cfgsvc.getStrList, b"section1", b"unknown_param")

        # type mistmatch
        self.assertRaises(TypeError, cfgsvc.getStr, b"unknown_section", b"unknown_param", 0)
        self.assertRaises(TypeError, cfgsvc.getBool, b"unknown_section", b"unknown_param", [])
        self.assertRaises(TypeError, cfgsvc.getInt, b"unknown_section", b"unknown_param", "")
        self.assertRaises(TypeError, cfgsvc.getFloat, b"unknown_section", b"unknown_param", [1])
        self.assertRaises(TypeError, cfgsvc.getStrList, b"unknown_section", b"unknown_param", [1, 2])
        self.assertRaises(TypeError, cfgsvc.getBoolList, "unknown_section", b"unknown_param", True)
        self.assertRaises(TypeError, cfgsvc.getIntList ,b"unknown_section", b"unknown_param", [""])
        self.assertRaises(TypeError, cfgsvc.getFloatList, b"unknown_section", b"unknown_param", [1, ""])
        
        # no exceptions from these
        cfgsvc.getInt(b"unknown_section", b"unknown_param", 0)
        cfgsvc.getInt(b"section1", b"unknown_param", 0)
        cfgsvc.getIntList(b"unknown_section", b"unknown_param", [1])
        cfgsvc.getIntList(b"section1", b"unknown_param", [1,2,3])

    def test_int(self):

        cfgsvc = ConfigSvc()
        
        val = cfgsvc.getInt(b"section1", b"paramInt1")
        self.assertEqual(val, 0)
        val = cfgsvc.getInt(b"section1", b"paramInt2")
        self.assertEqual(val, -1000)
        val = cfgsvc.getInt(b"section1", b"paramInt3")
        self.assertEqual(val, 1000)
        val = cfgsvc.getInt(b"section1", b"paramInt3", -1000000)
        self.assertEqual(val, 1000)
        val = cfgsvc.getInt(b"section1", b"unknown_param", -1000000)
        self.assertEqual(val, -1000000)

    def test_double(self):
        
        cfgsvc = ConfigSvc()
        
        val = cfgsvc.getFloat(b"section1", b"paramFloat1");
        self.assertEqual(val, 0.123456);
        val = cfgsvc.getFloat(b"section1", b"paramFloat2");
        self.assertEqual(val, 1e10);
        val = cfgsvc.getFloat(b"section1", b"paramFloat3");
        self.assertEqual(val, -1e10);
        val = cfgsvc.getFloat(b"section1", b"paramFloat4");
        self.assertEqual(val, 1e-10);

    def test_bool(self):

        cfgsvc = ConfigSvc()
        
        val = cfgsvc.getBool(b"section1", b"paramBool1");
        self.assertEqual(val, False);
        val = cfgsvc.getBool(b"section1", b"paramBool2");
        self.assertEqual(val, True);
        val = cfgsvc.getBool(b"section1", b"paramBool3");
        self.assertEqual(val, False);
        val = cfgsvc.getBool(b"section1", b"paramBool4");
        self.assertEqual(val, True);
        val = cfgsvc.getBool(b"section1", b"paramBool5");
        self.assertEqual(val, False);
        val = cfgsvc.getBool(b"section1", b"paramBool6");
        self.assertEqual(val, True);
        val = cfgsvc.getBool(b"section1", b"paramBool7");
        self.assertEqual(val, False);
        val = cfgsvc.getBool(b"section1", b"paramBool8");
        self.assertEqual(val, True);
        val = cfgsvc.getBool(b"section1", b"paramBool8", False);
        self.assertEqual(val, True);
        val = cfgsvc.getBool(b"section1", b"unknown_param", False);
        self.assertEqual(val, False);


    def test_str(self):
        
        cfgsvc = ConfigSvc()

        val = cfgsvc.getStr(b"section1", b"paramString1");
        self.assertEqual(val, b"");
        val = cfgsvc.getStr(b"section1", b"paramString2");
        self.assertEqual(val, b"OneWord");
        val = cfgsvc.getStr(b"section1", b"paramString3");
        self.assertEqual(val, b"Two Words");


    def test_list_str(self):
        
        cfgsvc = ConfigSvc()

        val = cfgsvc.getStrList(b"section1", b"paramList1");
        self.assertEqual(val, []);
        val = cfgsvc.getStrList(b"section1", b"paramList2");
        self.assertEqual(len(val), 1);
        self.assertEqual(val[0], b"1000");
        val = cfgsvc.getStrList(b"section1", b"paramList3");
        self.assertEqual(len(val), 2);
        self.assertEqual(val[0], b"2000");
        self.assertEqual(val[1], b"3000");

    def  test_list_int(self):

        cfgsvc = ConfigSvc()

        val = cfgsvc.getIntList(b"section1", b"paramList1");
        self.assertEqual(val, []);
        val = cfgsvc.getIntList(b"section1", b"paramList2");
        self.assertEqual(len(val), 1);
        self.assertEqual(val[0], 1000);
        val = cfgsvc.getIntList(b"section1", b"paramList3");
        self.assertEqual(len(val), 2);
        self.assertEqual(val[0], 2000);
        self.assertEqual(val[1], 3000);


#    	x = 1j
#    	self.assertRaises( TypeError, x >= 0 )
#    	self.assertEqual( x, 0+1j )
#    	self.assertNotEqual( i, 1000 )
#    	self.assertRaises ( ZeroDivisionError, lambda : i/0 )
#    	if i**100 == 0 : self.fail("Python arithmetic error")

#
#  run unit tests when imported as a main module
#
if __name__ == "__main__":
    unittest.main()
