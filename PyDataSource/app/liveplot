#!/usr/bin/env python
from __future__ import print_function
import argparse
import sys
import time
import PyDataSource

def initArgs():
    """Initialize argparse arguments.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("-e", "--exp", type=str, 
                        help='Experiment number')
    parser.add_argument("-r", "--run", type=int,  
                        help='Run number')
    parser.add_argument("--det", type=str,
                        help='Cmma separated detector alias names used for plot Input method')
    parser.add_argument("-n", "--nevents", type=int,
                        help='Number of Events to analyze')
    parser.add_argument("-i", "--instrument", type=str, 
                        help='Instrument')
    parser.add_argument("-s", "--station", type=int, 
                        help='Station')
    parser.add_argument("--idx", action="store_true", 
                        help='Load indexed XTC data')
    parser.add_argument("--smd", action="store_true", 
                        help='Load smd small XTC data')
    parser.add_argument("--h5", action="store_true", 
                        help='Use hdf5 data instead of xtc')
    parser.add_argument("--xtc_dir", type=str, 
                        help='xtc file directory')
    parser.add_argument("--ffb", action="store_true", 
                        help='Use FFB data')
    parser.add_argument("--indexed", action="store_true", default=False, 
            help='Use indexing, see: https://confluence.slac.stanford.edu/display/PSDM/psana+-+Python+Script+Analysis+Manual#psana-PythonScriptAnalysisManual-RandomAccesstoXTCFiles("Indexing")')
    parser.add_argument("--base", type=str, default='ds', 
                        help='Base into which DataSource object is initiated.')
    parser.add_argument("--shmem", action="store_true", 
                        help='Use shmem data stream')
    return parser.parse_args()

if __name__ == "__main__":
    args = initArgs()
    if not args.exp:
        from PyDataSource import psutils
        args.exp = psutils.active_experiment()
        print('No exp provided -- {:} is the active experiment'.format(args.exp))
    
    ds = PyDataSource.DataSource(**vars(args))
    dets = list(ds.configData._config_srcs.keys())
    detstr = args.det
    if detstr:
        try:
            dets = detstr.split(',')
        except:
            print('Cannot parse args.det')

    if dets:
        evt = next(ds.events)
        for alias, detector in ds._detectors.items():
            if '.' in alias:
                alias, attr = alias.split('.')
            else:
                attr = None
            if alias not in dets:
                continue
            try:
                while alias not in evt._attrs:
                    next(evt)
                try:
                    detector._update_xarray_info()
                except:
                    pass
                
                if detector._pydet.__module__ == 'Detector.AreaDetector':
                    if not attr:
                        attr = 'image'
                    try:
                        detector.add.psplot(attr)
                    except:
                        print('Cannot make {:} {:} plot -- trying raw data'.format(alias, attr))
                        attr = 'raw'
                        detector.add.psplot(attr)
                
                elif detector._pydet.__module__ in ['Detector.WFDetector','Detector.GenericWFDetector']:
                    try:
                        if not attr:
                            if detector._det_config['property'].get('filtered'):
                                attr = 'filtered'
                            else:
                                attr = 'waveform'
                        
                        nwfs = detector.waveform.shape[0]
                        for sensor in range(nwfs):
                            detector.add.roi(attr,sensor=sensor,name='{:}_Ch{:}'.format(attr,sensor+1),publish=True)
                    except:
                        print('Cannot make {:} waveform plot'.format(alias))
                
                else:
                    print('No plot available for {:} {:}'.format(alias, detector._pydet.__module__))

            except:
                print('Cannot make {:} plot for {:}'.format(alias, detector._pydet.__module__))
        
        if args.nevents:
            nevents = args.nevents
        else:
            nevents = -1
        
        time.sleep(2)
        
        if nevents > 0:
            get_new = 'y'
            while get_new not in ["n","N"]:
                evt.monitor(nevents)
                get_new = input("Display more events -- 'n' to exit, 'y' for {:} events, or enter number of events?\n".format(nevents)) 
                try:
                    get_int = int(get_new)
                except:
                    get_int = False
                if get_int:
                    nevents = get_int
                    get_new = "y"
        
        else:
            evt.monitor(nevents)
            get_new = input("Run Finished - Reload ?\n".format(nevents))
            while get_new in ["y","Y"]:
                ds.reload()
                evt.monitor(nevents)
                get_new = input("Run Finished - Reload ?\n".format(nevents))


