.. _data_summary:

.. currentmodule:: PyDataSource

Summarizing Data
****************

The to_summary method uses a split-apply-combine strategy using the groupby method in xarray_ (based on the pandas_ groupby API) to create a statistical summary of a run.  This is often useful for runs that have steps (i.e., data acquired from daq or python scans).   The defaults for the to_summary method will provide the statistics ('mean', 'std', 'min', 'max', and 'count') of events grouped according according to step.  By default, the scan variables are automatically built in the to_xarray method and conveniently available in the resulting xarray.Dataset.

.. _pandas: http://pandas.pydata.org
.. _xarray: http://xarray.pydata.org

.. sourcecode:: ipython

    In [2]: x = PyDataSource.open_h5netcdf(exp='xpptut15',run=200)

    In [3]: a = PyDataSource.to_summary(x)

    In [4]: a
    Out[4]: 
    <xarray.Dataset>
    Dimensions:                    (Nh2Sb1_Ipm1_ch: 4, Nh2Sb1_Ipm2_ch: 4, XppEnds_Ipm0_ch: 4, XppMon_Pim0_ch: 4, XppMon_Pim1_ch: 4, XppSb2_Ipm_ch: 4, XppSb3_Ipm_ch: 4, cs140_rob_column: 388, cs140_rob_row: 185, cs140_rob_sensor: 2, stat: 5, step: 45, steps: 45)
    Coordinates:
        XrayOff                    (stat, step) float64 0.007651 0.007987 ...
        XrayOn                     (stat, step) float64 0.9923 0.992 0.9937 ...
        cs140_rob_areas            (cs140_rob_sensor, cs140_rob_row, cs140_rob_column) float64 1.0 ...
        cs140_rob_coords_x         (cs140_rob_sensor, cs140_rob_row, cs140_rob_column) float64 4.32e+04 ...
        cs140_rob_coords_y         (cs140_rob_sensor, cs140_rob_row, cs140_rob_column) float64 396.7 ...
        cs140_rob_coords_z         (cs140_rob_sensor, cs140_rob_row, cs140_rob_column) float64 -31.45 ...
        cs140_rob_gain             (cs140_rob_sensor, cs140_rob_row, cs140_rob_column) float32 1.0 ...
        cs140_rob_indexes_x        (cs140_rob_sensor, cs140_rob_row, cs140_rob_column) uint64 391 ...
        cs140_rob_indexes_y        (cs140_rob_sensor, cs140_rob_row, cs140_rob_column) uint64 1 ...
        cs140_rob_pedestals        (cs140_rob_sensor, cs140_rob_row, cs140_rob_column) float32 1636.36 ...
        ec140                      (stat, step) float64 1.0 1.0 1.0 1.0 1.0 1.0 ...
        ec141                      (stat, step) float64 0.5004 0.5 0.5 0.5 0.5 ...
        ec142                      (stat, step) float64 0.2502 0.2508 0.2508 ...
        ec143                      (stat, step) float64 0.0834 0.08307 0.08413 ...
        ec144                      (stat, step) float64 0.04132 0.04153 0.04127 ...
        ...
        ec97                       (stat, step) float64 0.0 0.0 0.0 0.0 0.0 0.0 ...
        ec98                       (stat, step) float64 0.0 0.0 0.0 0.0 0.0 0.0 ...
        lxt_vitara_ttc             (stat, step) float64 -1e-12 -7.5e-13 -5e-13 ...
        lxt_vitara_ttc_steps       (steps) float64 -1e-12 -7.5e-13 -5e-13 ...
      * stat                       (stat) |S5 'mean' 'std' 'min' 'max' 'count'
      * step                       (step) int64 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ...
    Dimensions without coordinates: Nh2Sb1_Ipm1_ch, Nh2Sb1_Ipm2_ch, XppEnds_Ipm0_ch, XppMon_Pim0_ch, XppMon_Pim1_ch, XppSb2_Ipm_ch, XppSb3_Ipm_ch, cs140_rob_column, cs140_rob_row, cs140_rob_sensor, steps
    Data variables:
        EBeam_damageMask           (stat, step) float64 4.507e+05 5.137e+03 ...
        EBeam_ebeamCharge          (stat, step) float64 0.08269 0.1496 0.1479 ...
        EBeam_ebeamDumpCharge      (stat, step) float64 7.935e+08 8.007e+08 ...
        EBeam_ebeamEnergyBC1       (stat, step) float64 0.001042 0.0008837 ...
        EBeam_ebeamEnergyBC2       (stat, step) float64 4.042 -0.0061 -0.03281 ...
        EBeam_ebeamL3Energy        (stat, step) float64 1.391e+04 1.393e+04 ...
        EBeam_ebeamLTU250          (stat, step) float64 -0.0843 0.06092 0.06151 ...
        EBeam_ebeamLTU450          (stat, step) float64 -0.09681 -0.2203 -0.2192 ...
        EBeam_ebeamLTUAngX         (stat, step) float64 0.05942 0.05195 0.05141 ...
        EBeam_ebeamLTUAngY         (stat, step) float64 0.01364 0.02163 0.02153 ...
        EBeam_ebeamLTUPosX         (stat, step) float64 -0.008893 0.02766 ...
        ...
        XppSb2_Ipm_sum             (stat, step) float64 0.2497 0.5633 0.5847 ...
        XppSb2_Ipm_xpos            (stat, step) float64 0.04659 -0.04083 ...
        XppSb2_Ipm_ypos            (stat, step) float64 0.0427 0.03698 0.02323 ...
        XppSb3_Ipm_channel         (stat, step, XppSb3_Ipm_ch) float64 0.04605 ...
        XppSb3_Ipm_sum             (stat, step) float64 0.1503 0.3523 0.3766 ...
        XppSb3_Ipm_xpos            (stat, step) float64 0.4587 0.2364 0.2121 ...
        XppSb3_Ipm_ypos            (stat, step) float64 1.149 0.3956 0.3937 ...
    Attributes:
        data_source: exp=xpptut15:run=200:smd
        run: 200
        instrument: XPP
        experiment: xpptut15
        expNum: 665
        calibDir: /reg/d/psdm/XPP/xpptut15/calib
        event_flags: ['XrayOn' 'XrayOff']
        nsteps: 45
        pvControls: ['lxt_vitara_ttc']
        pvLabels: ['lxt_vitara_ttc']
        scan_variables: ['lxt_vitara_ttc']
        correlation_variables: []

This summary data can be similarly saved with the to_h5netcdf method (by default in the experiment scratch/nc folder as run0200_sum.nc).

.. sourcecode:: ipython

    In [18]: PyDataSource.to_h5netcdf(a)

    In [19]: ls /reg/d/psdm/xpp/xpptut15/scratch/nc/*_sum.nc
    /reg/d/psdm/xpp/xpptut15/scratch/nc/run0200_sum.nc

To load a summary file use the summary=True keyword.

.. sourcecode:: ipython

    In [2]: a = PyDataSource.open_h5netcdf(exp='xpptut15', run=200, summary=True)


Error Bar Plots
---------------

Error bar plots can be conveniently generated for summarized data using the xy_ploterr method.  This method takes advantage the meta-data stored in the xarray.DataSet as well as features in plotting methods in pandas_ to automatically add labels to the plot.  By default the plot is against the daq scan coordinate, which in this case is 'lxt_vitara_ttc'.  Plotting with respect to another axis is done with the xaxis keyword.  

The example below also illustrates that the steps this run with large variation in Photon Energy are correlated with low beam Charge.

.. plot:: examples/xy_ploterr.py
   :include-source:


Details
-------

.. autosummary::
    :toctree: generated/

    to_summary



