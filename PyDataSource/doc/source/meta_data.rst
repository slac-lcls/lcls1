.. _meta_data:

.. currentmodule:: PyDataSource

Meta Data 
*********

Meta data, including doc strings and units, are automatically parsed from the 
psana using PyDataSource.psana_doc_info methods.  
The doc strings for the data access methods are generally fairly systematic 
since they are automatically generated using boost from the underlying C++ code.
The first line is purely a from Boost and only provides the data type.

This information is updated in the psana_doc_info dictionary.

e.g., for the EBeam Charge

.. sourcecode:: ipython

    In [1]: import psana

    In [2]: psana.Bld.BldDataEBeamV7.ebeamCharge?
    Docstring:
    ebeamCharge( (BldDataEBeamV7)arg1) -> float :
        Beam charge in nC.
    Type:      instancemethod
    
    In [3]: import PyDataSource

    In [4]: PyDataSource.get_unit_from_doc(psana.Bld.BldDataEBeamV7.ebeamCharge.__doc__)
    Out[4]: 'nC'
    
    In [5]: PyDataSource.get_type_from_doc(psana.Bld.BldDataEBeamV7.ebeamCharge.__doc__)
    Out[5]: 'float'

    In [6]: PyDataSource.psana_doc_info['Bld']['BldDataEBeamV7']['ebeamCharge']
    Out[6]: {'doc': 'Beam charge in nC.', 'type': 'float', 'unit': 'nC'}


In some cases the auto parsing does not work well.  
In this the psana_doc_info dictionary can be corrected in the psana_doc_info.py file.

e.g., the EBeam charge at the dump 

.. sourcecode:: ipython

    In [7]: psana.Bld.BldDataEBeamV7.ebeamDumpCharge?
    Docstring:
    ebeamDumpCharge( (BldDataEBeamV7)arg1) -> float :
        Bunch charge at Dump in num. electrons
    Type:      instancemethod

    In [8]: PyDataSource.get_unit_from_doc(psana.Bld.BldDataEBeamV7.ebeamDumpCharge.__doc__)
    Out[8]: 'num'

    In [9]: PyDataSource.psana_doc_info['Bld']['BldDataEBeamV7']['ebeamDumpCharge']
    Out[9]: 
    {'doc': 'Bunch charge at Dump in num. electrons',
     'type': 'float',
     'unit': 'e-'}


where the PyDataSource/src/psana_doc_info.py file has the doc info updated with 
the following line

.. sourcecode:: python
    
    psana_doc_info['Bld']['BldDataEBeamV7']['ebeamDumpCharge']['unit'] = 'e-'


This information is avaliable throught the PsanaTypeData._attr_info dictionary 
that is generated by the PyDataSource._get_typ_func_attr method.

Within the _get_typ_func_attr method there are several methods to parse and interpret 
the data, which are primarily used for configuration data.  

e.g., for the CsPad detector the psana_doc_info.py file includes the following:

.. sourcecode:: python

    psana_doc_info['CsPad']['ConfigV5']['numAsicsStored']['func_len'] = 'numQuads'
    psana_doc_info['CsPad']['ConfigV5']['asicMask']['func_method'] = hex
    psana_doc_info['CsPad']['ConfigV5']['badAsicMask0']['func_method'] = hex
    psana_doc_info['CsPad']['ConfigV5']['badAsicMask1']['func_method'] = hex
    psana_doc_info['CsPad']['ConfigV5']['concentratorVersion']['func_method'] = hex
    psana_doc_info['CsPad']['ConfigV5']['quadMask']['func_method'] = bin
    psana_doc_info['CsPad']['ConfigV5']['roiMask']['func_len_hex'] = 'numQuads'
    psana_doc_info['CsPad']['ConfigV5']['roiMasks']['func_method'] = hex
    psana_doc_info['CsPad']['ElementV2']['common_mode']['func_shape'] = 32
    psana_doc_info['CsPad']['ConfigV3QuadReg']['ampIdle']['func_method'] = hex
    psana_doc_info['CsPad']['ConfigV3QuadReg']['biasTuning']['func_method'] = hex
    psana_doc_info['CsPad']['ConfigV3QuadReg']['digCount']['func_method'] = hex
    psana_doc_info['CsPad']['ConfigV3QuadReg']['acqDelay']['unit'] = 'x8ns'
    psana_doc_info['CsPad']['ConfigV3QuadReg']['acqDelay']['doc'] = 'delay before acquisition (350 typical)'
    psana_doc_info['CsPad']['ConfigV3QuadReg']['digDelay']['unit'] = 'x8ns'
    psana_doc_info['CsPad']['ConfigV3QuadReg']['digDelay']['doc'] = 'hold delay before A to D conversion (1000 typical)'
    psana_doc_info['CsPad']['ConfigV3QuadReg']['digPeriod']['unit'] = 'x8ns'
    psana_doc_info['CsPad']['ConfigV3QuadReg']['digPeriod']['doc'] = 'digitiztion perios'
    psana_doc_info['CsPad']['ConfigV3QuadReg']['intTime']['unit'] = 'x8ns'
    psana_doc_info['CsPad']['ConfigV3QuadReg']['intTime']['doc'] = 'duration of the integration window (5000 typical)'
    psana_doc_info['CsPad']['ConfigV3QuadReg']['readClkHold']['doc'] = '(should be 1)'
    psana_doc_info['CsPad']['ConfigV3QuadReg']['readClkSet']['doc'] = '(should be 2)'
    psana_doc_info['CsPad']['ConfigV3QuadReg']['rowColShiftPer']['doc'] = '(should be 3)'
    psana_doc_info['CsPad']['ConfigV3QuadReg']['digCount']['doc'] = '(max = 0x3ff)'
    psana_doc_info['CsPad']['CsPadReadOnlyCfg']['version']['func_method'] = hex


where:

- func_len is either an integer or an attribute name that specifies that the 
  data attribute is a vector of the specified length

- func_method is a method applied to evaluate the data 
  (e.g., hex is a python method to convert a number to hexidecimal)


Most of the psana data types follow a convention that attributes starting with a capital letter are 
internal psana methods.  
Thus, these are generally ignored in the evtData access method. 
More recently some of the Generic1D.ConfigV0 and Bld.BldDataMeamMonitorV1 data attributes start with
with a capital.  
To make sure these are tab accessible in PyDataSource, the auto-generated psana_attrs dictionary 
is updated with the appropriate data attributes.  i.e.,

.. sourcecode:: python

    psana_attrs['Generic1D']['ConfigV0'] = [
                                             'Depth',
                                             'Length',
                                             'NChannels',
                                             'Offset',
                                             'Period',
                                             'SampleType',
                                             'data_offset',
                                           ]

    psana_attrs['Bld']['BldDataBeamMonitorV1'] = ['peakA', 'peakT', 'TotalIntensity', 'X_Position', 'Y_Position']



API
---

.. autosummary::
    :toctree: generated/

    PyDataSource.PyDataSource.get_unit_from_doc
    PyDataSource.PyDataSource.get_type_from_doc
    PyDataSource.PyDataSource._get_typ_func_attr



 

