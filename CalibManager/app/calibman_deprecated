#!@PYTHON@
#--------------------------------------------------------------------------

"""This script starts the CalibManager GUI and other threads for signal exchange

This software was developed for the LCLS project.
If you use all or part of it, please give an appropriate acknowledgement.

@author Mikhail S. Dubrovin
"""
from __future__ import print_function

#------------------------------

import sys
import os

# get rid of error-massages:
#   libGL error: unable to load driver: swrast_dri.so
#   libGL error: failed to load driver: swrast
os.environ['LIBGL_ALWAYS_INDIRECT'] = '1' #export LIBGL_ALWAYS_INDIRECT=1

if __name__ == "__main__" :
    import matplotlib
    matplotlib.use('Qt5Agg') # forse Agg rendering to a Qt5 canvas (backend)

from PyQt5 import QtCore, QtGui, QtWidgets
from CalibManager.GUIMain import GUIMain
from CalibManager.GlobalUtils import ready_to_start
from CalibManager.ThreadWorker import ThreadWorker
from CalibManager.ThreadCheckNewXtcFiles import ThreadCheckNewXtcFiles

from optparse import OptionParser

#------------------------------

def input_options_parser() :
    com_ex = '\nExample: %prog -e xppi0613 -r 173 -d CSPAD,OPAL1000'

    parser = OptionParser(description='%prog - GUI for LCLS detector calibration', usage='  %prog [options]'+com_ex)
    parser.add_option('-e', '--exp',         dest='exp',          default=None,  action='store', type='string', help='experiment name, ex.: cxi12345')
    parser.add_option('-r', '--run',         dest='runnum',       default=None,  action='store', type='int',    help='run number')
    parser.add_option('-d', '--detector',    dest='detector',     default=None,  action='store', type='string', help='detector names separated by comma, ex:CSPAD,CSPAD2x2,PNCCD')
    parser.add_option('-c', '--calibdir',    dest='calibdir',     default=None,  action='store', type='string', help='non-standard path to calib directory, ex: ./calib')

    opts, args = parser.parse_args()
    return opts, args

#------------------------------

class StartCalibManager(object) :

    def __init__ ( self ) :
        """Start application"""

	#print 'Command: %s' % (' '.join(sys.argv))

        if not ready_to_start(check_bits=0o31, fatal_bits=0o31) : #1,2,4 = old LUSTRE, Kerberos ticket,  AFS token
            sys.exit('Not ready to start aplication ...')

        #QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)

        print("Start Calibration Manager GUI")
        app = QtWidgets.QApplication(sys.argv)

        t1 = ThreadWorker(dt_sec=5, print_bits=0)
        t2 = ThreadCheckNewXtcFiles(dt_sec=60, print_bits=0)

        t1.start()
        t2.start()

        opts, args = input_options_parser()
        dict_opts = vars(opts)

        if len(args) > 0 :
            print('Command line argumants are not accepted. Use optional parameters.'\
                  '\nList optional parameters: calibman -h'\
                  '\nExample: calibman -e xppi0613 -r 173 -d CSPAD,OPAL1000')
            sys.exit()

        gui = GUIMain(None, app, **dict_opts)
        gui.show()

        stat = app.exec_()

        statt1 = t1.quit()
        statt2 = t2.quit()

        sys.exit(stat)

#---------------------------------

if __name__ == "__main__" :

    StartCalibManager()

#---------------------------------
