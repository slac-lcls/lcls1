/* Do not edit this file, as it is auto-generated */

#include <boost/python.hpp>
#include <boost/make_shared.hpp>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/istar.ddl.h" // inc_psana
#include "psddl_python/Converter.h"
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefSharedPtr.h"

namespace psddl_python {
namespace iStar {

using namespace boost::python;
using boost::python::object;
using boost::shared_ptr;
using std::vector;

namespace {
template<typename T, std::vector<int> (T::*MF)() const>
PyObject* method_shape(const T *x) {
  return detail::vintToList((x->*MF)());
}
} // namespace

void createWrappers(PyObject* module) {
  DDL_CREATE_MODULE( "psana.iStar", 0, "The Python wrapper module for iStar types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "iStar", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  {
  scope outer = 
  class_<Psana::iStar::ConfigV1, boost::shared_ptr<Psana::iStar::ConfigV1>, boost::noncopyable >("ConfigV1", no_init)
    .def("cooling", &Psana::iStar::ConfigV1::cooling)
    .def("overlap", &Psana::iStar::ConfigV1::overlap)
    .def("noiseFilter", &Psana::iStar::ConfigV1::noiseFilter)
    .def("blemishCorrection", &Psana::iStar::ConfigV1::blemishCorrection)
    .def("mcpIntelligate", &Psana::iStar::ConfigV1::mcpIntelligate)
    .def("fanSpeed", &Psana::iStar::ConfigV1::fanSpeed)
    .def("readoutRate", &Psana::iStar::ConfigV1::readoutRate)
    .def("triggerMode", &Psana::iStar::ConfigV1::triggerMode)
    .def("gainMode", &Psana::iStar::ConfigV1::gainMode)
    .def("gateMode", &Psana::iStar::ConfigV1::gateMode)
    .def("insertionDelay", &Psana::iStar::ConfigV1::insertionDelay)
    .def("mcpGain", &Psana::iStar::ConfigV1::mcpGain)
    .def("width", &Psana::iStar::ConfigV1::width)
    .def("height", &Psana::iStar::ConfigV1::height)
    .def("orgX", &Psana::iStar::ConfigV1::orgX)
    .def("orgY", &Psana::iStar::ConfigV1::orgY)
    .def("binX", &Psana::iStar::ConfigV1::binX)
    .def("binY", &Psana::iStar::ConfigV1::binY)
    .def("exposureTime", &Psana::iStar::ConfigV1::exposureTime)
    .def("triggerDelay", &Psana::iStar::ConfigV1::triggerDelay)
    .def("frameSize", &Psana::iStar::ConfigV1::frameSize,"Total size in bytes of the Frame object")
    .def("numPixelsX", &Psana::iStar::ConfigV1::numPixelsX,"calculate frame X size in pixels based on the current ROI and binning settings")
    .def("numPixelsY", &Psana::iStar::ConfigV1::numPixelsY,"calculate frame Y size in pixels based on the current ROI and binning settings")
    .def("numPixels", &Psana::iStar::ConfigV1::numPixels,"calculate total frame size in pixels based on the current ROI and binning settings")
  ;

  enum_<Psana::iStar::ConfigV1::ATBool>("ATBool")
    .value("False",Psana::iStar::ConfigV1::False)
    .value("True",Psana::iStar::ConfigV1::True)
  ;

  enum_<Psana::iStar::ConfigV1::FanSpeed>("FanSpeed")
    .value("Off",Psana::iStar::ConfigV1::Off)
    .value("On",Psana::iStar::ConfigV1::On)
  ;

  enum_<Psana::iStar::ConfigV1::ReadoutRate>("ReadoutRate")
    .value("Rate280MHz",Psana::iStar::ConfigV1::Rate280MHz)
    .value("Rate100MHz",Psana::iStar::ConfigV1::Rate100MHz)
  ;

  enum_<Psana::iStar::ConfigV1::TriggerMode>("TriggerMode")
    .value("Internal",Psana::iStar::ConfigV1::Internal)
    .value("ExternalLevelTransition",Psana::iStar::ConfigV1::ExternalLevelTransition)
    .value("ExternalStart",Psana::iStar::ConfigV1::ExternalStart)
    .value("ExternalExposure",Psana::iStar::ConfigV1::ExternalExposure)
    .value("Software",Psana::iStar::ConfigV1::Software)
    .value("Advanced",Psana::iStar::ConfigV1::Advanced)
    .value("External",Psana::iStar::ConfigV1::External)
  ;

  enum_<Psana::iStar::ConfigV1::GainMode>("GainMode")
    .value("HighWellCap12Bit",Psana::iStar::ConfigV1::HighWellCap12Bit)
    .value("LowNoise12Bit",Psana::iStar::ConfigV1::LowNoise12Bit)
    .value("LowNoiseHighWellCap16Bit",Psana::iStar::ConfigV1::LowNoiseHighWellCap16Bit)
  ;

  enum_<Psana::iStar::ConfigV1::GateMode>("GateMode")
    .value("CWOn",Psana::iStar::ConfigV1::CWOn)
    .value("CWOff",Psana::iStar::ConfigV1::CWOff)
    .value("FireOnly",Psana::iStar::ConfigV1::FireOnly)
    .value("GateOnly",Psana::iStar::ConfigV1::GateOnly)
    .value("FireAndGate",Psana::iStar::ConfigV1::FireAndGate)
    .value("DDG",Psana::iStar::ConfigV1::DDG)
  ;

  enum_<Psana::iStar::ConfigV1::InsertionDelay>("InsertionDelay")
    .value("Normal",Psana::iStar::ConfigV1::Normal)
    .value("Fast",Psana::iStar::ConfigV1::Fast)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_iStarConfig);
  scope().attr("STR_LEN_MAX")=64;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::iStar::ConfigV1> >(Pds::TypeId::Id_iStarConfig));

  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ConfigV1"));
    PyObject_SetAttrString(submodule, "Config", unvlist);
    Py_CLEAR(unvlist);
  }

} // createWrappers()
} // namespace iStar
} // namespace psddl_python
