/* Do not edit this file, as it is auto-generated */

#include <boost/python.hpp>
#include <boost/make_shared.hpp>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/pixis.ddl.h" // inc_psana
#include "psddl_python/Converter.h"
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefSharedPtr.h"

namespace psddl_python {
namespace Pixis {

using namespace boost::python;
using boost::python::object;
using boost::shared_ptr;
using std::vector;

namespace {
template<typename T, std::vector<int> (T::*MF)() const>
PyObject* method_shape(const T *x) {
  return detail::vintToList((x->*MF)());
}
} // namespace

void createWrappers(PyObject* module) {
  DDL_CREATE_MODULE( "psana.Pixis", 0, "The Python wrapper module for Pixis types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "Pixis", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  {
  scope outer = 
  class_<Psana::Pixis::ConfigV1, boost::shared_ptr<Psana::Pixis::ConfigV1>, boost::noncopyable >("ConfigV1", no_init)
    .def("width", &Psana::Pixis::ConfigV1::width)
    .def("height", &Psana::Pixis::ConfigV1::height)
    .def("orgX", &Psana::Pixis::ConfigV1::orgX)
    .def("orgY", &Psana::Pixis::ConfigV1::orgY)
    .def("binX", &Psana::Pixis::ConfigV1::binX)
    .def("binY", &Psana::Pixis::ConfigV1::binY)
    .def("exposureTime", &Psana::Pixis::ConfigV1::exposureTime,"Detector exposure time in seconds.")
    .def("coolingTemp", &Psana::Pixis::ConfigV1::coolingTemp,"Detector cooler setpoint temperature in degrees Celsius.")
    .def("readoutSpeed", &Psana::Pixis::ConfigV1::readoutSpeed,"Detector ADC digitization speed in MHz.")
    .def("gainMode", &Psana::Pixis::ConfigV1::gainMode,"Enum of the available gain settings of the detector.")
    .def("adcMode", &Psana::Pixis::ConfigV1::adcMode,"Enum of the available ADC Quality settings of the detector.")
    .def("triggerMode", &Psana::Pixis::ConfigV1::triggerMode,"Trigger setting for the detector.")
    .def("activeWidth", &Psana::Pixis::ConfigV1::activeWidth,"Detector active width in columns.")
    .def("activeHeight", &Psana::Pixis::ConfigV1::activeHeight,"Detector active height in rows.")
    .def("activeTopMargin", &Psana::Pixis::ConfigV1::activeTopMargin,"Number of inactive rows at the top of the sensor.")
    .def("activeBottomMargin", &Psana::Pixis::ConfigV1::activeBottomMargin,"Number of inactive rows at the top of the sensor.")
    .def("activeLeftMargin", &Psana::Pixis::ConfigV1::activeLeftMargin,"Number of inactive columns at the left of the sensor.")
    .def("activeRightMargin", &Psana::Pixis::ConfigV1::activeRightMargin,"Number of inactive columns at the right of the sensor.")
    .def("cleanCycleCount", &Psana::Pixis::ConfigV1::cleanCycleCount,"The number of clean cycles to run before acquisition begins.")
    .def("cleanCycleHeight", &Psana::Pixis::ConfigV1::cleanCycleHeight,"The number of rows in a clean cycle.")
    .def("cleanFinalHeight", &Psana::Pixis::ConfigV1::cleanFinalHeight,"The final height rows for exponential decomposition cleaning.")
    .def("cleanFinalHeightCount", &Psana::Pixis::ConfigV1::cleanFinalHeightCount,"The final height iterations for exponential decomposition cleaning.")
    .def("maskedHeight", &Psana::Pixis::ConfigV1::maskedHeight)
    .def("kineticHeight", &Psana::Pixis::ConfigV1::kineticHeight)
    .def("vsSpeed", &Psana::Pixis::ConfigV1::vsSpeed,"Detector vertical shift speed.")
    .def("infoReportInterval", &Psana::Pixis::ConfigV1::infoReportInterval)
    .def("exposureEventCode", &Psana::Pixis::ConfigV1::exposureEventCode)
    .def("numIntegrationShots", &Psana::Pixis::ConfigV1::numIntegrationShots)
    .def("frameSize", &Psana::Pixis::ConfigV1::frameSize,"Total size in bytes of the Frame object")
    .def("numPixelsX", &Psana::Pixis::ConfigV1::numPixelsX,"calculate frame X size in pixels based on the current ROI and binning settings")
    .def("numPixelsY", &Psana::Pixis::ConfigV1::numPixelsY,"calculate frame Y size in pixels based on the current ROI and binning settings")
    .def("numPixels", &Psana::Pixis::ConfigV1::numPixels,"calculate total frame size in pixels based on the current ROI and binning settings")
  ;

  enum_<Psana::Pixis::ConfigV1::GainMode>("GainMode")
    .value("Low",Psana::Pixis::ConfigV1::Low)
    .value("Medium",Psana::Pixis::ConfigV1::Medium)
    .value("High",Psana::Pixis::ConfigV1::High)
  ;

  enum_<Psana::Pixis::ConfigV1::AdcMode>("AdcMode")
    .value("LowNoise",Psana::Pixis::ConfigV1::LowNoise)
    .value("HighCapacity",Psana::Pixis::ConfigV1::HighCapacity)
  ;

  enum_<Psana::Pixis::ConfigV1::TriggerMode>("TriggerMode")
    .value("Software",Psana::Pixis::ConfigV1::Software)
    .value("External",Psana::Pixis::ConfigV1::External)
    .value("ExternalWithCleaning",Psana::Pixis::ConfigV1::ExternalWithCleaning)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_PixisConfig);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Pixis::ConfigV1> >(Pds::TypeId::Id_PixisConfig));

  {
  scope outer = 
  class_<Psana::Pixis::FrameV1, boost::shared_ptr<Psana::Pixis::FrameV1>, boost::noncopyable >("FrameV1", no_init)
    .def("shotIdStart", &Psana::Pixis::FrameV1::shotIdStart)
    .def("readoutTime", &Psana::Pixis::FrameV1::readoutTime)
    .def("temperature", &Psana::Pixis::FrameV1::temperature)
    .def("data", &Psana::Pixis::FrameV1::data)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_PixisFrame);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Pixis::FrameV1> >(Pds::TypeId::Id_PixisFrame));

  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "FrameV1"));
    PyObject_SetAttrString(submodule, "Frame", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ConfigV1"));
    PyObject_SetAttrString(submodule, "Config", unvlist);
    Py_CLEAR(unvlist);
  }
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 2>();

} // createWrappers()
} // namespace Pixis
} // namespace psddl_python
