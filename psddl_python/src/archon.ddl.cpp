/* Do not edit this file, as it is auto-generated */

#include <boost/python.hpp>
#include <boost/make_shared.hpp>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/archon.ddl.h" // inc_psana
#include "psddl_python/Converter.h"
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefSharedPtr.h"

namespace psddl_python {
namespace Archon {

using namespace boost::python;
using boost::python::object;
using boost::shared_ptr;
using std::vector;

namespace {
template<typename T, std::vector<int> (T::*MF)() const>
PyObject* method_shape(const T *x) {
  return detail::vintToList((x->*MF)());
}
} // namespace

void createWrappers(PyObject* module) {
  DDL_CREATE_MODULE( "psana.Archon", 0, "The Python wrapper module for Archon types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "Archon", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  {
  scope outer = 
  class_<Psana::Archon::ConfigV1, boost::shared_ptr<Psana::Archon::ConfigV1>, boost::noncopyable >("ConfigV1", "Class containing configuration data for CCDs using the Archon controller.", no_init)
    .def("readoutMode", &Psana::Archon::ConfigV1::readoutMode)
    .def("sweepCount", &Psana::Archon::ConfigV1::sweepCount)
    .def("integrationTime", &Psana::Archon::ConfigV1::integrationTime)
    .def("nonIntegrationTime", &Psana::Archon::ConfigV1::nonIntegrationTime)
    .def("preSkipPixels", &Psana::Archon::ConfigV1::preSkipPixels)
    .def("pixels", &Psana::Archon::ConfigV1::pixels)
    .def("postSkipPixels", &Psana::Archon::ConfigV1::postSkipPixels)
    .def("overscanPixels", &Psana::Archon::ConfigV1::overscanPixels)
    .def("preSkipLines", &Psana::Archon::ConfigV1::preSkipLines)
    .def("lines", &Psana::Archon::ConfigV1::lines)
    .def("postSkipLines", &Psana::Archon::ConfigV1::postSkipLines)
    .def("overScanLines", &Psana::Archon::ConfigV1::overScanLines)
    .def("horizontalBinning", &Psana::Archon::ConfigV1::horizontalBinning)
    .def("verticalBinning", &Psana::Archon::ConfigV1::verticalBinning)
    .def("rgh", &Psana::Archon::ConfigV1::rgh)
    .def("rgl", &Psana::Archon::ConfigV1::rgl)
    .def("shp", &Psana::Archon::ConfigV1::shp)
    .def("shd", &Psana::Archon::ConfigV1::shd)
    .def("st", &Psana::Archon::ConfigV1::st)
    .def("stm1", &Psana::Archon::ConfigV1::stm1)
    .def("at", &Psana::Archon::ConfigV1::at)
    .def("dwell1", &Psana::Archon::ConfigV1::dwell1)
    .def("dwell2", &Psana::Archon::ConfigV1::dwell2)
    .def("rgHigh", &Psana::Archon::ConfigV1::rgHigh)
    .def("rgLow", &Psana::Archon::ConfigV1::rgLow)
    .def("sHigh", &Psana::Archon::ConfigV1::sHigh)
    .def("sLow", &Psana::Archon::ConfigV1::sLow)
    .def("aHigh", &Psana::Archon::ConfigV1::aHigh)
    .def("aLow", &Psana::Archon::ConfigV1::aLow)
    .def("rgSlew", &Psana::Archon::ConfigV1::rgSlew)
    .def("sSlew", &Psana::Archon::ConfigV1::sSlew)
    .def("aSlew", &Psana::Archon::ConfigV1::aSlew)
    .def("config", &Psana::Archon::ConfigV1::config,"The path to an acf file to use with the camera.")
  ;

  enum_<Psana::Archon::ConfigV1::ReadoutMode>("ReadoutMode")
    .value("Single",Psana::Archon::ConfigV1::Single)
    .value("Continuous",Psana::Archon::ConfigV1::Continuous)
    .value("Triggered",Psana::Archon::ConfigV1::Triggered)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_ArchonConfig);
  scope().attr("FILENAME_CHAR_MAX")=256;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Archon::ConfigV1> >(Pds::TypeId::Id_ArchonConfig));

  {
  scope outer = 
  class_<Psana::Archon::ConfigV2, boost::shared_ptr<Psana::Archon::ConfigV2>, boost::noncopyable >("ConfigV2", "Class containing configuration data for CCDs using the Archon controller.", no_init)
    .def("readoutMode", &Psana::Archon::ConfigV2::readoutMode,"Readout mode of the camera, a.k.a. software vs hardware triggered.")
    .def("exposureEventCode", &Psana::Archon::ConfigV2::exposureEventCode,"The event code to use for exposure when software triggering the camera.")
    .def("configSize", &Psana::Archon::ConfigV2::configSize,"The size of the acf file portion of the configuration.")
    .def("preFrameSweepCount", &Psana::Archon::ConfigV2::preFrameSweepCount,"The count of lines to sweep before beginning a frame.")
    .def("idleSweepCount", &Psana::Archon::ConfigV2::idleSweepCount,"The number of lines to sweep per cycle when waiting for triggers.")
    .def("integrationTime", &Psana::Archon::ConfigV2::integrationTime,"The time (ms) to expose the sensor.")
    .def("nonIntegrationTime", &Psana::Archon::ConfigV2::nonIntegrationTime,"The time (ms) to wait after exposing the sensor before reading it out.")
    .def("batches", &Psana::Archon::ConfigV2::batches,"The number of frames to batch together for readout.")
    .def("pixels", &Psana::Archon::ConfigV2::pixels,"The number of pixels to readout from each tap.")
    .def("lines", &Psana::Archon::ConfigV2::lines,"The number of lines to readout from each tap.")
    .def("horizontalBinning", &Psana::Archon::ConfigV2::horizontalBinning,"The horizontal binning setting.")
    .def("verticalBinning", &Psana::Archon::ConfigV2::verticalBinning,"The vertical binning setting.")
    .def("sensorPixels", &Psana::Archon::ConfigV2::sensorPixels,"Number of actual pixels per tap.")
    .def("sensorLines", &Psana::Archon::ConfigV2::sensorLines,"Number of actual lines per tap.")
    .def("sensorTaps", &Psana::Archon::ConfigV2::sensorTaps,"Number of taps for the sensor.")
    .def("st", &Psana::Archon::ConfigV2::st)
    .def("stm1", &Psana::Archon::ConfigV2::stm1)
    .def("at", &Psana::Archon::ConfigV2::at)
    .def("config", &Psana::Archon::ConfigV2::config,"The contents of the acf file to use with the camera.")
    .def("config_shape", &method_shape<Psana::Archon::ConfigV2, &Psana::Archon::ConfigV2::config_shape>)
  ;

  enum_<Psana::Archon::ConfigV2::ReadoutMode>("ReadoutMode")
    .value("Single",Psana::Archon::ConfigV2::Single)
    .value("Continuous",Psana::Archon::ConfigV2::Continuous)
    .value("Triggered",Psana::Archon::ConfigV2::Triggered)
  ;
  scope().attr("Version")=2;
  scope().attr("TypeId")=int(Pds::TypeId::Id_ArchonConfig);
  scope().attr("MaxConfigLines")=1<<14;
  scope().attr("MaxConfigLineLength")=2048;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Archon::ConfigV2> >(Pds::TypeId::Id_ArchonConfig));

  {
  scope outer = 
  class_<Psana::Archon::ConfigV3, boost::shared_ptr<Psana::Archon::ConfigV3>, boost::noncopyable >("ConfigV3", no_init)
    .def("readoutMode", &Psana::Archon::ConfigV3::readoutMode,"Readout mode of the camera, a.k.a. software vs hardware triggered.")
    .def("power", &Psana::Archon::ConfigV3::power,"The state of the ccd power, a.k.a off vs on.")
    .def("exposureEventCode", &Psana::Archon::ConfigV3::exposureEventCode,"The event code to use for exposure when software triggering the camera.")
    .def("configSize", &Psana::Archon::ConfigV3::configSize,"The size of the acf file portion of the configuration.")
    .def("preFrameSweepCount", &Psana::Archon::ConfigV3::preFrameSweepCount,"The count of lines to sweep before beginning a frame.")
    .def("idleSweepCount", &Psana::Archon::ConfigV3::idleSweepCount,"The number of lines to sweep per cycle when waiting for triggers.")
    .def("integrationTime", &Psana::Archon::ConfigV3::integrationTime,"The time (ms) to expose the sensor.")
    .def("nonIntegrationTime", &Psana::Archon::ConfigV3::nonIntegrationTime,"The time (ms) to wait after exposing the sensor before reading it out.")
    .def("batches", &Psana::Archon::ConfigV3::batches,"The number of frames to batch together for readout.")
    .def("pixels", &Psana::Archon::ConfigV3::pixels,"The number of pixels to readout from each tap.")
    .def("lines", &Psana::Archon::ConfigV3::lines,"The number of lines to readout from each tap.")
    .def("horizontalBinning", &Psana::Archon::ConfigV3::horizontalBinning,"The horizontal binning setting.")
    .def("verticalBinning", &Psana::Archon::ConfigV3::verticalBinning,"The vertical binning setting.")
    .def("sensorPixels", &Psana::Archon::ConfigV3::sensorPixels,"Number of actual pixels per tap.")
    .def("sensorLines", &Psana::Archon::ConfigV3::sensorLines,"Number of actual lines per tap.")
    .def("sensorTaps", &Psana::Archon::ConfigV3::sensorTaps,"Number of taps for the sensor.")
    .def("st", &Psana::Archon::ConfigV3::st)
    .def("stm1", &Psana::Archon::ConfigV3::stm1)
    .def("at", &Psana::Archon::ConfigV3::at)
    .def("bias", &Psana::Archon::ConfigV3::bias,"The state of the ccd bias voltage, a.k.a off vs on.")
    .def("biasChan", &Psana::Archon::ConfigV3::biasChan,"The channel ID of the bias voltage.")
    .def("biasVoltage", &Psana::Archon::ConfigV3::biasVoltage,"The bias voltage setpoint.")
    .def("configVersion", &Psana::Archon::ConfigV3::configVersion,"Version tag for the attached acf file.")
    .def("config", &Psana::Archon::ConfigV3::config,"The contents of the acf file to use with the camera.")
    .def("numPixelsX", &Psana::Archon::ConfigV3::numPixelsX,"Calculate the frame X size in pixels based on the number of pixels per tap and the number of taps.")
    .def("numPixelsY", &Psana::Archon::ConfigV3::numPixelsY,"calculate frame Y size in pixels based on the number of lines per tap.")
    .def("numPixels", &Psana::Archon::ConfigV3::numPixels,"calculate total frame size in pixels.")
    .def("config_shape", &method_shape<Psana::Archon::ConfigV3, &Psana::Archon::ConfigV3::config_shape>)
  ;

  enum_<Psana::Archon::ConfigV3::ReadoutMode>("ReadoutMode")
    .value("FreeRun",Psana::Archon::ConfigV3::FreeRun)
    .value("Triggered",Psana::Archon::ConfigV3::Triggered)
  ;

  enum_<Psana::Archon::ConfigV3::Switch>("Switch")
    .value("Off",Psana::Archon::ConfigV3::Off)
    .value("On",Psana::Archon::ConfigV3::On)
  ;

  enum_<Psana::Archon::ConfigV3::BiasChannelId>("BiasChannelId")
    .value("NV4",Psana::Archon::ConfigV3::NV4)
    .value("NV3",Psana::Archon::ConfigV3::NV3)
    .value("NV2",Psana::Archon::ConfigV3::NV2)
    .value("NV1",Psana::Archon::ConfigV3::NV1)
    .value("PV1",Psana::Archon::ConfigV3::PV1)
    .value("PV2",Psana::Archon::ConfigV3::PV2)
    .value("PV3",Psana::Archon::ConfigV3::PV3)
    .value("PV4",Psana::Archon::ConfigV3::PV4)
  ;
  scope().attr("Version")=3;
  scope().attr("TypeId")=int(Pds::TypeId::Id_ArchonConfig);
  scope().attr("MaxConfigLines")=1<<14;
  scope().attr("MaxConfigLineLength")=2048;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Archon::ConfigV3> >(Pds::TypeId::Id_ArchonConfig));

  {
  scope outer = 
  class_<Psana::Archon::ConfigV4, boost::shared_ptr<Psana::Archon::ConfigV4>, boost::noncopyable >("ConfigV4", no_init)
    .def("readoutMode", &Psana::Archon::ConfigV4::readoutMode,"Readout mode of the camera, a.k.a. software vs hardware triggered.")
    .def("power", &Psana::Archon::ConfigV4::power,"The state of the ccd power, a.k.a off vs on.")
    .def("exposureEventCode", &Psana::Archon::ConfigV4::exposureEventCode,"The event code to use for exposure when software triggering the camera.")
    .def("configSize", &Psana::Archon::ConfigV4::configSize,"The size of the acf file portion of the configuration.")
    .def("preFrameSweepCount", &Psana::Archon::ConfigV4::preFrameSweepCount,"The count of lines to sweep before beginning a frame.")
    .def("idleSweepCount", &Psana::Archon::ConfigV4::idleSweepCount,"The number of lines to sweep per cycle when waiting for triggers.")
    .def("preSkipLines", &Psana::Archon::ConfigV4::preSkipLines,"The number of lines to skip before beginning a frame.")
    .def("integrationTime", &Psana::Archon::ConfigV4::integrationTime,"The time (ms) to expose the sensor.")
    .def("nonIntegrationTime", &Psana::Archon::ConfigV4::nonIntegrationTime,"The time (ms) to wait after exposing the sensor before reading it out.")
    .def("batches", &Psana::Archon::ConfigV4::batches,"The number of frames to batch together for readout.")
    .def("pixels", &Psana::Archon::ConfigV4::pixels,"The number of pixels to readout from each tap.")
    .def("lines", &Psana::Archon::ConfigV4::lines,"The number of lines to readout from each tap.")
    .def("horizontalBinning", &Psana::Archon::ConfigV4::horizontalBinning,"The horizontal binning setting.")
    .def("verticalBinning", &Psana::Archon::ConfigV4::verticalBinning,"The vertical binning setting.")
    .def("sensorPixels", &Psana::Archon::ConfigV4::sensorPixels,"Number of actual pixels per tap.")
    .def("sensorLines", &Psana::Archon::ConfigV4::sensorLines,"Number of actual lines per tap.")
    .def("sensorTaps", &Psana::Archon::ConfigV4::sensorTaps,"Number of taps for the sensor.")
    .def("st", &Psana::Archon::ConfigV4::st)
    .def("stm1", &Psana::Archon::ConfigV4::stm1)
    .def("at", &Psana::Archon::ConfigV4::at)
    .def("bias", &Psana::Archon::ConfigV4::bias,"The state of the ccd bias voltage, a.k.a off vs on.")
    .def("biasChan", &Psana::Archon::ConfigV4::biasChan,"The channel ID of the bias voltage.")
    .def("biasVoltage", &Psana::Archon::ConfigV4::biasVoltage,"The bias voltage setpoint.")
    .def("configVersion", &Psana::Archon::ConfigV4::configVersion,"Version tag for the attached acf file.")
    .def("config", &Psana::Archon::ConfigV4::config,"The contents of the acf file to use with the camera.")
    .def("numPixelsX", &Psana::Archon::ConfigV4::numPixelsX,"Calculate the frame X size in pixels based on the number of pixels per tap and the number of taps.")
    .def("numPixelsY", &Psana::Archon::ConfigV4::numPixelsY,"calculate frame Y size in pixels based on the number of lines per tap.")
    .def("numPixels", &Psana::Archon::ConfigV4::numPixels,"calculate total frame size in pixels.")
    .def("config_shape", &method_shape<Psana::Archon::ConfigV4, &Psana::Archon::ConfigV4::config_shape>)
  ;

  enum_<Psana::Archon::ConfigV4::ReadoutMode>("ReadoutMode")
    .value("FreeRun",Psana::Archon::ConfigV4::FreeRun)
    .value("Triggered",Psana::Archon::ConfigV4::Triggered)
  ;

  enum_<Psana::Archon::ConfigV4::Switch>("Switch")
    .value("Off",Psana::Archon::ConfigV4::Off)
    .value("On",Psana::Archon::ConfigV4::On)
  ;

  enum_<Psana::Archon::ConfigV4::BiasChannelId>("BiasChannelId")
    .value("NV4",Psana::Archon::ConfigV4::NV4)
    .value("NV3",Psana::Archon::ConfigV4::NV3)
    .value("NV2",Psana::Archon::ConfigV4::NV2)
    .value("NV1",Psana::Archon::ConfigV4::NV1)
    .value("PV1",Psana::Archon::ConfigV4::PV1)
    .value("PV2",Psana::Archon::ConfigV4::PV2)
    .value("PV3",Psana::Archon::ConfigV4::PV3)
    .value("PV4",Psana::Archon::ConfigV4::PV4)
  ;
  scope().attr("Version")=4;
  scope().attr("TypeId")=int(Pds::TypeId::Id_ArchonConfig);
  scope().attr("MaxConfigLines")=1<<14;
  scope().attr("MaxConfigLineLength")=2048;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Archon::ConfigV4> >(Pds::TypeId::Id_ArchonConfig));

  {
    PyObject* unvlist = PyList_New(4);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ConfigV1"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "ConfigV2"));
    PyList_SET_ITEM(unvlist, 2, PyObject_GetAttrString(submodule, "ConfigV3"));
    PyList_SET_ITEM(unvlist, 3, PyObject_GetAttrString(submodule, "ConfigV4"));
    PyObject_SetAttrString(submodule, "Config", unvlist);
    Py_CLEAR(unvlist);
  }

} // createWrappers()
} // namespace Archon
} // namespace psddl_python
