/* Do not edit this file, as it is auto-generated */

#include <boost/python.hpp>
#include <boost/make_shared.hpp>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/epix.ddl.h" // inc_psana
#include "psddl_python/Converter.h"
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefSharedPtr.h"

namespace psddl_python {
namespace Epix {

using namespace boost::python;
using boost::python::object;
using boost::shared_ptr;
using std::vector;

namespace {
template<typename T, std::vector<int> (T::*MF)() const>
PyObject* method_shape(const T *x) {
  return detail::vintToList((x->*MF)());
}
} // namespace

void createWrappers(PyObject* module) {
  DDL_CREATE_MODULE( "psana.Epix", 0, "The Python wrapper module for Epix types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "Epix", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  class_<Psana::Epix::AsicConfigV1, boost::shared_ptr<Psana::Epix::AsicConfigV1>, boost::noncopyable >("AsicConfigV1", no_init)
    .def("monostPulser", &Psana::Epix::AsicConfigV1::monostPulser)
    .def("dummyTest", &Psana::Epix::AsicConfigV1::dummyTest)
    .def("dummyMask", &Psana::Epix::AsicConfigV1::dummyMask)
    .def("pulser", &Psana::Epix::AsicConfigV1::pulser)
    .def("pbit", &Psana::Epix::AsicConfigV1::pbit)
    .def("atest", &Psana::Epix::AsicConfigV1::atest)
    .def("test", &Psana::Epix::AsicConfigV1::test)
    .def("sabTest", &Psana::Epix::AsicConfigV1::sabTest)
    .def("hrTest", &Psana::Epix::AsicConfigV1::hrTest)
    .def("digMon1", &Psana::Epix::AsicConfigV1::digMon1)
    .def("digMon2", &Psana::Epix::AsicConfigV1::digMon2)
    .def("pulserDac", &Psana::Epix::AsicConfigV1::pulserDac)
    .def("Dm1En", &Psana::Epix::AsicConfigV1::Dm1En)
    .def("Dm2En", &Psana::Epix::AsicConfigV1::Dm2En)
    .def("slvdSBit", &Psana::Epix::AsicConfigV1::slvdSBit)
    .def("VRefDac", &Psana::Epix::AsicConfigV1::VRefDac)
    .def("TpsTComp", &Psana::Epix::AsicConfigV1::TpsTComp)
    .def("TpsMux", &Psana::Epix::AsicConfigV1::TpsMux)
    .def("RoMonost", &Psana::Epix::AsicConfigV1::RoMonost)
    .def("TpsGr", &Psana::Epix::AsicConfigV1::TpsGr)
    .def("S2dGr", &Psana::Epix::AsicConfigV1::S2dGr)
    .def("PpOcbS2d", &Psana::Epix::AsicConfigV1::PpOcbS2d)
    .def("Ocb", &Psana::Epix::AsicConfigV1::Ocb)
    .def("Monost", &Psana::Epix::AsicConfigV1::Monost)
    .def("FastppEnable", &Psana::Epix::AsicConfigV1::FastppEnable)
    .def("Preamp", &Psana::Epix::AsicConfigV1::Preamp)
    .def("PixelCb", &Psana::Epix::AsicConfigV1::PixelCb)
    .def("S2dTComp", &Psana::Epix::AsicConfigV1::S2dTComp)
    .def("FilterDac", &Psana::Epix::AsicConfigV1::FilterDac)
    .def("TC", &Psana::Epix::AsicConfigV1::TC)
    .def("S2d", &Psana::Epix::AsicConfigV1::S2d)
    .def("S2dDacBias", &Psana::Epix::AsicConfigV1::S2dDacBias)
    .def("TpsTcDac", &Psana::Epix::AsicConfigV1::TpsTcDac)
    .def("TpsDac", &Psana::Epix::AsicConfigV1::TpsDac)
    .def("S2dTcDac", &Psana::Epix::AsicConfigV1::S2dTcDac)
    .def("S2dDac", &Psana::Epix::AsicConfigV1::S2dDac)
    .def("TestBe", &Psana::Epix::AsicConfigV1::TestBe)
    .def("IsEn", &Psana::Epix::AsicConfigV1::IsEn)
    .def("DelExec", &Psana::Epix::AsicConfigV1::DelExec)
    .def("DelCckReg", &Psana::Epix::AsicConfigV1::DelCckReg)
    .def("RowStartAddr", &Psana::Epix::AsicConfigV1::RowStartAddr)
    .def("RowStopAddr", &Psana::Epix::AsicConfigV1::RowStopAddr)
    .def("ColStartAddr", &Psana::Epix::AsicConfigV1::ColStartAddr)
    .def("ColStopAddr", &Psana::Epix::AsicConfigV1::ColStopAddr)
    .def("chipID", &Psana::Epix::AsicConfigV1::chipID)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epix::AsicConfigV1> >(-1));

  {
  scope outer = 
  class_<Psana::Epix::ConfigV1, boost::shared_ptr<Psana::Epix::ConfigV1>, boost::noncopyable >("ConfigV1", no_init)
    .def("version", &Psana::Epix::ConfigV1::version)
    .def("runTrigDelay", &Psana::Epix::ConfigV1::runTrigDelay)
    .def("daqTrigDelay", &Psana::Epix::ConfigV1::daqTrigDelay)
    .def("dacSetting", &Psana::Epix::ConfigV1::dacSetting)
    .def("asicGR", &Psana::Epix::ConfigV1::asicGR)
    .def("asicAcq", &Psana::Epix::ConfigV1::asicAcq)
    .def("asicR0", &Psana::Epix::ConfigV1::asicR0)
    .def("asicPpmat", &Psana::Epix::ConfigV1::asicPpmat)
    .def("asicPpbe", &Psana::Epix::ConfigV1::asicPpbe)
    .def("asicRoClk", &Psana::Epix::ConfigV1::asicRoClk)
    .def("asicGRControl", &Psana::Epix::ConfigV1::asicGRControl)
    .def("asicAcqControl", &Psana::Epix::ConfigV1::asicAcqControl)
    .def("asicR0Control", &Psana::Epix::ConfigV1::asicR0Control)
    .def("asicPpmatControl", &Psana::Epix::ConfigV1::asicPpmatControl)
    .def("asicPpbeControl", &Psana::Epix::ConfigV1::asicPpbeControl)
    .def("asicR0ClkControl", &Psana::Epix::ConfigV1::asicR0ClkControl)
    .def("prepulseR0En", &Psana::Epix::ConfigV1::prepulseR0En)
    .def("adcStreamMode", &Psana::Epix::ConfigV1::adcStreamMode)
    .def("testPatternEnable", &Psana::Epix::ConfigV1::testPatternEnable)
    .def("acqToAsicR0Delay", &Psana::Epix::ConfigV1::acqToAsicR0Delay)
    .def("asicR0ToAsicAcq", &Psana::Epix::ConfigV1::asicR0ToAsicAcq)
    .def("asicAcqWidth", &Psana::Epix::ConfigV1::asicAcqWidth)
    .def("asicAcqLToPPmatL", &Psana::Epix::ConfigV1::asicAcqLToPPmatL)
    .def("asicRoClkHalfT", &Psana::Epix::ConfigV1::asicRoClkHalfT)
    .def("adcReadsPerPixel", &Psana::Epix::ConfigV1::adcReadsPerPixel)
    .def("adcClkHalfT", &Psana::Epix::ConfigV1::adcClkHalfT)
    .def("asicR0Width", &Psana::Epix::ConfigV1::asicR0Width)
    .def("adcPipelineDelay", &Psana::Epix::ConfigV1::adcPipelineDelay)
    .def("prepulseR0Width", &Psana::Epix::ConfigV1::prepulseR0Width)
    .def("prepulseR0Delay", &Psana::Epix::ConfigV1::prepulseR0Delay)
    .def("digitalCardId0", &Psana::Epix::ConfigV1::digitalCardId0)
    .def("digitalCardId1", &Psana::Epix::ConfigV1::digitalCardId1)
    .def("analogCardId0", &Psana::Epix::ConfigV1::analogCardId0)
    .def("analogCardId1", &Psana::Epix::ConfigV1::analogCardId1)
    .def("lastRowExclusions", &Psana::Epix::ConfigV1::lastRowExclusions)
    .def("numberOfAsicsPerRow", &Psana::Epix::ConfigV1::numberOfAsicsPerRow)
    .def("numberOfAsicsPerColumn", &Psana::Epix::ConfigV1::numberOfAsicsPerColumn)
    .def("numberOfRowsPerAsic", &Psana::Epix::ConfigV1::numberOfRowsPerAsic,"generally 2 x 2")
    .def("numberOfPixelsPerAsicRow", &Psana::Epix::ConfigV1::numberOfPixelsPerAsicRow,"for epix100  352")
    .def("baseClockFrequency", &Psana::Epix::ConfigV1::baseClockFrequency,"for epix100 96*4")
    .def("asicMask", &Psana::Epix::ConfigV1::asicMask)
    .def("asics", &Psana::Epix::ConfigV1::asics, return_internal_reference<>())
    .def("asicPixelTestArray", &Psana::Epix::ConfigV1::asicPixelTestArray)
    .def("asicPixelMaskArray", &Psana::Epix::ConfigV1::asicPixelMaskArray)
    .def("numberOfRows", &Psana::Epix::ConfigV1::numberOfRows,"Number of rows in a readout unit")
    .def("numberOfColumns", &Psana::Epix::ConfigV1::numberOfColumns,"Number of columns in a readout unit")
    .def("numberOfAsics", &Psana::Epix::ConfigV1::numberOfAsics,"Number of columns in a readout unit")
    .def("asics_shape", &method_shape<Psana::Epix::ConfigV1, &Psana::Epix::ConfigV1::asics_shape>)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_EpixConfig);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epix::ConfigV1> >(Pds::TypeId::Id_EpixConfig));

  class_<Psana::Epix::Asic10kConfigV1, boost::shared_ptr<Psana::Epix::Asic10kConfigV1>, boost::noncopyable >("Asic10kConfigV1", no_init)
    .def("CompTH_DAC", &Psana::Epix::Asic10kConfigV1::CompTH_DAC)
    .def("CompEn_0", &Psana::Epix::Asic10kConfigV1::CompEn_0)
    .def("PulserSync", &Psana::Epix::Asic10kConfigV1::PulserSync)
    .def("dummyTest", &Psana::Epix::Asic10kConfigV1::dummyTest)
    .def("dummyMask", &Psana::Epix::Asic10kConfigV1::dummyMask)
    .def("dummyG", &Psana::Epix::Asic10kConfigV1::dummyG)
    .def("dummyGA", &Psana::Epix::Asic10kConfigV1::dummyGA)
    .def("dummyUpper12bits", &Psana::Epix::Asic10kConfigV1::dummyUpper12bits)
    .def("pulser", &Psana::Epix::Asic10kConfigV1::pulser)
    .def("pbit", &Psana::Epix::Asic10kConfigV1::pbit)
    .def("atest", &Psana::Epix::Asic10kConfigV1::atest)
    .def("test", &Psana::Epix::Asic10kConfigV1::test)
    .def("sabTest", &Psana::Epix::Asic10kConfigV1::sabTest)
    .def("hrTest", &Psana::Epix::Asic10kConfigV1::hrTest)
    .def("pulserR", &Psana::Epix::Asic10kConfigV1::pulserR)
    .def("digMon1", &Psana::Epix::Asic10kConfigV1::digMon1)
    .def("digMon2", &Psana::Epix::Asic10kConfigV1::digMon2)
    .def("pulserDac", &Psana::Epix::Asic10kConfigV1::pulserDac)
    .def("monostPulser", &Psana::Epix::Asic10kConfigV1::monostPulser)
    .def("CompEn_1", &Psana::Epix::Asic10kConfigV1::CompEn_1)
    .def("CompEn_2", &Psana::Epix::Asic10kConfigV1::CompEn_2)
    .def("Dm1En", &Psana::Epix::Asic10kConfigV1::Dm1En)
    .def("Dm2En", &Psana::Epix::Asic10kConfigV1::Dm2En)
    .def("emph_bd", &Psana::Epix::Asic10kConfigV1::emph_bd)
    .def("emph_bc", &Psana::Epix::Asic10kConfigV1::emph_bc)
    .def("VRefDac", &Psana::Epix::Asic10kConfigV1::VRefDac)
    .def("vrefLow", &Psana::Epix::Asic10kConfigV1::vrefLow)
    .def("TpsTComp", &Psana::Epix::Asic10kConfigV1::TpsTComp)
    .def("TpsMux", &Psana::Epix::Asic10kConfigV1::TpsMux)
    .def("RoMonost", &Psana::Epix::Asic10kConfigV1::RoMonost)
    .def("TpsGr", &Psana::Epix::Asic10kConfigV1::TpsGr)
    .def("S2dGr", &Psana::Epix::Asic10kConfigV1::S2dGr)
    .def("PpOcbS2d", &Psana::Epix::Asic10kConfigV1::PpOcbS2d)
    .def("Ocb", &Psana::Epix::Asic10kConfigV1::Ocb)
    .def("Monost", &Psana::Epix::Asic10kConfigV1::Monost)
    .def("FastppEnable", &Psana::Epix::Asic10kConfigV1::FastppEnable)
    .def("Preamp", &Psana::Epix::Asic10kConfigV1::Preamp)
    .def("PixelCb", &Psana::Epix::Asic10kConfigV1::PixelCb)
    .def("Vld1_b", &Psana::Epix::Asic10kConfigV1::Vld1_b)
    .def("S2dTComp", &Psana::Epix::Asic10kConfigV1::S2dTComp)
    .def("FilterDac", &Psana::Epix::Asic10kConfigV1::FilterDac)
    .def("testVDTransmitter", &Psana::Epix::Asic10kConfigV1::testVDTransmitter)
    .def("TC", &Psana::Epix::Asic10kConfigV1::TC)
    .def("S2d", &Psana::Epix::Asic10kConfigV1::S2d)
    .def("S2dDacBias", &Psana::Epix::Asic10kConfigV1::S2dDacBias)
    .def("TpsTcDac", &Psana::Epix::Asic10kConfigV1::TpsTcDac)
    .def("TpsDac", &Psana::Epix::Asic10kConfigV1::TpsDac)
    .def("S2dTcDac", &Psana::Epix::Asic10kConfigV1::S2dTcDac)
    .def("S2dDac", &Psana::Epix::Asic10kConfigV1::S2dDac)
    .def("TestBe", &Psana::Epix::Asic10kConfigV1::TestBe)
    .def("IsEn", &Psana::Epix::Asic10kConfigV1::IsEn)
    .def("DelExec", &Psana::Epix::Asic10kConfigV1::DelExec)
    .def("DelCckReg", &Psana::Epix::Asic10kConfigV1::DelCckReg)
    .def("RO_rst_en", &Psana::Epix::Asic10kConfigV1::RO_rst_en)
    .def("slvdSBit", &Psana::Epix::Asic10kConfigV1::slvdSBit)
    .def("FELmode", &Psana::Epix::Asic10kConfigV1::FELmode)
    .def("CompEnOn", &Psana::Epix::Asic10kConfigV1::CompEnOn)
    .def("RowStartAddr", &Psana::Epix::Asic10kConfigV1::RowStartAddr)
    .def("RowStopAddr", &Psana::Epix::Asic10kConfigV1::RowStopAddr)
    .def("ColStartAddr", &Psana::Epix::Asic10kConfigV1::ColStartAddr)
    .def("ColStopAddr", &Psana::Epix::Asic10kConfigV1::ColStopAddr)
    .def("chipID", &Psana::Epix::Asic10kConfigV1::chipID)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epix::Asic10kConfigV1> >(-1));

  {
  scope outer = 
  class_<Psana::Epix::Config10KV1, boost::shared_ptr<Psana::Epix::Config10KV1>, boost::noncopyable >("Config10KV1", no_init)
    .def("version", &Psana::Epix::Config10KV1::version)
    .def("runTrigDelay", &Psana::Epix::Config10KV1::runTrigDelay)
    .def("daqTrigDelay", &Psana::Epix::Config10KV1::daqTrigDelay)
    .def("dacSetting", &Psana::Epix::Config10KV1::dacSetting)
    .def("asicGR", &Psana::Epix::Config10KV1::asicGR)
    .def("asicAcq", &Psana::Epix::Config10KV1::asicAcq)
    .def("asicR0", &Psana::Epix::Config10KV1::asicR0)
    .def("asicPpmat", &Psana::Epix::Config10KV1::asicPpmat)
    .def("asicPpbe", &Psana::Epix::Config10KV1::asicPpbe)
    .def("asicRoClk", &Psana::Epix::Config10KV1::asicRoClk)
    .def("asicGRControl", &Psana::Epix::Config10KV1::asicGRControl)
    .def("asicAcqControl", &Psana::Epix::Config10KV1::asicAcqControl)
    .def("asicR0Control", &Psana::Epix::Config10KV1::asicR0Control)
    .def("asicPpmatControl", &Psana::Epix::Config10KV1::asicPpmatControl)
    .def("asicPpbeControl", &Psana::Epix::Config10KV1::asicPpbeControl)
    .def("asicR0ClkControl", &Psana::Epix::Config10KV1::asicR0ClkControl)
    .def("prepulseR0En", &Psana::Epix::Config10KV1::prepulseR0En)
    .def("adcStreamMode", &Psana::Epix::Config10KV1::adcStreamMode)
    .def("testPatternEnable", &Psana::Epix::Config10KV1::testPatternEnable)
    .def("SyncMode", &Psana::Epix::Config10KV1::SyncMode,"new")
    .def("R0Mode", &Psana::Epix::Config10KV1::R0Mode,"new")
    .def("DoutPipelineDelay", &Psana::Epix::Config10KV1::DoutPipelineDelay,"new")
    .def("acqToAsicR0Delay", &Psana::Epix::Config10KV1::acqToAsicR0Delay)
    .def("asicR0ToAsicAcq", &Psana::Epix::Config10KV1::asicR0ToAsicAcq)
    .def("asicAcqWidth", &Psana::Epix::Config10KV1::asicAcqWidth)
    .def("asicAcqLToPPmatL", &Psana::Epix::Config10KV1::asicAcqLToPPmatL)
    .def("asicRoClkHalfT", &Psana::Epix::Config10KV1::asicRoClkHalfT)
    .def("adcReadsPerPixel", &Psana::Epix::Config10KV1::adcReadsPerPixel)
    .def("adcClkHalfT", &Psana::Epix::Config10KV1::adcClkHalfT)
    .def("asicR0Width", &Psana::Epix::Config10KV1::asicR0Width)
    .def("adcPipelineDelay", &Psana::Epix::Config10KV1::adcPipelineDelay)
    .def("SyncWidth", &Psana::Epix::Config10KV1::SyncWidth,"new")
    .def("SyncDelay", &Psana::Epix::Config10KV1::SyncDelay,"new")
    .def("prepulseR0Width", &Psana::Epix::Config10KV1::prepulseR0Width)
    .def("prepulseR0Delay", &Psana::Epix::Config10KV1::prepulseR0Delay)
    .def("digitalCardId0", &Psana::Epix::Config10KV1::digitalCardId0)
    .def("digitalCardId1", &Psana::Epix::Config10KV1::digitalCardId1)
    .def("analogCardId0", &Psana::Epix::Config10KV1::analogCardId0)
    .def("analogCardId1", &Psana::Epix::Config10KV1::analogCardId1)
    .def("lastRowExclusions", &Psana::Epix::Config10KV1::lastRowExclusions)
    .def("numberOfAsicsPerRow", &Psana::Epix::Config10KV1::numberOfAsicsPerRow)
    .def("numberOfAsicsPerColumn", &Psana::Epix::Config10KV1::numberOfAsicsPerColumn)
    .def("numberOfRowsPerAsic", &Psana::Epix::Config10KV1::numberOfRowsPerAsic)
    .def("numberOfPixelsPerAsicRow", &Psana::Epix::Config10KV1::numberOfPixelsPerAsicRow,"for epix10k  176")
    .def("baseClockFrequency", &Psana::Epix::Config10KV1::baseClockFrequency,"for epix10k 48*4")
    .def("asicMask", &Psana::Epix::Config10KV1::asicMask)
    .def("scopeEnable", &Psana::Epix::Config10KV1::scopeEnable)
    .def("scopeTrigEdge", &Psana::Epix::Config10KV1::scopeTrigEdge)
    .def("scopeTrigChan", &Psana::Epix::Config10KV1::scopeTrigChan)
    .def("scopeArmMode", &Psana::Epix::Config10KV1::scopeArmMode)
    .def("scopeADCThreshold", &Psana::Epix::Config10KV1::scopeADCThreshold)
    .def("scopeTrigHoldoff", &Psana::Epix::Config10KV1::scopeTrigHoldoff)
    .def("scopeTrigOffset", &Psana::Epix::Config10KV1::scopeTrigOffset)
    .def("scopeTraceLength", &Psana::Epix::Config10KV1::scopeTraceLength)
    .def("scopeADCsameplesToSkip", &Psana::Epix::Config10KV1::scopeADCsameplesToSkip)
    .def("scopeChanAwaveformSelect", &Psana::Epix::Config10KV1::scopeChanAwaveformSelect)
    .def("scopeChanBwaveformSelect", &Psana::Epix::Config10KV1::scopeChanBwaveformSelect)
    .def("asics", &Psana::Epix::Config10KV1::asics, return_internal_reference<>())
    .def("asicPixelConfigArray", &Psana::Epix::Config10KV1::asicPixelConfigArray)
    .def("numberOfRows", &Psana::Epix::Config10KV1::numberOfRows,"Number of rows in a readout unit")
    .def("numberOfColumns", &Psana::Epix::Config10KV1::numberOfColumns,"Number of columns in a readout unit")
    .def("numberOfAsics", &Psana::Epix::Config10KV1::numberOfAsics,"Number of columns in a readout unit")
    .def("asics_shape", &method_shape<Psana::Epix::Config10KV1, &Psana::Epix::Config10KV1::asics_shape>)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_Epix10kConfig);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epix::Config10KV1> >(Pds::TypeId::Id_Epix10kConfig));

  class_<Psana::Epix::Asic100aConfigV1, boost::shared_ptr<Psana::Epix::Asic100aConfigV1>, boost::noncopyable >("Asic100aConfigV1", no_init)
    .def("pulserVsPixelOnDelay", &Psana::Epix::Asic100aConfigV1::pulserVsPixelOnDelay)
    .def("pulserSync", &Psana::Epix::Asic100aConfigV1::pulserSync)
    .def("dummyTest", &Psana::Epix::Asic100aConfigV1::dummyTest)
    .def("dummyMask", &Psana::Epix::Asic100aConfigV1::dummyMask)
    .def("testPulserLevel", &Psana::Epix::Asic100aConfigV1::testPulserLevel)
    .def("pulserCounterDirection", &Psana::Epix::Asic100aConfigV1::pulserCounterDirection)
    .def("automaticTestModeEnable", &Psana::Epix::Asic100aConfigV1::automaticTestModeEnable)
    .def("testMode", &Psana::Epix::Asic100aConfigV1::testMode)
    .def("testModeWithDarkFrame", &Psana::Epix::Asic100aConfigV1::testModeWithDarkFrame)
    .def("highResolutionModeTest", &Psana::Epix::Asic100aConfigV1::highResolutionModeTest)
    .def("pulserReset", &Psana::Epix::Asic100aConfigV1::pulserReset)
    .def("digitalMonitorMux1", &Psana::Epix::Asic100aConfigV1::digitalMonitorMux1)
    .def("digitalMonitorMux2", &Psana::Epix::Asic100aConfigV1::digitalMonitorMux2)
    .def("testPulserCurrent", &Psana::Epix::Asic100aConfigV1::testPulserCurrent)
    .def("testPointSystemOutputDynamicRange", &Psana::Epix::Asic100aConfigV1::testPointSystemOutputDynamicRange)
    .def("digitalMonitor1Enable", &Psana::Epix::Asic100aConfigV1::digitalMonitor1Enable)
    .def("digitalMonitor2Enable", &Psana::Epix::Asic100aConfigV1::digitalMonitor2Enable)
    .def("LVDS_ImpedenceMatchingEnable", &Psana::Epix::Asic100aConfigV1::LVDS_ImpedenceMatchingEnable)
    .def("VRefBaselineDac", &Psana::Epix::Asic100aConfigV1::VRefBaselineDac)
    .def("extraRowsLowReferenceValue", &Psana::Epix::Asic100aConfigV1::extraRowsLowReferenceValue)
    .def("testPointSystemTemperatureCompensationEnable", &Psana::Epix::Asic100aConfigV1::testPointSystemTemperatureCompensationEnable)
    .def("testPointSytemInputSelect", &Psana::Epix::Asic100aConfigV1::testPointSytemInputSelect)
    .def("programmableReadoutDelay", &Psana::Epix::Asic100aConfigV1::programmableReadoutDelay)
    .def("outputDriverOutputDynamicRange0", &Psana::Epix::Asic100aConfigV1::outputDriverOutputDynamicRange0)
    .def("outputDriverOutputDynamicRange1", &Psana::Epix::Asic100aConfigV1::outputDriverOutputDynamicRange1)
    .def("balconyEnable", &Psana::Epix::Asic100aConfigV1::balconyEnable)
    .def("balconyDriverCurrent", &Psana::Epix::Asic100aConfigV1::balconyDriverCurrent)
    .def("fastPowerPulsingSpeed", &Psana::Epix::Asic100aConfigV1::fastPowerPulsingSpeed)
    .def("fastPowerPulsingEnable", &Psana::Epix::Asic100aConfigV1::fastPowerPulsingEnable)
    .def("preamplifierCurrent", &Psana::Epix::Asic100aConfigV1::preamplifierCurrent)
    .def("pixelOutputBufferCurrent", &Psana::Epix::Asic100aConfigV1::pixelOutputBufferCurrent)
    .def("pixelBufferAndPreamplifierDrivingCapabilities", &Psana::Epix::Asic100aConfigV1::pixelBufferAndPreamplifierDrivingCapabilities)
    .def("outputDriverTemperatureCompensationEnable", &Psana::Epix::Asic100aConfigV1::outputDriverTemperatureCompensationEnable)
    .def("pixelFilterLevel", &Psana::Epix::Asic100aConfigV1::pixelFilterLevel)
    .def("bandGapReferenceTemperatureCompensationBits", &Psana::Epix::Asic100aConfigV1::bandGapReferenceTemperatureCompensationBits)
    .def("outputDriverDrivingCapabilitiesAndStability", &Psana::Epix::Asic100aConfigV1::outputDriverDrivingCapabilitiesAndStability)
    .def("outputDriverDacReferenceBias", &Psana::Epix::Asic100aConfigV1::outputDriverDacReferenceBias)
    .def("testPointSystemTemperatureCompensationGain", &Psana::Epix::Asic100aConfigV1::testPointSystemTemperatureCompensationGain)
    .def("testPointSystemInputCommonMode", &Psana::Epix::Asic100aConfigV1::testPointSystemInputCommonMode)
    .def("outputDriverTemperatureCompensationGain0", &Psana::Epix::Asic100aConfigV1::outputDriverTemperatureCompensationGain0)
    .def("outputDriverInputCommonMode0", &Psana::Epix::Asic100aConfigV1::outputDriverInputCommonMode0)
    .def("testBackEnd", &Psana::Epix::Asic100aConfigV1::testBackEnd)
    .def("interleavedReadOutEnable", &Psana::Epix::Asic100aConfigV1::interleavedReadOutEnable)
    .def("EXEC_DelayEnable", &Psana::Epix::Asic100aConfigV1::EXEC_DelayEnable)
    .def("CCK_RegDelayEnable", &Psana::Epix::Asic100aConfigV1::CCK_RegDelayEnable)
    .def("syncPinEnable", &Psana::Epix::Asic100aConfigV1::syncPinEnable)
    .def("RowStartAddr", &Psana::Epix::Asic100aConfigV1::RowStartAddr)
    .def("RowStopAddr", &Psana::Epix::Asic100aConfigV1::RowStopAddr)
    .def("ColumnStartAddr", &Psana::Epix::Asic100aConfigV1::ColumnStartAddr)
    .def("ColumnStopAddr", &Psana::Epix::Asic100aConfigV1::ColumnStopAddr)
    .def("chipID", &Psana::Epix::Asic100aConfigV1::chipID)
    .def("outputDriverOutputDynamicRange2", &Psana::Epix::Asic100aConfigV1::outputDriverOutputDynamicRange2)
    .def("outputDriverOutputDynamicRange3", &Psana::Epix::Asic100aConfigV1::outputDriverOutputDynamicRange3)
    .def("outputDriverTemperatureCompensationGain1", &Psana::Epix::Asic100aConfigV1::outputDriverTemperatureCompensationGain1)
    .def("outputDriverInputCommonMode1", &Psana::Epix::Asic100aConfigV1::outputDriverInputCommonMode1)
    .def("outputDriverTemperatureCompensationGain2", &Psana::Epix::Asic100aConfigV1::outputDriverTemperatureCompensationGain2)
    .def("outputDriverInputCommonMode2", &Psana::Epix::Asic100aConfigV1::outputDriverInputCommonMode2)
    .def("outputDriverTemperatureCompensationGain3", &Psana::Epix::Asic100aConfigV1::outputDriverTemperatureCompensationGain3)
    .def("outputDriverInputCommonMode3", &Psana::Epix::Asic100aConfigV1::outputDriverInputCommonMode3)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epix::Asic100aConfigV1> >(-1));

  {
  scope outer = 
  class_<Psana::Epix::Config100aV1, boost::shared_ptr<Psana::Epix::Config100aV1>, boost::noncopyable >("Config100aV1", no_init)
    .def("version", &Psana::Epix::Config100aV1::version)
    .def("runTrigDelay", &Psana::Epix::Config100aV1::runTrigDelay)
    .def("daqTrigDelay", &Psana::Epix::Config100aV1::daqTrigDelay)
    .def("dacSetting", &Psana::Epix::Config100aV1::dacSetting)
    .def("asicGR", &Psana::Epix::Config100aV1::asicGR)
    .def("asicAcq", &Psana::Epix::Config100aV1::asicAcq)
    .def("asicR0", &Psana::Epix::Config100aV1::asicR0)
    .def("asicPpmat", &Psana::Epix::Config100aV1::asicPpmat)
    .def("asicPpbe", &Psana::Epix::Config100aV1::asicPpbe)
    .def("asicRoClk", &Psana::Epix::Config100aV1::asicRoClk)
    .def("asicGRControl", &Psana::Epix::Config100aV1::asicGRControl)
    .def("asicAcqControl", &Psana::Epix::Config100aV1::asicAcqControl)
    .def("asicR0Control", &Psana::Epix::Config100aV1::asicR0Control)
    .def("asicPpmatControl", &Psana::Epix::Config100aV1::asicPpmatControl)
    .def("asicPpbeControl", &Psana::Epix::Config100aV1::asicPpbeControl)
    .def("asicR0ClkControl", &Psana::Epix::Config100aV1::asicR0ClkControl)
    .def("prepulseR0En", &Psana::Epix::Config100aV1::prepulseR0En)
    .def("adcStreamMode", &Psana::Epix::Config100aV1::adcStreamMode)
    .def("testPatternEnable", &Psana::Epix::Config100aV1::testPatternEnable)
    .def("SyncMode", &Psana::Epix::Config100aV1::SyncMode)
    .def("R0Mode", &Psana::Epix::Config100aV1::R0Mode)
    .def("acqToAsicR0Delay", &Psana::Epix::Config100aV1::acqToAsicR0Delay)
    .def("asicR0ToAsicAcq", &Psana::Epix::Config100aV1::asicR0ToAsicAcq)
    .def("asicAcqWidth", &Psana::Epix::Config100aV1::asicAcqWidth)
    .def("asicAcqLToPPmatL", &Psana::Epix::Config100aV1::asicAcqLToPPmatL)
    .def("asicPPmatToReadout", &Psana::Epix::Config100aV1::asicPPmatToReadout)
    .def("asicRoClkHalfT", &Psana::Epix::Config100aV1::asicRoClkHalfT)
    .def("adcReadsPerPixel", &Psana::Epix::Config100aV1::adcReadsPerPixel)
    .def("adcClkHalfT", &Psana::Epix::Config100aV1::adcClkHalfT)
    .def("asicR0Width", &Psana::Epix::Config100aV1::asicR0Width)
    .def("adcPipelineDelay", &Psana::Epix::Config100aV1::adcPipelineDelay)
    .def("SyncWidth", &Psana::Epix::Config100aV1::SyncWidth)
    .def("SyncDelay", &Psana::Epix::Config100aV1::SyncDelay)
    .def("prepulseR0Width", &Psana::Epix::Config100aV1::prepulseR0Width)
    .def("prepulseR0Delay", &Psana::Epix::Config100aV1::prepulseR0Delay)
    .def("digitalCardId0", &Psana::Epix::Config100aV1::digitalCardId0)
    .def("digitalCardId1", &Psana::Epix::Config100aV1::digitalCardId1)
    .def("analogCardId0", &Psana::Epix::Config100aV1::analogCardId0)
    .def("analogCardId1", &Psana::Epix::Config100aV1::analogCardId1)
    .def("numberOfAsicsPerRow", &Psana::Epix::Config100aV1::numberOfAsicsPerRow)
    .def("numberOfAsicsPerColumn", &Psana::Epix::Config100aV1::numberOfAsicsPerColumn)
    .def("numberOfRowsPerAsic", &Psana::Epix::Config100aV1::numberOfRowsPerAsic)
    .def("numberOfReadableRowsPerAsic", &Psana::Epix::Config100aV1::numberOfReadableRowsPerAsic)
    .def("numberOfPixelsPerAsicRow", &Psana::Epix::Config100aV1::numberOfPixelsPerAsicRow,"for epix100a  352")
    .def("calibrationRowCountPerASIC", &Psana::Epix::Config100aV1::calibrationRowCountPerASIC,"for epix100a 96*4 = 384")
    .def("environmentalRowCountPerASIC", &Psana::Epix::Config100aV1::environmentalRowCountPerASIC)
    .def("baseClockFrequency", &Psana::Epix::Config100aV1::baseClockFrequency)
    .def("asicMask", &Psana::Epix::Config100aV1::asicMask)
    .def("scopeEnable", &Psana::Epix::Config100aV1::scopeEnable)
    .def("scopeTrigEdge", &Psana::Epix::Config100aV1::scopeTrigEdge)
    .def("scopeTrigChan", &Psana::Epix::Config100aV1::scopeTrigChan)
    .def("scopeArmMode", &Psana::Epix::Config100aV1::scopeArmMode)
    .def("scopeADCThreshold", &Psana::Epix::Config100aV1::scopeADCThreshold)
    .def("scopeTrigHoldoff", &Psana::Epix::Config100aV1::scopeTrigHoldoff)
    .def("scopeTrigOffset", &Psana::Epix::Config100aV1::scopeTrigOffset)
    .def("scopeTraceLength", &Psana::Epix::Config100aV1::scopeTraceLength)
    .def("scopeADCsameplesToSkip", &Psana::Epix::Config100aV1::scopeADCsameplesToSkip)
    .def("scopeChanAwaveformSelect", &Psana::Epix::Config100aV1::scopeChanAwaveformSelect)
    .def("scopeChanBwaveformSelect", &Psana::Epix::Config100aV1::scopeChanBwaveformSelect)
    .def("asics", &Psana::Epix::Config100aV1::asics, return_internal_reference<>())
    .def("asicPixelConfigArray", &Psana::Epix::Config100aV1::asicPixelConfigArray)
    .def("calibPixelConfigArray", &Psana::Epix::Config100aV1::calibPixelConfigArray,"Calibration row config map is one row for every two calib rows")
    .def("numberOfRows", &Psana::Epix::Config100aV1::numberOfRows,"Number of pixel rows in a readout unit")
    .def("numberOfReadableRows", &Psana::Epix::Config100aV1::numberOfReadableRows,"Number of readable pixel rows in a readout unit")
    .def("numberOfColumns", &Psana::Epix::Config100aV1::numberOfColumns,"Number of pixel columns in a readout unit")
    .def("numberOfCalibrationRows", &Psana::Epix::Config100aV1::numberOfCalibrationRows,"Number of calibration rows in a readout unit")
    .def("numberOfEnvironmentalRows", &Psana::Epix::Config100aV1::numberOfEnvironmentalRows,"Number of rows in a readout unit")
    .def("numberOfAsics", &Psana::Epix::Config100aV1::numberOfAsics,"Number of columns in a readout unit")
    .def("asics_shape", &method_shape<Psana::Epix::Config100aV1, &Psana::Epix::Config100aV1::asics_shape>)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_Epix100aConfig);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epix::Config100aV1> >(Pds::TypeId::Id_Epix100aConfig));

  {
  scope outer = 
  class_<Psana::Epix::Config100aV2, boost::shared_ptr<Psana::Epix::Config100aV2>, boost::noncopyable >("Config100aV2", no_init)
    .def("version", &Psana::Epix::Config100aV2::version)
    .def("usePgpEvr", &Psana::Epix::Config100aV2::usePgpEvr)
    .def("evrRunCode", &Psana::Epix::Config100aV2::evrRunCode)
    .def("evrDaqCode", &Psana::Epix::Config100aV2::evrDaqCode)
    .def("evrRunTrigDelay", &Psana::Epix::Config100aV2::evrRunTrigDelay)
    .def("epixRunTrigDelay", &Psana::Epix::Config100aV2::epixRunTrigDelay)
    .def("dacSetting", &Psana::Epix::Config100aV2::dacSetting)
    .def("asicGR", &Psana::Epix::Config100aV2::asicGR)
    .def("asicAcq", &Psana::Epix::Config100aV2::asicAcq)
    .def("asicR0", &Psana::Epix::Config100aV2::asicR0)
    .def("asicPpmat", &Psana::Epix::Config100aV2::asicPpmat)
    .def("asicPpbe", &Psana::Epix::Config100aV2::asicPpbe)
    .def("asicRoClk", &Psana::Epix::Config100aV2::asicRoClk)
    .def("asicGRControl", &Psana::Epix::Config100aV2::asicGRControl)
    .def("asicAcqControl", &Psana::Epix::Config100aV2::asicAcqControl)
    .def("asicR0Control", &Psana::Epix::Config100aV2::asicR0Control)
    .def("asicPpmatControl", &Psana::Epix::Config100aV2::asicPpmatControl)
    .def("asicPpbeControl", &Psana::Epix::Config100aV2::asicPpbeControl)
    .def("asicR0ClkControl", &Psana::Epix::Config100aV2::asicR0ClkControl)
    .def("prepulseR0En", &Psana::Epix::Config100aV2::prepulseR0En)
    .def("adcStreamMode", &Psana::Epix::Config100aV2::adcStreamMode)
    .def("testPatternEnable", &Psana::Epix::Config100aV2::testPatternEnable)
    .def("SyncMode", &Psana::Epix::Config100aV2::SyncMode)
    .def("R0Mode", &Psana::Epix::Config100aV2::R0Mode)
    .def("acqToAsicR0Delay", &Psana::Epix::Config100aV2::acqToAsicR0Delay)
    .def("asicR0ToAsicAcq", &Psana::Epix::Config100aV2::asicR0ToAsicAcq)
    .def("asicAcqWidth", &Psana::Epix::Config100aV2::asicAcqWidth)
    .def("asicAcqLToPPmatL", &Psana::Epix::Config100aV2::asicAcqLToPPmatL)
    .def("asicPPmatToReadout", &Psana::Epix::Config100aV2::asicPPmatToReadout)
    .def("asicRoClkHalfT", &Psana::Epix::Config100aV2::asicRoClkHalfT)
    .def("adcReadsPerPixel", &Psana::Epix::Config100aV2::adcReadsPerPixel)
    .def("adcClkHalfT", &Psana::Epix::Config100aV2::adcClkHalfT)
    .def("asicR0Width", &Psana::Epix::Config100aV2::asicR0Width)
    .def("adcPipelineDelay", &Psana::Epix::Config100aV2::adcPipelineDelay)
    .def("adcPipelineDelay0", &Psana::Epix::Config100aV2::adcPipelineDelay0)
    .def("adcPipelineDelay1", &Psana::Epix::Config100aV2::adcPipelineDelay1)
    .def("adcPipelineDelay2", &Psana::Epix::Config100aV2::adcPipelineDelay2)
    .def("adcPipelineDelay3", &Psana::Epix::Config100aV2::adcPipelineDelay3)
    .def("SyncWidth", &Psana::Epix::Config100aV2::SyncWidth)
    .def("SyncDelay", &Psana::Epix::Config100aV2::SyncDelay)
    .def("prepulseR0Width", &Psana::Epix::Config100aV2::prepulseR0Width)
    .def("prepulseR0Delay", &Psana::Epix::Config100aV2::prepulseR0Delay)
    .def("digitalCardId0", &Psana::Epix::Config100aV2::digitalCardId0)
    .def("digitalCardId1", &Psana::Epix::Config100aV2::digitalCardId1)
    .def("analogCardId0", &Psana::Epix::Config100aV2::analogCardId0)
    .def("analogCardId1", &Psana::Epix::Config100aV2::analogCardId1)
    .def("carrierId0", &Psana::Epix::Config100aV2::carrierId0)
    .def("carrierId1", &Psana::Epix::Config100aV2::carrierId1)
    .def("numberOfAsicsPerRow", &Psana::Epix::Config100aV2::numberOfAsicsPerRow)
    .def("numberOfAsicsPerColumn", &Psana::Epix::Config100aV2::numberOfAsicsPerColumn)
    .def("numberOfRowsPerAsic", &Psana::Epix::Config100aV2::numberOfRowsPerAsic)
    .def("numberOfReadableRowsPerAsic", &Psana::Epix::Config100aV2::numberOfReadableRowsPerAsic)
    .def("numberOfPixelsPerAsicRow", &Psana::Epix::Config100aV2::numberOfPixelsPerAsicRow,"for epix100a  352")
    .def("calibrationRowCountPerASIC", &Psana::Epix::Config100aV2::calibrationRowCountPerASIC,"for epix100a 96*4 = 384")
    .def("environmentalRowCountPerASIC", &Psana::Epix::Config100aV2::environmentalRowCountPerASIC)
    .def("baseClockFrequency", &Psana::Epix::Config100aV2::baseClockFrequency)
    .def("asicMask", &Psana::Epix::Config100aV2::asicMask)
    .def("enableAutomaticRunTrigger", &Psana::Epix::Config100aV2::enableAutomaticRunTrigger)
    .def("numberOf125MhzTicksPerRunTrigger", &Psana::Epix::Config100aV2::numberOf125MhzTicksPerRunTrigger)
    .def("scopeEnable", &Psana::Epix::Config100aV2::scopeEnable)
    .def("scopeTrigEdge", &Psana::Epix::Config100aV2::scopeTrigEdge)
    .def("scopeTrigChan", &Psana::Epix::Config100aV2::scopeTrigChan)
    .def("scopeArmMode", &Psana::Epix::Config100aV2::scopeArmMode)
    .def("scopeADCThreshold", &Psana::Epix::Config100aV2::scopeADCThreshold)
    .def("scopeTrigHoldoff", &Psana::Epix::Config100aV2::scopeTrigHoldoff)
    .def("scopeTrigOffset", &Psana::Epix::Config100aV2::scopeTrigOffset)
    .def("scopeTraceLength", &Psana::Epix::Config100aV2::scopeTraceLength)
    .def("scopeADCsameplesToSkip", &Psana::Epix::Config100aV2::scopeADCsameplesToSkip)
    .def("scopeChanAwaveformSelect", &Psana::Epix::Config100aV2::scopeChanAwaveformSelect)
    .def("scopeChanBwaveformSelect", &Psana::Epix::Config100aV2::scopeChanBwaveformSelect)
    .def("asics", &Psana::Epix::Config100aV2::asics, return_internal_reference<>())
    .def("asicPixelConfigArray", &Psana::Epix::Config100aV2::asicPixelConfigArray)
    .def("calibPixelConfigArray", &Psana::Epix::Config100aV2::calibPixelConfigArray,"Calibration row config map is one row for every two calib rows")
    .def("numberOfRows", &Psana::Epix::Config100aV2::numberOfRows,"Number of pixel rows in a readout unit")
    .def("numberOfReadableRows", &Psana::Epix::Config100aV2::numberOfReadableRows,"Number of readable pixel rows in a readout unit")
    .def("numberOfColumns", &Psana::Epix::Config100aV2::numberOfColumns,"Number of pixel columns in a readout unit")
    .def("numberOfCalibrationRows", &Psana::Epix::Config100aV2::numberOfCalibrationRows,"Number of calibration rows in a readout unit")
    .def("numberOfEnvironmentalRows", &Psana::Epix::Config100aV2::numberOfEnvironmentalRows,"Number of rows in a readout unit")
    .def("numberOfAsics", &Psana::Epix::Config100aV2::numberOfAsics,"Number of columns in a readout unit")
    .def("asics_shape", &method_shape<Psana::Epix::Config100aV2, &Psana::Epix::Config100aV2::asics_shape>)
  ;
  scope().attr("Version")=2;
  scope().attr("TypeId")=int(Pds::TypeId::Id_Epix100aConfig);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epix::Config100aV2> >(Pds::TypeId::Id_Epix100aConfig));

  class_<Psana::Epix::Asic10kaConfigV1, boost::shared_ptr<Psana::Epix::Asic10kaConfigV1>, boost::noncopyable >("Asic10kaConfigV1", no_init)
    .def("CompTH_DAC", &Psana::Epix::Asic10kaConfigV1::CompTH_DAC)
    .def("CompEn_lowBit", &Psana::Epix::Asic10kaConfigV1::CompEn_lowBit)
    .def("PulserSync", &Psana::Epix::Asic10kaConfigV1::PulserSync)
    .def("pixelDummy", &Psana::Epix::Asic10kaConfigV1::pixelDummy)
    .def("Pulser", &Psana::Epix::Asic10kaConfigV1::Pulser)
    .def("Pbit", &Psana::Epix::Asic10kaConfigV1::Pbit)
    .def("atest", &Psana::Epix::Asic10kaConfigV1::atest)
    .def("test", &Psana::Epix::Asic10kaConfigV1::test)
    .def("Sab_test", &Psana::Epix::Asic10kaConfigV1::Sab_test)
    .def("Hrtest", &Psana::Epix::Asic10kaConfigV1::Hrtest)
    .def("PulserR", &Psana::Epix::Asic10kaConfigV1::PulserR)
    .def("DM1", &Psana::Epix::Asic10kaConfigV1::DM1)
    .def("DM2", &Psana::Epix::Asic10kaConfigV1::DM2)
    .def("Pulser_DAC", &Psana::Epix::Asic10kaConfigV1::Pulser_DAC)
    .def("Monost_Pulser", &Psana::Epix::Asic10kaConfigV1::Monost_Pulser)
    .def("CompEn_topTwoBits", &Psana::Epix::Asic10kaConfigV1::CompEn_topTwoBits)
    .def("DM1en", &Psana::Epix::Asic10kaConfigV1::DM1en)
    .def("DM2en", &Psana::Epix::Asic10kaConfigV1::DM2en)
    .def("emph_bd", &Psana::Epix::Asic10kaConfigV1::emph_bd)
    .def("emph_bc", &Psana::Epix::Asic10kaConfigV1::emph_bc)
    .def("VREF_DAC", &Psana::Epix::Asic10kaConfigV1::VREF_DAC)
    .def("VrefLow", &Psana::Epix::Asic10kaConfigV1::VrefLow)
    .def("TPS_tcomp", &Psana::Epix::Asic10kaConfigV1::TPS_tcomp)
    .def("TPS_MUX", &Psana::Epix::Asic10kaConfigV1::TPS_MUX)
    .def("RO_Monost", &Psana::Epix::Asic10kaConfigV1::RO_Monost)
    .def("TPS_GR", &Psana::Epix::Asic10kaConfigV1::TPS_GR)
    .def("S2D0_GR", &Psana::Epix::Asic10kaConfigV1::S2D0_GR)
    .def("PP_OCB_S2D", &Psana::Epix::Asic10kaConfigV1::PP_OCB_S2D)
    .def("OCB", &Psana::Epix::Asic10kaConfigV1::OCB)
    .def("Monost", &Psana::Epix::Asic10kaConfigV1::Monost)
    .def("fastPP_enable", &Psana::Epix::Asic10kaConfigV1::fastPP_enable)
    .def("Preamp", &Psana::Epix::Asic10kaConfigV1::Preamp)
    .def("PixelCB", &Psana::Epix::Asic10kaConfigV1::PixelCB)
    .def("Vld1_b", &Psana::Epix::Asic10kaConfigV1::Vld1_b)
    .def("S2D_tcomp", &Psana::Epix::Asic10kaConfigV1::S2D_tcomp)
    .def("Filter_DAC", &Psana::Epix::Asic10kaConfigV1::Filter_DAC)
    .def("testLVDTransmitter", &Psana::Epix::Asic10kaConfigV1::testLVDTransmitter)
    .def("tc", &Psana::Epix::Asic10kaConfigV1::tc)
    .def("S2D", &Psana::Epix::Asic10kaConfigV1::S2D)
    .def("S2D_DAC_Bias", &Psana::Epix::Asic10kaConfigV1::S2D_DAC_Bias)
    .def("TPS_tcDAC", &Psana::Epix::Asic10kaConfigV1::TPS_tcDAC)
    .def("TPS_DAC", &Psana::Epix::Asic10kaConfigV1::TPS_DAC)
    .def("S2D0_tcDAC", &Psana::Epix::Asic10kaConfigV1::S2D0_tcDAC)
    .def("S2D0_DAC", &Psana::Epix::Asic10kaConfigV1::S2D0_DAC)
    .def("testBE", &Psana::Epix::Asic10kaConfigV1::testBE)
    .def("is_en", &Psana::Epix::Asic10kaConfigV1::is_en)
    .def("DelEXEC", &Psana::Epix::Asic10kaConfigV1::DelEXEC)
    .def("DelCCKreg", &Psana::Epix::Asic10kaConfigV1::DelCCKreg)
    .def("RO_rst_en", &Psana::Epix::Asic10kaConfigV1::RO_rst_en)
    .def("SLVDSbit", &Psana::Epix::Asic10kaConfigV1::SLVDSbit)
    .def("FELmode", &Psana::Epix::Asic10kaConfigV1::FELmode)
    .def("CompEnOn", &Psana::Epix::Asic10kaConfigV1::CompEnOn)
    .def("RowStart", &Psana::Epix::Asic10kaConfigV1::RowStart)
    .def("RowStop", &Psana::Epix::Asic10kaConfigV1::RowStop)
    .def("ColumnStart", &Psana::Epix::Asic10kaConfigV1::ColumnStart)
    .def("ColumnStop", &Psana::Epix::Asic10kaConfigV1::ColumnStop)
    .def("chipID", &Psana::Epix::Asic10kaConfigV1::chipID)
    .def("S2D1_GR", &Psana::Epix::Asic10kaConfigV1::S2D1_GR)
    .def("S2D2_GR", &Psana::Epix::Asic10kaConfigV1::S2D2_GR)
    .def("S2D3_GR", &Psana::Epix::Asic10kaConfigV1::S2D3_GR)
    .def("trbit", &Psana::Epix::Asic10kaConfigV1::trbit)
    .def("S2D1_tcDAC", &Psana::Epix::Asic10kaConfigV1::S2D1_tcDAC)
    .def("S2D1_DAC", &Psana::Epix::Asic10kaConfigV1::S2D1_DAC)
    .def("S2D2_tcDAC", &Psana::Epix::Asic10kaConfigV1::S2D2_tcDAC)
    .def("S2D2_DAC", &Psana::Epix::Asic10kaConfigV1::S2D2_DAC)
    .def("S2D3_tcDAC", &Psana::Epix::Asic10kaConfigV1::S2D3_tcDAC)
    .def("S2D3_DAC", &Psana::Epix::Asic10kaConfigV1::S2D3_DAC)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epix::Asic10kaConfigV1> >(-1));

  {
  scope outer = 
  class_<Psana::Epix::Config10kaV1, boost::shared_ptr<Psana::Epix::Config10kaV1>, boost::noncopyable >("Config10kaV1", no_init)
    .def("version", &Psana::Epix::Config10kaV1::version)
    .def("usePgpEvr", &Psana::Epix::Config10kaV1::usePgpEvr)
    .def("evrRunCode", &Psana::Epix::Config10kaV1::evrRunCode)
    .def("evrDaqCode", &Psana::Epix::Config10kaV1::evrDaqCode)
    .def("evrRunTrigDelay", &Psana::Epix::Config10kaV1::evrRunTrigDelay)
    .def("epixRunTrigDelay", &Psana::Epix::Config10kaV1::epixRunTrigDelay)
    .def("dacSetting", &Psana::Epix::Config10kaV1::dacSetting)
    .def("asicGR", &Psana::Epix::Config10kaV1::asicGR)
    .def("asicAcq", &Psana::Epix::Config10kaV1::asicAcq)
    .def("asicR0", &Psana::Epix::Config10kaV1::asicR0)
    .def("asicPpmat", &Psana::Epix::Config10kaV1::asicPpmat)
    .def("asicPpbe", &Psana::Epix::Config10kaV1::asicPpbe)
    .def("asicRoClk", &Psana::Epix::Config10kaV1::asicRoClk)
    .def("asicGRControl", &Psana::Epix::Config10kaV1::asicGRControl)
    .def("asicAcqControl", &Psana::Epix::Config10kaV1::asicAcqControl)
    .def("asicR0Control", &Psana::Epix::Config10kaV1::asicR0Control)
    .def("asicPpmatControl", &Psana::Epix::Config10kaV1::asicPpmatControl)
    .def("asicPpbeControl", &Psana::Epix::Config10kaV1::asicPpbeControl)
    .def("asicR0ClkControl", &Psana::Epix::Config10kaV1::asicR0ClkControl)
    .def("prepulseR0En", &Psana::Epix::Config10kaV1::prepulseR0En)
    .def("adcStreamMode", &Psana::Epix::Config10kaV1::adcStreamMode)
    .def("testPatternEnable", &Psana::Epix::Config10kaV1::testPatternEnable)
    .def("SyncMode", &Psana::Epix::Config10kaV1::SyncMode)
    .def("R0Mode", &Psana::Epix::Config10kaV1::R0Mode)
    .def("acqToAsicR0Delay", &Psana::Epix::Config10kaV1::acqToAsicR0Delay)
    .def("asicR0ToAsicAcq", &Psana::Epix::Config10kaV1::asicR0ToAsicAcq)
    .def("asicAcqWidth", &Psana::Epix::Config10kaV1::asicAcqWidth)
    .def("asicAcqLToPPmatL", &Psana::Epix::Config10kaV1::asicAcqLToPPmatL)
    .def("asicPPmatToReadout", &Psana::Epix::Config10kaV1::asicPPmatToReadout)
    .def("asicRoClkHalfT", &Psana::Epix::Config10kaV1::asicRoClkHalfT)
    .def("adcReadsPerPixel", &Psana::Epix::Config10kaV1::adcReadsPerPixel)
    .def("adcClkHalfT", &Psana::Epix::Config10kaV1::adcClkHalfT)
    .def("asicR0Width", &Psana::Epix::Config10kaV1::asicR0Width)
    .def("adcPipelineDelay", &Psana::Epix::Config10kaV1::adcPipelineDelay)
    .def("adcPipelineDelay0", &Psana::Epix::Config10kaV1::adcPipelineDelay0)
    .def("adcPipelineDelay1", &Psana::Epix::Config10kaV1::adcPipelineDelay1)
    .def("adcPipelineDelay2", &Psana::Epix::Config10kaV1::adcPipelineDelay2)
    .def("adcPipelineDelay3", &Psana::Epix::Config10kaV1::adcPipelineDelay3)
    .def("SyncWidth", &Psana::Epix::Config10kaV1::SyncWidth)
    .def("SyncDelay", &Psana::Epix::Config10kaV1::SyncDelay)
    .def("prepulseR0Width", &Psana::Epix::Config10kaV1::prepulseR0Width)
    .def("prepulseR0Delay", &Psana::Epix::Config10kaV1::prepulseR0Delay)
    .def("digitalCardId0", &Psana::Epix::Config10kaV1::digitalCardId0)
    .def("digitalCardId1", &Psana::Epix::Config10kaV1::digitalCardId1)
    .def("analogCardId0", &Psana::Epix::Config10kaV1::analogCardId0)
    .def("analogCardId1", &Psana::Epix::Config10kaV1::analogCardId1)
    .def("carrierId0", &Psana::Epix::Config10kaV1::carrierId0)
    .def("carrierId1", &Psana::Epix::Config10kaV1::carrierId1)
    .def("numberOfAsicsPerRow", &Psana::Epix::Config10kaV1::numberOfAsicsPerRow)
    .def("numberOfAsicsPerColumn", &Psana::Epix::Config10kaV1::numberOfAsicsPerColumn)
    .def("numberOfRowsPerAsic", &Psana::Epix::Config10kaV1::numberOfRowsPerAsic)
    .def("numberOfReadableRowsPerAsic", &Psana::Epix::Config10kaV1::numberOfReadableRowsPerAsic)
    .def("numberOfPixelsPerAsicRow", &Psana::Epix::Config10kaV1::numberOfPixelsPerAsicRow,"for epix10ka  176")
    .def("calibrationRowCountPerASIC", &Psana::Epix::Config10kaV1::calibrationRowCountPerASIC,"for epix10ka 96*4 = 384")
    .def("environmentalRowCountPerASIC", &Psana::Epix::Config10kaV1::environmentalRowCountPerASIC)
    .def("baseClockFrequency", &Psana::Epix::Config10kaV1::baseClockFrequency)
    .def("asicMask", &Psana::Epix::Config10kaV1::asicMask)
    .def("enableAutomaticRunTrigger", &Psana::Epix::Config10kaV1::enableAutomaticRunTrigger)
    .def("numberOf125MhzTicksPerRunTrigger", &Psana::Epix::Config10kaV1::numberOf125MhzTicksPerRunTrigger)
    .def("scopeEnable", &Psana::Epix::Config10kaV1::scopeEnable)
    .def("scopeTrigEdge", &Psana::Epix::Config10kaV1::scopeTrigEdge)
    .def("scopeTrigChan", &Psana::Epix::Config10kaV1::scopeTrigChan)
    .def("scopeArmMode", &Psana::Epix::Config10kaV1::scopeArmMode)
    .def("scopeADCThreshold", &Psana::Epix::Config10kaV1::scopeADCThreshold)
    .def("scopeTrigHoldoff", &Psana::Epix::Config10kaV1::scopeTrigHoldoff)
    .def("scopeTrigOffset", &Psana::Epix::Config10kaV1::scopeTrigOffset)
    .def("scopeTraceLength", &Psana::Epix::Config10kaV1::scopeTraceLength)
    .def("scopeADCsameplesToSkip", &Psana::Epix::Config10kaV1::scopeADCsameplesToSkip)
    .def("scopeChanAwaveformSelect", &Psana::Epix::Config10kaV1::scopeChanAwaveformSelect)
    .def("scopeChanBwaveformSelect", &Psana::Epix::Config10kaV1::scopeChanBwaveformSelect)
    .def("asics", &Psana::Epix::Config10kaV1::asics, return_internal_reference<>())
    .def("asicPixelConfigArray", &Psana::Epix::Config10kaV1::asicPixelConfigArray)
    .def("calibPixelConfigArray", &Psana::Epix::Config10kaV1::calibPixelConfigArray,"Calibration row config map is one row for every two calib rows")
    .def("numberOfRows", &Psana::Epix::Config10kaV1::numberOfRows,"Number of pixel rows in a readout unit")
    .def("numberOfReadableRows", &Psana::Epix::Config10kaV1::numberOfReadableRows,"Number of readable pixel rows in a readout unit")
    .def("numberOfColumns", &Psana::Epix::Config10kaV1::numberOfColumns,"Number of pixel columns in a readout unit")
    .def("numberOfCalibrationRows", &Psana::Epix::Config10kaV1::numberOfCalibrationRows,"Number of calibration rows in a readout unit")
    .def("numberOfEnvironmentalRows", &Psana::Epix::Config10kaV1::numberOfEnvironmentalRows,"Number of rows in a readout unit")
    .def("numberOfAsics", &Psana::Epix::Config10kaV1::numberOfAsics,"Number of columns in a readout unit")
    .def("asics_shape", &method_shape<Psana::Epix::Config10kaV1, &Psana::Epix::Config10kaV1::asics_shape>)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_Epix10kaConfig);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epix::Config10kaV1> >(Pds::TypeId::Id_Epix10kaConfig));

  {
  scope outer = 
  class_<Psana::Epix::Config10kaV2, boost::shared_ptr<Psana::Epix::Config10kaV2>, boost::noncopyable >("Config10kaV2", no_init)
    .def("version", &Psana::Epix::Config10kaV2::version)
    .def("usePgpEvr", &Psana::Epix::Config10kaV2::usePgpEvr)
    .def("evrRunCode", &Psana::Epix::Config10kaV2::evrRunCode)
    .def("evrDaqCode", &Psana::Epix::Config10kaV2::evrDaqCode)
    .def("evrRunTrigDelay", &Psana::Epix::Config10kaV2::evrRunTrigDelay)
    .def("epixRunTrigDelay", &Psana::Epix::Config10kaV2::epixRunTrigDelay)
    .def("epixDaqTrigDelay", &Psana::Epix::Config10kaV2::epixDaqTrigDelay)
    .def("dacSetting", &Psana::Epix::Config10kaV2::dacSetting)
    .def("asicGR", &Psana::Epix::Config10kaV2::asicGR)
    .def("asicAcq", &Psana::Epix::Config10kaV2::asicAcq)
    .def("asicR0", &Psana::Epix::Config10kaV2::asicR0)
    .def("asicPpmat", &Psana::Epix::Config10kaV2::asicPpmat)
    .def("asicPpbe", &Psana::Epix::Config10kaV2::asicPpbe)
    .def("asicRoClk", &Psana::Epix::Config10kaV2::asicRoClk)
    .def("asicGRControl", &Psana::Epix::Config10kaV2::asicGRControl)
    .def("asicAcqControl", &Psana::Epix::Config10kaV2::asicAcqControl)
    .def("asicR0Control", &Psana::Epix::Config10kaV2::asicR0Control)
    .def("asicPpmatControl", &Psana::Epix::Config10kaV2::asicPpmatControl)
    .def("asicPpbeControl", &Psana::Epix::Config10kaV2::asicPpbeControl)
    .def("asicR0ClkControl", &Psana::Epix::Config10kaV2::asicR0ClkControl)
    .def("prepulseR0En", &Psana::Epix::Config10kaV2::prepulseR0En)
    .def("adcStreamMode", &Psana::Epix::Config10kaV2::adcStreamMode)
    .def("testPatternEnable", &Psana::Epix::Config10kaV2::testPatternEnable)
    .def("acqToAsicR0Delay", &Psana::Epix::Config10kaV2::acqToAsicR0Delay)
    .def("asicR0ToAsicAcq", &Psana::Epix::Config10kaV2::asicR0ToAsicAcq)
    .def("asicAcqWidth", &Psana::Epix::Config10kaV2::asicAcqWidth)
    .def("asicAcqLToPPmatL", &Psana::Epix::Config10kaV2::asicAcqLToPPmatL)
    .def("asicPPmatToReadout", &Psana::Epix::Config10kaV2::asicPPmatToReadout)
    .def("asicRoClkHalfT", &Psana::Epix::Config10kaV2::asicRoClkHalfT)
    .def("adcClkHalfT", &Psana::Epix::Config10kaV2::adcClkHalfT)
    .def("asicR0Width", &Psana::Epix::Config10kaV2::asicR0Width)
    .def("adcPipelineDelay", &Psana::Epix::Config10kaV2::adcPipelineDelay)
    .def("adcPipelineDelay0", &Psana::Epix::Config10kaV2::adcPipelineDelay0)
    .def("adcPipelineDelay1", &Psana::Epix::Config10kaV2::adcPipelineDelay1)
    .def("adcPipelineDelay2", &Psana::Epix::Config10kaV2::adcPipelineDelay2)
    .def("adcPipelineDelay3", &Psana::Epix::Config10kaV2::adcPipelineDelay3)
    .def("SyncWidth", &Psana::Epix::Config10kaV2::SyncWidth)
    .def("SyncDelay", &Psana::Epix::Config10kaV2::SyncDelay)
    .def("prepulseR0Width", &Psana::Epix::Config10kaV2::prepulseR0Width)
    .def("prepulseR0Delay", &Psana::Epix::Config10kaV2::prepulseR0Delay)
    .def("digitalCardId0", &Psana::Epix::Config10kaV2::digitalCardId0)
    .def("digitalCardId1", &Psana::Epix::Config10kaV2::digitalCardId1)
    .def("analogCardId0", &Psana::Epix::Config10kaV2::analogCardId0)
    .def("analogCardId1", &Psana::Epix::Config10kaV2::analogCardId1)
    .def("carrierId0", &Psana::Epix::Config10kaV2::carrierId0)
    .def("carrierId1", &Psana::Epix::Config10kaV2::carrierId1)
    .def("numberOfAsicsPerRow", &Psana::Epix::Config10kaV2::numberOfAsicsPerRow)
    .def("numberOfAsicsPerColumn", &Psana::Epix::Config10kaV2::numberOfAsicsPerColumn)
    .def("numberOfRowsPerAsic", &Psana::Epix::Config10kaV2::numberOfRowsPerAsic)
    .def("numberOfReadableRowsPerAsic", &Psana::Epix::Config10kaV2::numberOfReadableRowsPerAsic)
    .def("numberOfPixelsPerAsicRow", &Psana::Epix::Config10kaV2::numberOfPixelsPerAsicRow,"for epix10ka  176")
    .def("calibrationRowCountPerASIC", &Psana::Epix::Config10kaV2::calibrationRowCountPerASIC,"for epix10ka 96*4 = 384")
    .def("environmentalRowCountPerASIC", &Psana::Epix::Config10kaV2::environmentalRowCountPerASIC)
    .def("baseClockFrequency", &Psana::Epix::Config10kaV2::baseClockFrequency)
    .def("asicMask", &Psana::Epix::Config10kaV2::asicMask)
    .def("enableAutomaticRunTrigger", &Psana::Epix::Config10kaV2::enableAutomaticRunTrigger)
    .def("numberOf125MhzTicksPerRunTrigger", &Psana::Epix::Config10kaV2::numberOf125MhzTicksPerRunTrigger)
    .def("ghostCorrEn", &Psana::Epix::Config10kaV2::ghostCorrEn)
    .def("oversampleEn", &Psana::Epix::Config10kaV2::oversampleEn)
    .def("oversampleSize", &Psana::Epix::Config10kaV2::oversampleSize)
    .def("scopeEnable", &Psana::Epix::Config10kaV2::scopeEnable)
    .def("scopeTrigEdge", &Psana::Epix::Config10kaV2::scopeTrigEdge)
    .def("scopeTrigChan", &Psana::Epix::Config10kaV2::scopeTrigChan)
    .def("scopeArmMode", &Psana::Epix::Config10kaV2::scopeArmMode)
    .def("scopeADCThreshold", &Psana::Epix::Config10kaV2::scopeADCThreshold)
    .def("scopeTrigHoldoff", &Psana::Epix::Config10kaV2::scopeTrigHoldoff)
    .def("scopeTrigOffset", &Psana::Epix::Config10kaV2::scopeTrigOffset)
    .def("scopeTraceLength", &Psana::Epix::Config10kaV2::scopeTraceLength)
    .def("scopeADCsameplesToSkip", &Psana::Epix::Config10kaV2::scopeADCsameplesToSkip)
    .def("scopeChanAwaveformSelect", &Psana::Epix::Config10kaV2::scopeChanAwaveformSelect)
    .def("scopeChanBwaveformSelect", &Psana::Epix::Config10kaV2::scopeChanBwaveformSelect)
    .def("firmwareHash", &Psana::Epix::Config10kaV2::firmwareHash)
    .def("firmwareDesc", &Psana::Epix::Config10kaV2::firmwareDesc)
    .def("asics", &Psana::Epix::Config10kaV2::asics, return_internal_reference<>())
    .def("asicPixelConfigArray", &Psana::Epix::Config10kaV2::asicPixelConfigArray)
    .def("calibPixelConfigArray", &Psana::Epix::Config10kaV2::calibPixelConfigArray,"Calibration row config map is one row for every two calib rows")
    .def("numberOfRows", &Psana::Epix::Config10kaV2::numberOfRows,"Number of pixel rows in a readout unit")
    .def("numberOfReadableRows", &Psana::Epix::Config10kaV2::numberOfReadableRows,"Number of readable pixel rows in a readout unit")
    .def("numberOfColumns", &Psana::Epix::Config10kaV2::numberOfColumns,"Number of pixel columns in a readout unit")
    .def("numberOfCalibrationRows", &Psana::Epix::Config10kaV2::numberOfCalibrationRows,"Number of calibration rows in a readout unit")
    .def("numberOfEnvironmentalRows", &Psana::Epix::Config10kaV2::numberOfEnvironmentalRows,"Number of rows in a readout unit")
    .def("numberOfAsics", &Psana::Epix::Config10kaV2::numberOfAsics,"Number of columns in a readout unit")
    .def("firmwareHash_shape", &method_shape<Psana::Epix::Config10kaV2, &Psana::Epix::Config10kaV2::firmwareHash_shape>)
    .def("firmwareDesc_shape", &method_shape<Psana::Epix::Config10kaV2, &Psana::Epix::Config10kaV2::firmwareDesc_shape>)
    .def("asics_shape", &method_shape<Psana::Epix::Config10kaV2, &Psana::Epix::Config10kaV2::asics_shape>)
  ;
  scope().attr("Version")=2;
  scope().attr("TypeId")=int(Pds::TypeId::Id_Epix10kaConfig);
  scope().attr("FirmwareHashMax")=64;
  scope().attr("FirmwareDescMax")=256;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epix::Config10kaV2> >(Pds::TypeId::Id_Epix10kaConfig));

  {
  scope outer = 
  class_<Psana::Epix::Elem10kaConfigV1, boost::shared_ptr<Psana::Epix::Elem10kaConfigV1>, boost::noncopyable >("Elem10kaConfigV1", no_init)
    .def("numberOfAsicsPerRow", &Psana::Epix::Elem10kaConfigV1::numberOfAsicsPerRow,"Mimic previous Epix Config interfaces")
    .def("numberOfAsicsPerColumn", &Psana::Epix::Elem10kaConfigV1::numberOfAsicsPerColumn)
    .def("numberOfRowsPerAsic", &Psana::Epix::Elem10kaConfigV1::numberOfRowsPerAsic)
    .def("numberOfReadableRowsPerAsic", &Psana::Epix::Elem10kaConfigV1::numberOfReadableRowsPerAsic)
    .def("numberOfPixelsPerAsicRow", &Psana::Epix::Elem10kaConfigV1::numberOfPixelsPerAsicRow)
    .def("calibrationRowCountPerASIC", &Psana::Epix::Elem10kaConfigV1::calibrationRowCountPerASIC)
    .def("environmentalRowCountPerASIC", &Psana::Epix::Elem10kaConfigV1::environmentalRowCountPerASIC)
    .def("carrierId0", &Psana::Epix::Elem10kaConfigV1::carrierId0,"read-only")
    .def("carrierId1", &Psana::Epix::Elem10kaConfigV1::carrierId1,"read-only")
    .def("asicMask", &Psana::Epix::Elem10kaConfigV1::asicMask)
    .def("asics", &Psana::Epix::Elem10kaConfigV1::asics, return_internal_reference<>())
    .def("asicPixelConfigArray", &Psana::Epix::Elem10kaConfigV1::asicPixelConfigArray)
    .def("calibPixelConfigArray", &Psana::Epix::Elem10kaConfigV1::calibPixelConfigArray)
    .def("numberOfRows", &Psana::Epix::Elem10kaConfigV1::numberOfRows,"Interface\nNumber of pixel rows in a readout unit")
    .def("numberOfReadableRows", &Psana::Epix::Elem10kaConfigV1::numberOfReadableRows,"Number of readable pixel rows in a readout unit")
    .def("numberOfColumns", &Psana::Epix::Elem10kaConfigV1::numberOfColumns,"Number of pixel columns in a readout unit")
    .def("numberOfCalibrationRows", &Psana::Epix::Elem10kaConfigV1::numberOfCalibrationRows,"Number of calibration rows in a readout unit")
    .def("numberOfEnvironmentalRows", &Psana::Epix::Elem10kaConfigV1::numberOfEnvironmentalRows,"Number of rows in a readout unit")
    .def("numberOfAsics", &Psana::Epix::Elem10kaConfigV1::numberOfAsics,"Number of columns in a readout unit")
    .def("asics_shape", &method_shape<Psana::Epix::Elem10kaConfigV1, &Psana::Epix::Elem10kaConfigV1::asics_shape>)
  ;
  scope().attr("_numberOfAsicsPerRow")=2;
  scope().attr("_numberOfAsicsPerColumn")=2;
  scope().attr("_numberOfRowsPerAsic")=176;
  scope().attr("_numberOfReadableRowsPerAsic")=176;
  scope().attr("_numberOfPixelsPerAsicRow")=192;
  scope().attr("_calibrationRowCountPerASIC")=2;
  scope().attr("_environmentalRowCountPerASIC")=1;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epix::Elem10kaConfigV1> >(-1));

  class_<Psana::Epix::PgpEvrConfig, boost::shared_ptr<Psana::Epix::PgpEvrConfig>, boost::noncopyable >("PgpEvrConfig", no_init)
    .def("enable", &Psana::Epix::PgpEvrConfig::enable)
    .def("runCode", &Psana::Epix::PgpEvrConfig::runCode)
    .def("daqCode", &Psana::Epix::PgpEvrConfig::daqCode)
    .def("runDelay", &Psana::Epix::PgpEvrConfig::runDelay)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epix::PgpEvrConfig> >(-1));

  class_<Psana::Epix::Ad9249Config, boost::shared_ptr<Psana::Epix::Ad9249Config>, boost::noncopyable >("Ad9249Config", no_init)
    .def("chipId", &Psana::Epix::Ad9249Config::chipId,"read-only")
    .def("devIndexMask", &Psana::Epix::Ad9249Config::devIndexMask)
    .def("devIndexMaskDcoFco", &Psana::Epix::Ad9249Config::devIndexMaskDcoFco)
    .def("extPwdnMode", &Psana::Epix::Ad9249Config::extPwdnMode)
    .def("intPwdnMode", &Psana::Epix::Ad9249Config::intPwdnMode)
    .def("chopMode", &Psana::Epix::Ad9249Config::chopMode)
    .def("dutyCycleStab", &Psana::Epix::Ad9249Config::dutyCycleStab)
    .def("outputInvert", &Psana::Epix::Ad9249Config::outputInvert)
    .def("outputFormat", &Psana::Epix::Ad9249Config::outputFormat)
    .def("clockDivide", &Psana::Epix::Ad9249Config::clockDivide)
    .def("userTestMode", &Psana::Epix::Ad9249Config::userTestMode)
    .def("outputTestMode", &Psana::Epix::Ad9249Config::outputTestMode)
    .def("offsetAdjust", &Psana::Epix::Ad9249Config::offsetAdjust)
    .def("channelDelay", &Psana::Epix::Ad9249Config::channelDelay)
    .def("frameDelay", &Psana::Epix::Ad9249Config::frameDelay)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epix::Ad9249Config> >(-1));

  class_<Psana::Epix::Quad10kaConfigV1, boost::shared_ptr<Psana::Epix::Quad10kaConfigV1>, boost::noncopyable >("Quad10kaConfigV1", no_init)
    .def("baseClockFrequency", &Psana::Epix::Quad10kaConfigV1::baseClockFrequency,"Global")
    .def("enableAutomaticRunTrigger", &Psana::Epix::Quad10kaConfigV1::enableAutomaticRunTrigger)
    .def("numberOf125MhzTicksPerRunTrigger", &Psana::Epix::Quad10kaConfigV1::numberOf125MhzTicksPerRunTrigger)
    .def("digitalCardId0", &Psana::Epix::Quad10kaConfigV1::digitalCardId0,"AxiVersion (RO)")
    .def("digitalCardId1", &Psana::Epix::Quad10kaConfigV1::digitalCardId1)
    .def("dcdcEn", &Psana::Epix::Quad10kaConfigV1::dcdcEn,"SystemRegs")
    .def("asicAnaEn", &Psana::Epix::Quad10kaConfigV1::asicAnaEn)
    .def("asicDigEn", &Psana::Epix::Quad10kaConfigV1::asicDigEn)
    .def("ddrVttEn", &Psana::Epix::Quad10kaConfigV1::ddrVttEn)
    .def("trigSrcSel", &Psana::Epix::Quad10kaConfigV1::trigSrcSel)
    .def("vguardDac", &Psana::Epix::Quad10kaConfigV1::vguardDac)
    .def("acqToAsicR0Delay", &Psana::Epix::Quad10kaConfigV1::acqToAsicR0Delay,"AcqCore")
    .def("asicR0Width", &Psana::Epix::Quad10kaConfigV1::asicR0Width)
    .def("asicR0ToAsicAcq", &Psana::Epix::Quad10kaConfigV1::asicR0ToAsicAcq)
    .def("asicAcqWidth", &Psana::Epix::Quad10kaConfigV1::asicAcqWidth)
    .def("asicAcqLToPPmatL", &Psana::Epix::Quad10kaConfigV1::asicAcqLToPPmatL)
    .def("asicPPmatToReadout", &Psana::Epix::Quad10kaConfigV1::asicPPmatToReadout)
    .def("asicRoClkHalfT", &Psana::Epix::Quad10kaConfigV1::asicRoClkHalfT)
    .def("asicAcqForce", &Psana::Epix::Quad10kaConfigV1::asicAcqForce)
    .def("asicR0Force", &Psana::Epix::Quad10kaConfigV1::asicR0Force)
    .def("asicPPmatForce", &Psana::Epix::Quad10kaConfigV1::asicPPmatForce)
    .def("asicSyncForce", &Psana::Epix::Quad10kaConfigV1::asicSyncForce)
    .def("asicRoClkForce", &Psana::Epix::Quad10kaConfigV1::asicRoClkForce)
    .def("asicAcqValue", &Psana::Epix::Quad10kaConfigV1::asicAcqValue)
    .def("asicR0Value", &Psana::Epix::Quad10kaConfigV1::asicR0Value)
    .def("asicPPmatValue", &Psana::Epix::Quad10kaConfigV1::asicPPmatValue)
    .def("asicSyncValue", &Psana::Epix::Quad10kaConfigV1::asicSyncValue)
    .def("asicRoClkValue", &Psana::Epix::Quad10kaConfigV1::asicRoClkValue)
    .def("adcPipelineDelay", &Psana::Epix::Quad10kaConfigV1::adcPipelineDelay,"RdoutCore")
    .def("testData", &Psana::Epix::Quad10kaConfigV1::testData)
    .def("scopeEnable", &Psana::Epix::Quad10kaConfigV1::scopeEnable)
    .def("scopeTrigEdge", &Psana::Epix::Quad10kaConfigV1::scopeTrigEdge)
    .def("scopeTrigChan", &Psana::Epix::Quad10kaConfigV1::scopeTrigChan)
    .def("scopeTrigMode", &Psana::Epix::Quad10kaConfigV1::scopeTrigMode)
    .def("scopeADCThreshold", &Psana::Epix::Quad10kaConfigV1::scopeADCThreshold)
    .def("scopeTrigHoldoff", &Psana::Epix::Quad10kaConfigV1::scopeTrigHoldoff)
    .def("scopeTrigOffset", &Psana::Epix::Quad10kaConfigV1::scopeTrigOffset)
    .def("scopeTraceLength", &Psana::Epix::Quad10kaConfigV1::scopeTraceLength)
    .def("scopeADCsamplesToSkip", &Psana::Epix::Quad10kaConfigV1::scopeADCsamplesToSkip)
    .def("scopeChanAwaveformSelect", &Psana::Epix::Quad10kaConfigV1::scopeChanAwaveformSelect)
    .def("scopeChanBwaveformSelect", &Psana::Epix::Quad10kaConfigV1::scopeChanBwaveformSelect)
    .def("scopeTrigDelay", &Psana::Epix::Quad10kaConfigV1::scopeTrigDelay)
    .def("adc", &Psana::Epix::Quad10kaConfigV1::adc, return_internal_reference<>(),"Ad9249ReadoutGroup [10]\nAd9249ConfigGroup [10]")
    .def("testChannel", &Psana::Epix::Quad10kaConfigV1::testChannel,"AdcTester")
    .def("testDataMask", &Psana::Epix::Quad10kaConfigV1::testDataMask)
    .def("testPattern", &Psana::Epix::Quad10kaConfigV1::testPattern)
    .def("testSamples", &Psana::Epix::Quad10kaConfigV1::testSamples)
    .def("testTimeout", &Psana::Epix::Quad10kaConfigV1::testTimeout)
    .def("testRequest", &Psana::Epix::Quad10kaConfigV1::testRequest)
    .def("adc_shape", &method_shape<Psana::Epix::Quad10kaConfigV1, &Psana::Epix::Quad10kaConfigV1::adc_shape>)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epix::Quad10kaConfigV1> >(-1));

  {
  scope outer = 
  class_<Psana::Epix::Quad10kaConfigV2, boost::shared_ptr<Psana::Epix::Quad10kaConfigV2>, boost::noncopyable >("Quad10kaConfigV2", no_init)
    .def("baseClockFrequency", &Psana::Epix::Quad10kaConfigV2::baseClockFrequency,"Global")
    .def("enableAutomaticRunTrigger", &Psana::Epix::Quad10kaConfigV2::enableAutomaticRunTrigger)
    .def("numberOf125MhzTicksPerRunTrigger", &Psana::Epix::Quad10kaConfigV2::numberOf125MhzTicksPerRunTrigger)
    .def("firmwareVersion", &Psana::Epix::Quad10kaConfigV2::firmwareVersion,"AxiVersion (RO)")
    .def("digitalCardId0", &Psana::Epix::Quad10kaConfigV2::digitalCardId0)
    .def("digitalCardId1", &Psana::Epix::Quad10kaConfigV2::digitalCardId1)
    .def("firmwareHash", &Psana::Epix::Quad10kaConfigV2::firmwareHash)
    .def("firmwareDesc", &Psana::Epix::Quad10kaConfigV2::firmwareDesc)
    .def("dcdcEn", &Psana::Epix::Quad10kaConfigV2::dcdcEn,"SystemRegs")
    .def("asicAnaEn", &Psana::Epix::Quad10kaConfigV2::asicAnaEn)
    .def("asicDigEn", &Psana::Epix::Quad10kaConfigV2::asicDigEn)
    .def("ddrVttEn", &Psana::Epix::Quad10kaConfigV2::ddrVttEn)
    .def("trigSrcSel", &Psana::Epix::Quad10kaConfigV2::trigSrcSel)
    .def("vguardDac", &Psana::Epix::Quad10kaConfigV2::vguardDac)
    .def("acqToAsicR0Delay", &Psana::Epix::Quad10kaConfigV2::acqToAsicR0Delay,"AcqCore")
    .def("asicR0Width", &Psana::Epix::Quad10kaConfigV2::asicR0Width)
    .def("asicR0ToAsicAcq", &Psana::Epix::Quad10kaConfigV2::asicR0ToAsicAcq)
    .def("asicAcqWidth", &Psana::Epix::Quad10kaConfigV2::asicAcqWidth)
    .def("asicAcqLToPPmatL", &Psana::Epix::Quad10kaConfigV2::asicAcqLToPPmatL)
    .def("asicPPmatToReadout", &Psana::Epix::Quad10kaConfigV2::asicPPmatToReadout)
    .def("asicRoClkHalfT", &Psana::Epix::Quad10kaConfigV2::asicRoClkHalfT)
    .def("asicAcqForce", &Psana::Epix::Quad10kaConfigV2::asicAcqForce)
    .def("asicR0Force", &Psana::Epix::Quad10kaConfigV2::asicR0Force)
    .def("asicPPmatForce", &Psana::Epix::Quad10kaConfigV2::asicPPmatForce)
    .def("asicSyncForce", &Psana::Epix::Quad10kaConfigV2::asicSyncForce)
    .def("asicRoClkForce", &Psana::Epix::Quad10kaConfigV2::asicRoClkForce)
    .def("asicAcqValue", &Psana::Epix::Quad10kaConfigV2::asicAcqValue)
    .def("asicR0Value", &Psana::Epix::Quad10kaConfigV2::asicR0Value)
    .def("asicPPmatValue", &Psana::Epix::Quad10kaConfigV2::asicPPmatValue)
    .def("asicSyncValue", &Psana::Epix::Quad10kaConfigV2::asicSyncValue)
    .def("asicRoClkValue", &Psana::Epix::Quad10kaConfigV2::asicRoClkValue)
    .def("dummyAcqEn", &Psana::Epix::Quad10kaConfigV2::dummyAcqEn)
    .def("asicSyncInjEn", &Psana::Epix::Quad10kaConfigV2::asicSyncInjEn)
    .def("asicSyncInjDly", &Psana::Epix::Quad10kaConfigV2::asicSyncInjDly)
    .def("adcPipelineDelay", &Psana::Epix::Quad10kaConfigV2::adcPipelineDelay,"RdoutCore")
    .def("testData", &Psana::Epix::Quad10kaConfigV2::testData)
    .def("overSampleEn", &Psana::Epix::Quad10kaConfigV2::overSampleEn)
    .def("overSampleSize", &Psana::Epix::Quad10kaConfigV2::overSampleSize)
    .def("scopeEnable", &Psana::Epix::Quad10kaConfigV2::scopeEnable)
    .def("scopeTrigEdge", &Psana::Epix::Quad10kaConfigV2::scopeTrigEdge)
    .def("scopeTrigChan", &Psana::Epix::Quad10kaConfigV2::scopeTrigChan)
    .def("scopeTrigMode", &Psana::Epix::Quad10kaConfigV2::scopeTrigMode)
    .def("scopeADCThreshold", &Psana::Epix::Quad10kaConfigV2::scopeADCThreshold)
    .def("scopeTrigHoldoff", &Psana::Epix::Quad10kaConfigV2::scopeTrigHoldoff)
    .def("scopeTrigOffset", &Psana::Epix::Quad10kaConfigV2::scopeTrigOffset)
    .def("scopeTraceLength", &Psana::Epix::Quad10kaConfigV2::scopeTraceLength)
    .def("scopeADCsamplesToSkip", &Psana::Epix::Quad10kaConfigV2::scopeADCsamplesToSkip)
    .def("scopeChanAwaveformSelect", &Psana::Epix::Quad10kaConfigV2::scopeChanAwaveformSelect)
    .def("scopeChanBwaveformSelect", &Psana::Epix::Quad10kaConfigV2::scopeChanBwaveformSelect)
    .def("scopeTrigDelay", &Psana::Epix::Quad10kaConfigV2::scopeTrigDelay)
    .def("adc", &Psana::Epix::Quad10kaConfigV2::adc, return_internal_reference<>(),"Ad9249ReadoutGroup [10]\nAd9249ConfigGroup [10]")
    .def("testChannel", &Psana::Epix::Quad10kaConfigV2::testChannel,"AdcTester")
    .def("testDataMask", &Psana::Epix::Quad10kaConfigV2::testDataMask)
    .def("testPattern", &Psana::Epix::Quad10kaConfigV2::testPattern)
    .def("testSamples", &Psana::Epix::Quad10kaConfigV2::testSamples)
    .def("testTimeout", &Psana::Epix::Quad10kaConfigV2::testTimeout)
    .def("testRequest", &Psana::Epix::Quad10kaConfigV2::testRequest)
    .def("firmwareHash_shape", &method_shape<Psana::Epix::Quad10kaConfigV2, &Psana::Epix::Quad10kaConfigV2::firmwareHash_shape>)
    .def("firmwareDesc_shape", &method_shape<Psana::Epix::Quad10kaConfigV2, &Psana::Epix::Quad10kaConfigV2::firmwareDesc_shape>)
    .def("adc_shape", &method_shape<Psana::Epix::Quad10kaConfigV2, &Psana::Epix::Quad10kaConfigV2::adc_shape>)
  ;
  scope().attr("FirmwareHashMax")=64;
  scope().attr("FirmwareDescMax")=256;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epix::Quad10kaConfigV2> >(-1));

  {
  scope outer = 
  class_<Psana::Epix::Config10kaQuadV1, boost::shared_ptr<Psana::Epix::Config10kaQuadV1>, boost::noncopyable >("Config10kaQuadV1", no_init)
    .def("numberOfElements", &Psana::Epix::Config10kaQuadV1::numberOfElements)
    .def("numberOfRows", &Psana::Epix::Config10kaQuadV1::numberOfRows)
    .def("numberOfReadableRows", &Psana::Epix::Config10kaQuadV1::numberOfReadableRows)
    .def("numberOfColumns", &Psana::Epix::Config10kaQuadV1::numberOfColumns)
    .def("numberOfCalibrationRows", &Psana::Epix::Config10kaQuadV1::numberOfCalibrationRows)
    .def("numberOfEnvironmentalRows", &Psana::Epix::Config10kaQuadV1::numberOfEnvironmentalRows)
    .def("numberOfAsics", &Psana::Epix::Config10kaQuadV1::numberOfAsics)
    .def("evr", &Psana::Epix::Config10kaQuadV1::evr, return_internal_reference<1>())
    .def("quad", &Psana::Epix::Config10kaQuadV1::quad, return_internal_reference<1>())
    .def("elemCfg", &Psana::Epix::Config10kaQuadV1::elemCfg, return_internal_reference<>())
    .def("elemCfg_shape", &method_shape<Psana::Epix::Config10kaQuadV1, &Psana::Epix::Config10kaQuadV1::elemCfg_shape>)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_Epix10kaQuadConfig);
  scope().attr("_numberOfElements")=4;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epix::Config10kaQuadV1> >(Pds::TypeId::Id_Epix10kaQuadConfig));

  {
  scope outer = 
  class_<Psana::Epix::Config10kaQuadV2, boost::shared_ptr<Psana::Epix::Config10kaQuadV2>, boost::noncopyable >("Config10kaQuadV2", no_init)
    .def("numberOfElements", &Psana::Epix::Config10kaQuadV2::numberOfElements)
    .def("numberOfRows", &Psana::Epix::Config10kaQuadV2::numberOfRows)
    .def("numberOfReadableRows", &Psana::Epix::Config10kaQuadV2::numberOfReadableRows)
    .def("numberOfColumns", &Psana::Epix::Config10kaQuadV2::numberOfColumns)
    .def("numberOfCalibrationRows", &Psana::Epix::Config10kaQuadV2::numberOfCalibrationRows)
    .def("numberOfEnvironmentalRows", &Psana::Epix::Config10kaQuadV2::numberOfEnvironmentalRows)
    .def("numberOfAsics", &Psana::Epix::Config10kaQuadV2::numberOfAsics)
    .def("evr", &Psana::Epix::Config10kaQuadV2::evr, return_internal_reference<1>())
    .def("quad", &Psana::Epix::Config10kaQuadV2::quad, return_internal_reference<1>())
    .def("elemCfg", &Psana::Epix::Config10kaQuadV2::elemCfg, return_internal_reference<>())
    .def("elemCfg_shape", &method_shape<Psana::Epix::Config10kaQuadV2, &Psana::Epix::Config10kaQuadV2::elemCfg_shape>)
  ;
  scope().attr("Version")=2;
  scope().attr("TypeId")=int(Pds::TypeId::Id_Epix10kaQuadConfig);
  scope().attr("_numberOfElements")=4;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epix::Config10kaQuadV2> >(Pds::TypeId::Id_Epix10kaQuadConfig));

  {
  scope outer = 
  class_<Psana::Epix::Config10ka2MV1, boost::shared_ptr<Psana::Epix::Config10ka2MV1>, boost::noncopyable >("Config10ka2MV1", no_init)
    .def("numberOfElements", &Psana::Epix::Config10ka2MV1::numberOfElements)
    .def("numberOfRows", &Psana::Epix::Config10ka2MV1::numberOfRows)
    .def("numberOfReadableRows", &Psana::Epix::Config10ka2MV1::numberOfReadableRows)
    .def("numberOfColumns", &Psana::Epix::Config10ka2MV1::numberOfColumns)
    .def("numberOfCalibrationRows", &Psana::Epix::Config10ka2MV1::numberOfCalibrationRows)
    .def("numberOfEnvironmentalRows", &Psana::Epix::Config10ka2MV1::numberOfEnvironmentalRows)
    .def("numberOfAsics", &Psana::Epix::Config10ka2MV1::numberOfAsics)
    .def("evr", &Psana::Epix::Config10ka2MV1::evr, return_internal_reference<1>())
    .def("quad", &Psana::Epix::Config10ka2MV1::quad, return_internal_reference<>())
    .def("elemCfg", &Psana::Epix::Config10ka2MV1::elemCfg, return_internal_reference<>())
    .def("quad_shape", &method_shape<Psana::Epix::Config10ka2MV1, &Psana::Epix::Config10ka2MV1::quad_shape>)
    .def("elemCfg_shape", &method_shape<Psana::Epix::Config10ka2MV1, &Psana::Epix::Config10ka2MV1::elemCfg_shape>)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_Epix10ka2MConfig);
  scope().attr("_numberOfElements")=16;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epix::Config10ka2MV1> >(Pds::TypeId::Id_Epix10ka2MConfig));

  {
  scope outer = 
  class_<Psana::Epix::Config10ka2MV2, boost::shared_ptr<Psana::Epix::Config10ka2MV2>, boost::noncopyable >("Config10ka2MV2", no_init)
    .def("numberOfElements", &Psana::Epix::Config10ka2MV2::numberOfElements)
    .def("numberOfRows", &Psana::Epix::Config10ka2MV2::numberOfRows)
    .def("numberOfReadableRows", &Psana::Epix::Config10ka2MV2::numberOfReadableRows)
    .def("numberOfColumns", &Psana::Epix::Config10ka2MV2::numberOfColumns)
    .def("numberOfCalibrationRows", &Psana::Epix::Config10ka2MV2::numberOfCalibrationRows)
    .def("numberOfEnvironmentalRows", &Psana::Epix::Config10ka2MV2::numberOfEnvironmentalRows)
    .def("numberOfAsics", &Psana::Epix::Config10ka2MV2::numberOfAsics)
    .def("evr", &Psana::Epix::Config10ka2MV2::evr, return_internal_reference<1>())
    .def("quad", &Psana::Epix::Config10ka2MV2::quad, return_internal_reference<>())
    .def("elemCfg", &Psana::Epix::Config10ka2MV2::elemCfg, return_internal_reference<>())
    .def("quad_shape", &method_shape<Psana::Epix::Config10ka2MV2, &Psana::Epix::Config10ka2MV2::quad_shape>)
    .def("elemCfg_shape", &method_shape<Psana::Epix::Config10ka2MV2, &Psana::Epix::Config10ka2MV2::elemCfg_shape>)
  ;
  scope().attr("Version")=2;
  scope().attr("TypeId")=int(Pds::TypeId::Id_Epix10ka2MConfig);
  scope().attr("_numberOfElements")=16;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epix::Config10ka2MV2> >(Pds::TypeId::Id_Epix10ka2MConfig));

  {
  scope outer = 
  class_<Psana::Epix::ElementV1, boost::shared_ptr<Psana::Epix::ElementV1>, boost::noncopyable >("ElementV1", no_init)
    .def("vc", &Psana::Epix::ElementV1::vc)
    .def("lane", &Psana::Epix::ElementV1::lane)
    .def("acqCount", &Psana::Epix::ElementV1::acqCount)
    .def("frameNumber", &Psana::Epix::ElementV1::frameNumber)
    .def("ticks", &Psana::Epix::ElementV1::ticks)
    .def("fiducials", &Psana::Epix::ElementV1::fiducials)
    .def("frame", &Psana::Epix::ElementV1::frame)
    .def("excludedRows", &Psana::Epix::ElementV1::excludedRows)
    .def("temperatures", &Psana::Epix::ElementV1::temperatures)
    .def("lastWord", &Psana::Epix::ElementV1::lastWord)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_EpixElement);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epix::ElementV1> >(Pds::TypeId::Id_EpixElement));

  {
  scope outer = 
  class_<Psana::Epix::ElementV2, boost::shared_ptr<Psana::Epix::ElementV2>, boost::noncopyable >("ElementV2", no_init)
    .def("vc", &Psana::Epix::ElementV2::vc)
    .def("lane", &Psana::Epix::ElementV2::lane)
    .def("acqCount", &Psana::Epix::ElementV2::acqCount)
    .def("frameNumber", &Psana::Epix::ElementV2::frameNumber)
    .def("ticks", &Psana::Epix::ElementV2::ticks)
    .def("fiducials", &Psana::Epix::ElementV2::fiducials)
    .def("frame", &Psana::Epix::ElementV2::frame)
    .def("calibrationRows", &Psana::Epix::ElementV2::calibrationRows)
    .def("environmentalRows", &Psana::Epix::ElementV2::environmentalRows)
    .def("temperatures", &Psana::Epix::ElementV2::temperatures)
    .def("lastWord", &Psana::Epix::ElementV2::lastWord)
  ;
  scope().attr("Version")=2;
  scope().attr("TypeId")=int(Pds::TypeId::Id_EpixElement);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epix::ElementV2> >(Pds::TypeId::Id_EpixElement));

  {
  scope outer = 
  class_<Psana::Epix::ElementV3, boost::shared_ptr<Psana::Epix::ElementV3>, boost::noncopyable >("ElementV3", no_init)
    .def("vc", &Psana::Epix::ElementV3::vc)
    .def("lane", &Psana::Epix::ElementV3::lane)
    .def("acqCount", &Psana::Epix::ElementV3::acqCount)
    .def("frameNumber", &Psana::Epix::ElementV3::frameNumber)
    .def("ticks", &Psana::Epix::ElementV3::ticks)
    .def("fiducials", &Psana::Epix::ElementV3::fiducials)
    .def("frame", &Psana::Epix::ElementV3::frame)
    .def("calibrationRows", &Psana::Epix::ElementV3::calibrationRows)
    .def("environmentalRows", &Psana::Epix::ElementV3::environmentalRows)
    .def("temperatures", &Psana::Epix::ElementV3::temperatures)
    .def("lastWord", &Psana::Epix::ElementV3::lastWord)
  ;
  scope().attr("Version")=3;
  scope().attr("TypeId")=int(Pds::TypeId::Id_EpixElement);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epix::ElementV3> >(Pds::TypeId::Id_EpixElement));

  {
  scope outer = 
  class_<Psana::Epix::ArrayV1, boost::shared_ptr<Psana::Epix::ArrayV1>, boost::noncopyable >("ArrayV1", no_init)
    .def("frameNumber", &Psana::Epix::ArrayV1::frameNumber)
    .def("frame", &Psana::Epix::ArrayV1::frame)
    .def("calibrationRows", &Psana::Epix::ArrayV1::calibrationRows)
    .def("environmentalRows", &Psana::Epix::ArrayV1::environmentalRows)
    .def("temperatures", &Psana::Epix::ArrayV1::temperatures)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_Epix10kaArray);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epix::ArrayV1> >(Pds::TypeId::Id_Epix10kaArray));

  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "Config10KV1"));
    PyObject_SetAttrString(submodule, "Config10K", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(2);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "Config10kaQuadV1"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "Config10kaQuadV2"));
    PyObject_SetAttrString(submodule, "Config10kaQuad", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(2);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "Config10kaV1"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "Config10kaV2"));
    PyObject_SetAttrString(submodule, "Config10ka", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(2);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "Config100aV1"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "Config100aV2"));
    PyObject_SetAttrString(submodule, "Config100a", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(2);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "Config10ka2MV1"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "Config10ka2MV2"));
    PyObject_SetAttrString(submodule, "Config10ka2M", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ArrayV1"));
    PyObject_SetAttrString(submodule, "Array", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(3);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ElementV1"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "ElementV2"));
    PyList_SET_ITEM(unvlist, 2, PyObject_GetAttrString(submodule, "ElementV3"));
    PyObject_SetAttrString(submodule, "Element", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ConfigV1"));
    PyObject_SetAttrString(submodule, "Config", unvlist);
    Py_CLEAR(unvlist);
  }
  detail::register_ndarray_to_numpy_cvt<const uint32_t, 3>();
  detail::register_ndarray_to_numpy_cvt<const uint32_t, 2>();
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 3>();
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 2>();
  detail::register_ndarray_to_numpy_cvt<const uint8_t, 2>();
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 1>();
  detail::register_ndarray_to_numpy_cvt<const uint32_t, 1>();

} // createWrappers()
} // namespace Epix
} // namespace psddl_python
