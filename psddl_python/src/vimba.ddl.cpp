/* Do not edit this file, as it is auto-generated */

#include <boost/python.hpp>
#include <boost/make_shared.hpp>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/vimba.ddl.h" // inc_psana
#include "psddl_python/Converter.h"
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefSharedPtr.h"

namespace psddl_python {
namespace Vimba {

using namespace boost::python;
using boost::python::object;
using boost::shared_ptr;
using std::vector;

namespace {
template<typename T, std::vector<int> (T::*MF)() const>
PyObject* method_shape(const T *x) {
  return detail::vintToList((x->*MF)());
}
} // namespace

void createWrappers(PyObject* module) {
  DDL_CREATE_MODULE( "psana.Vimba", 0, "The Python wrapper module for Vimba types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "Vimba", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  {
  scope outer = 
  class_<Psana::Vimba::AlviumConfigV1, boost::shared_ptr<Psana::Vimba::AlviumConfigV1>, boost::noncopyable >("AlviumConfigV1", no_init)
    .def("reverseX", &Psana::Vimba::AlviumConfigV1::reverseX,"Reverse the image along the x-axis of the image.")
    .def("reverseY", &Psana::Vimba::AlviumConfigV1::reverseY,"Reverse the image along the y-axis of the image.")
    .def("contrastEnable", &Psana::Vimba::AlviumConfigV1::contrastEnable,"Enable contrast enhancement features.")
    .def("correctionEnable", &Psana::Vimba::AlviumConfigV1::correctionEnable,"Enable image correction feature.")
    .def("roiEnable", &Psana::Vimba::AlviumConfigV1::roiEnable,"Enable image roi.")
    .def("correctionType", &Psana::Vimba::AlviumConfigV1::correctionType,"Sets the type of image correction to use.")
    .def("correctionSet", &Psana::Vimba::AlviumConfigV1::correctionSet,"Sets which image correction date to use.")
    .def("pixelMode", &Psana::Vimba::AlviumConfigV1::pixelMode,"Sets the pixel bit depth.")
    .def("triggerMode", &Psana::Vimba::AlviumConfigV1::triggerMode,"Sets the trigger mode.")
    .def("width", &Psana::Vimba::AlviumConfigV1::width)
    .def("height", &Psana::Vimba::AlviumConfigV1::height)
    .def("offsetX", &Psana::Vimba::AlviumConfigV1::offsetX)
    .def("offsetY", &Psana::Vimba::AlviumConfigV1::offsetY)
    .def("sensorWidth", &Psana::Vimba::AlviumConfigV1::sensorWidth)
    .def("sensorHeight", &Psana::Vimba::AlviumConfigV1::sensorHeight)
    .def("contrastDarkLimit", &Psana::Vimba::AlviumConfigV1::contrastDarkLimit)
    .def("contrastBrightLimit", &Psana::Vimba::AlviumConfigV1::contrastBrightLimit)
    .def("contrastShape", &Psana::Vimba::AlviumConfigV1::contrastShape)
    .def("exposureTime", &Psana::Vimba::AlviumConfigV1::exposureTime)
    .def("blackLevel", &Psana::Vimba::AlviumConfigV1::blackLevel)
    .def("gain", &Psana::Vimba::AlviumConfigV1::gain)
    .def("gamma", &Psana::Vimba::AlviumConfigV1::gamma)
    .def("manufacturer", &Psana::Vimba::AlviumConfigV1::manufacturer,"The name of the manufacturer of the camera.")
    .def("family", &Psana::Vimba::AlviumConfigV1::family,"The model family of the camera.")
    .def("model", &Psana::Vimba::AlviumConfigV1::model,"The model name of the camera.")
    .def("manufacturerId", &Psana::Vimba::AlviumConfigV1::manufacturerId,"The manufacturer id of the camera.")
    .def("version", &Psana::Vimba::AlviumConfigV1::version,"The hardware version number of the camera.")
    .def("serialNumber", &Psana::Vimba::AlviumConfigV1::serialNumber,"The serial number of the camera.")
    .def("firmwareId", &Psana::Vimba::AlviumConfigV1::firmwareId,"The firmware id of the camera.")
    .def("firmwareVersion", &Psana::Vimba::AlviumConfigV1::firmwareVersion,"The firmware version of the camera.")
    .def("depth", &Psana::Vimba::AlviumConfigV1::depth,"Number of bits per pixel.")
    .def("frameSize", &Psana::Vimba::AlviumConfigV1::frameSize,"Total size in bytes of the Frame object")
    .def("numPixelsX", &Psana::Vimba::AlviumConfigV1::numPixelsX,"calculate frame X size in pixels based on the current ROI")
    .def("numPixelsY", &Psana::Vimba::AlviumConfigV1::numPixelsY,"calculate frame Y size in pixels based on the current ROI")
    .def("numPixels", &Psana::Vimba::AlviumConfigV1::numPixels,"calculate total frame size in pixels based on the current ROI and binning settings")
  ;

  enum_<Psana::Vimba::AlviumConfigV1::VmbBool>("VmbBool")
    .value("False",Psana::Vimba::AlviumConfigV1::False)
    .value("True",Psana::Vimba::AlviumConfigV1::True)
  ;

  enum_<Psana::Vimba::AlviumConfigV1::RoiMode>("RoiMode")
    .value("Off",Psana::Vimba::AlviumConfigV1::Off)
    .value("On",Psana::Vimba::AlviumConfigV1::On)
    .value("Centered",Psana::Vimba::AlviumConfigV1::Centered)
  ;

  enum_<Psana::Vimba::AlviumConfigV1::TriggerMode>("TriggerMode")
    .value("FreeRun",Psana::Vimba::AlviumConfigV1::FreeRun)
    .value("External",Psana::Vimba::AlviumConfigV1::External)
    .value("Software",Psana::Vimba::AlviumConfigV1::Software)
  ;

  enum_<Psana::Vimba::AlviumConfigV1::PixelMode>("PixelMode")
    .value("Mono8",Psana::Vimba::AlviumConfigV1::Mono8)
    .value("Mono10",Psana::Vimba::AlviumConfigV1::Mono10)
    .value("Mono10p",Psana::Vimba::AlviumConfigV1::Mono10p)
    .value("Mono12",Psana::Vimba::AlviumConfigV1::Mono12)
    .value("Mono12p",Psana::Vimba::AlviumConfigV1::Mono12p)
  ;

  enum_<Psana::Vimba::AlviumConfigV1::ImgCorrectionType>("ImgCorrectionType")
    .value("DefectPixelCorrection",Psana::Vimba::AlviumConfigV1::DefectPixelCorrection)
    .value("FixedPatternNoiseCorrection",Psana::Vimba::AlviumConfigV1::FixedPatternNoiseCorrection)
  ;

  enum_<Psana::Vimba::AlviumConfigV1::ImgCorrectionSet>("ImgCorrectionSet")
    .value("Preset",Psana::Vimba::AlviumConfigV1::Preset)
    .value("User",Psana::Vimba::AlviumConfigV1::User)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_AlviumConfig);
  scope().attr("DESC_CHAR_MAX")=48;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Vimba::AlviumConfigV1> >(Pds::TypeId::Id_AlviumConfig));

  {
  scope outer = 
  class_<Psana::Vimba::FrameV1, boost::shared_ptr<Psana::Vimba::FrameV1>, boost::noncopyable >("FrameV1", no_init)
    .def("frameid", &Psana::Vimba::FrameV1::frameid,"The internal frame id from the camera.")
    .def("timestamp", &Psana::Vimba::FrameV1::timestamp,"The internal camera FPGA clock timestamp for the frame.")
    .def("data", &Psana::Vimba::FrameV1::data)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_VimbaFrame);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Vimba::FrameV1> >(Pds::TypeId::Id_VimbaFrame));

  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "FrameV1"));
    PyObject_SetAttrString(submodule, "Frame", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "AlviumConfigV1"));
    PyObject_SetAttrString(submodule, "AlviumConfig", unvlist);
    Py_CLEAR(unvlist);
  }
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 2>();

} // createWrappers()
} // namespace Vimba
} // namespace psddl_python
