/* Do not edit this file, as it is auto-generated */

#include <boost/python.hpp>
#include <boost/make_shared.hpp>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/quadadc.ddl.h" // inc_psana
#include "psddl_python/Converter.h"
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefSharedPtr.h"

namespace psddl_python {
namespace QuadAdc {

using namespace boost::python;
using boost::python::object;
using boost::shared_ptr;
using std::vector;

namespace {
template<typename T, std::vector<int> (T::*MF)() const>
PyObject* method_shape(const T *x) {
  return detail::vintToList((x->*MF)());
}
} // namespace

void createWrappers(PyObject* module) {
  DDL_CREATE_MODULE( "psana.QuadAdc", 0, "The Python wrapper module for QuadAdc types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "QuadAdc", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  {
  scope outer = 
  class_<Psana::QuadAdc::ConfigV1, boost::shared_ptr<Psana::QuadAdc::ConfigV1>, boost::noncopyable >("ConfigV1", "QuadAdc Class", no_init)
    .def("chanMask", &Psana::QuadAdc::ConfigV1::chanMask,"Channel Mask.")
    .def("delayTime", &Psana::QuadAdc::ConfigV1::delayTime,"Delay time.")
    .def("interleaveMode", &Psana::QuadAdc::ConfigV1::interleaveMode,"Interleave Mode.")
    .def("nbrSamples", &Psana::QuadAdc::ConfigV1::nbrSamples,"Number of samples.")
    .def("evtCode", &Psana::QuadAdc::ConfigV1::evtCode,"Event Code.")
    .def("sampleRate", &Psana::QuadAdc::ConfigV1::sampleRate,"Sample Rate.")
  ;
  scope().attr("Version")=0;
  scope().attr("TypeId")=int(Pds::TypeId::Id_QuadAdcConfig);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::QuadAdc::ConfigV1> >(Pds::TypeId::Id_QuadAdcConfig));


} // createWrappers()
} // namespace QuadAdc
} // namespace psddl_python
