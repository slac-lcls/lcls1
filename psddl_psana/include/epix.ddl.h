#ifndef PSANA_EPIX_DDL_H
#define PSANA_EPIX_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include <vector>
#include <iosfwd>
#include <cstring>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/genericpgp.ddl.h"
namespace Psana {
namespace Epix {

/** @class AsicConfigV1

  
*/


class AsicConfigV1 {
public:
  virtual ~AsicConfigV1();
  virtual uint8_t monostPulser() const = 0;
  virtual uint8_t dummyTest() const = 0;
  virtual uint8_t dummyMask() const = 0;
  virtual uint16_t pulser() const = 0;
  virtual uint8_t pbit() const = 0;
  virtual uint8_t atest() const = 0;
  virtual uint8_t test() const = 0;
  virtual uint8_t sabTest() const = 0;
  virtual uint8_t hrTest() const = 0;
  virtual uint8_t digMon1() const = 0;
  virtual uint8_t digMon2() const = 0;
  virtual uint8_t pulserDac() const = 0;
  virtual uint8_t Dm1En() const = 0;
  virtual uint8_t Dm2En() const = 0;
  virtual uint8_t slvdSBit() const = 0;
  virtual uint8_t VRefDac() const = 0;
  virtual uint8_t TpsTComp() const = 0;
  virtual uint8_t TpsMux() const = 0;
  virtual uint8_t RoMonost() const = 0;
  virtual uint8_t TpsGr() const = 0;
  virtual uint8_t S2dGr() const = 0;
  virtual uint8_t PpOcbS2d() const = 0;
  virtual uint8_t Ocb() const = 0;
  virtual uint8_t Monost() const = 0;
  virtual uint8_t FastppEnable() const = 0;
  virtual uint8_t Preamp() const = 0;
  virtual uint8_t PixelCb() const = 0;
  virtual uint8_t S2dTComp() const = 0;
  virtual uint8_t FilterDac() const = 0;
  virtual uint8_t TC() const = 0;
  virtual uint8_t S2d() const = 0;
  virtual uint8_t S2dDacBias() const = 0;
  virtual uint8_t TpsTcDac() const = 0;
  virtual uint8_t TpsDac() const = 0;
  virtual uint8_t S2dTcDac() const = 0;
  virtual uint8_t S2dDac() const = 0;
  virtual uint8_t TestBe() const = 0;
  virtual uint8_t IsEn() const = 0;
  virtual uint8_t DelExec() const = 0;
  virtual uint8_t DelCckReg() const = 0;
  virtual uint16_t RowStartAddr() const = 0;
  virtual uint16_t RowStopAddr() const = 0;
  virtual uint8_t ColStartAddr() const = 0;
  virtual uint8_t ColStopAddr() const = 0;
  virtual uint16_t chipID() const = 0;
};

/** @class ConfigV1

  
*/


class ConfigV1 {
public:
  enum { TypeId = Pds::TypeId::Id_EpixConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  virtual ~ConfigV1();
  virtual uint32_t version() const = 0;
  virtual uint32_t runTrigDelay() const = 0;
  virtual uint32_t daqTrigDelay() const = 0;
  virtual uint32_t dacSetting() const = 0;
  virtual uint8_t asicGR() const = 0;
  virtual uint8_t asicAcq() const = 0;
  virtual uint8_t asicR0() const = 0;
  virtual uint8_t asicPpmat() const = 0;
  virtual uint8_t asicPpbe() const = 0;
  virtual uint8_t asicRoClk() const = 0;
  virtual uint8_t asicGRControl() const = 0;
  virtual uint8_t asicAcqControl() const = 0;
  virtual uint8_t asicR0Control() const = 0;
  virtual uint8_t asicPpmatControl() const = 0;
  virtual uint8_t asicPpbeControl() const = 0;
  virtual uint8_t asicR0ClkControl() const = 0;
  virtual uint8_t prepulseR0En() const = 0;
  virtual uint32_t adcStreamMode() const = 0;
  virtual uint8_t testPatternEnable() const = 0;
  virtual uint32_t acqToAsicR0Delay() const = 0;
  virtual uint32_t asicR0ToAsicAcq() const = 0;
  virtual uint32_t asicAcqWidth() const = 0;
  virtual uint32_t asicAcqLToPPmatL() const = 0;
  virtual uint32_t asicRoClkHalfT() const = 0;
  virtual uint32_t adcReadsPerPixel() const = 0;
  virtual uint32_t adcClkHalfT() const = 0;
  virtual uint32_t asicR0Width() const = 0;
  virtual uint32_t adcPipelineDelay() const = 0;
  virtual uint32_t prepulseR0Width() const = 0;
  virtual uint32_t prepulseR0Delay() const = 0;
  virtual uint32_t digitalCardId0() const = 0;
  virtual uint32_t digitalCardId1() const = 0;
  virtual uint32_t analogCardId0() const = 0;
  virtual uint32_t analogCardId1() const = 0;
  virtual uint32_t lastRowExclusions() const = 0;
  virtual uint32_t numberOfAsicsPerRow() const = 0;
  virtual uint32_t numberOfAsicsPerColumn() const = 0;
  /** generally 2 x 2 */
  virtual uint32_t numberOfRowsPerAsic() const = 0;
  /** for epix100  352 */
  virtual uint32_t numberOfPixelsPerAsicRow() const = 0;
  /** for epix100 96*4 */
  virtual uint32_t baseClockFrequency() const = 0;
  virtual uint32_t asicMask() const = 0;
  virtual const Epix::AsicConfigV1& asics(uint32_t i0) const = 0;
  virtual ndarray<const uint32_t, 3> asicPixelTestArray() const = 0;
  virtual ndarray<const uint32_t, 3> asicPixelMaskArray() const = 0;
  /** Number of rows in a readout unit */
  virtual uint32_t numberOfRows() const = 0;
  /** Number of columns in a readout unit */
  virtual uint32_t numberOfColumns() const = 0;
  /** Number of columns in a readout unit */
  virtual uint32_t numberOfAsics() const = 0;
  /** Method which returns the shape (dimensions) of the data returned by asics() method. */
  virtual std::vector<int> asics_shape() const = 0;
};

/** @class Asic10kConfigV1

  
*/


class Asic10kConfigV1 {
public:
  virtual ~Asic10kConfigV1();
  virtual uint8_t CompTH_DAC() const = 0;
  virtual uint8_t CompEn_0() const = 0;
  virtual uint8_t PulserSync() const = 0;
  virtual uint8_t dummyTest() const = 0;
  virtual uint8_t dummyMask() const = 0;
  virtual uint8_t dummyG() const = 0;
  virtual uint8_t dummyGA() const = 0;
  virtual uint16_t dummyUpper12bits() const = 0;
  virtual uint16_t pulser() const = 0;
  virtual uint8_t pbit() const = 0;
  virtual uint8_t atest() const = 0;
  virtual uint8_t test() const = 0;
  virtual uint8_t sabTest() const = 0;
  virtual uint8_t hrTest() const = 0;
  virtual uint8_t pulserR() const = 0;
  virtual uint8_t digMon1() const = 0;
  virtual uint8_t digMon2() const = 0;
  virtual uint8_t pulserDac() const = 0;
  virtual uint8_t monostPulser() const = 0;
  virtual uint8_t CompEn_1() const = 0;
  virtual uint8_t CompEn_2() const = 0;
  virtual uint8_t Dm1En() const = 0;
  virtual uint8_t Dm2En() const = 0;
  virtual uint8_t emph_bd() const = 0;
  virtual uint8_t emph_bc() const = 0;
  virtual uint8_t VRefDac() const = 0;
  virtual uint8_t vrefLow() const = 0;
  virtual uint8_t TpsTComp() const = 0;
  virtual uint8_t TpsMux() const = 0;
  virtual uint8_t RoMonost() const = 0;
  virtual uint8_t TpsGr() const = 0;
  virtual uint8_t S2dGr() const = 0;
  virtual uint8_t PpOcbS2d() const = 0;
  virtual uint8_t Ocb() const = 0;
  virtual uint8_t Monost() const = 0;
  virtual uint8_t FastppEnable() const = 0;
  virtual uint8_t Preamp() const = 0;
  virtual uint8_t PixelCb() const = 0;
  virtual uint8_t Vld1_b() const = 0;
  virtual uint8_t S2dTComp() const = 0;
  virtual uint8_t FilterDac() const = 0;
  virtual uint8_t testVDTransmitter() const = 0;
  virtual uint8_t TC() const = 0;
  virtual uint8_t S2d() const = 0;
  virtual uint8_t S2dDacBias() const = 0;
  virtual uint8_t TpsTcDac() const = 0;
  virtual uint8_t TpsDac() const = 0;
  virtual uint8_t S2dTcDac() const = 0;
  virtual uint8_t S2dDac() const = 0;
  virtual uint8_t TestBe() const = 0;
  virtual uint8_t IsEn() const = 0;
  virtual uint8_t DelExec() const = 0;
  virtual uint8_t DelCckReg() const = 0;
  virtual uint8_t RO_rst_en() const = 0;
  virtual uint8_t slvdSBit() const = 0;
  virtual uint8_t FELmode() const = 0;
  virtual uint8_t CompEnOn() const = 0;
  virtual uint16_t RowStartAddr() const = 0;
  virtual uint16_t RowStopAddr() const = 0;
  virtual uint8_t ColStartAddr() const = 0;
  virtual uint8_t ColStopAddr() const = 0;
  virtual uint16_t chipID() const = 0;
};

/** @class Config10KV1

  
*/


class Config10KV1 {
public:
  enum { TypeId = Pds::TypeId::Id_Epix10kConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  virtual ~Config10KV1();
  virtual uint32_t version() const = 0;
  virtual uint32_t runTrigDelay() const = 0;
  virtual uint32_t daqTrigDelay() const = 0;
  virtual uint32_t dacSetting() const = 0;
  virtual uint8_t asicGR() const = 0;
  virtual uint8_t asicAcq() const = 0;
  virtual uint8_t asicR0() const = 0;
  virtual uint8_t asicPpmat() const = 0;
  virtual uint8_t asicPpbe() const = 0;
  virtual uint8_t asicRoClk() const = 0;
  virtual uint8_t asicGRControl() const = 0;
  virtual uint8_t asicAcqControl() const = 0;
  virtual uint8_t asicR0Control() const = 0;
  virtual uint8_t asicPpmatControl() const = 0;
  virtual uint8_t asicPpbeControl() const = 0;
  virtual uint8_t asicR0ClkControl() const = 0;
  virtual uint8_t prepulseR0En() const = 0;
  virtual uint32_t adcStreamMode() const = 0;
  virtual uint8_t testPatternEnable() const = 0;
  /** new */
  virtual uint8_t SyncMode() const = 0;
  /** new */
  virtual uint8_t R0Mode() const = 0;
  /** new */
  virtual uint32_t DoutPipelineDelay() const = 0;
  virtual uint32_t acqToAsicR0Delay() const = 0;
  virtual uint32_t asicR0ToAsicAcq() const = 0;
  virtual uint32_t asicAcqWidth() const = 0;
  virtual uint32_t asicAcqLToPPmatL() const = 0;
  virtual uint32_t asicRoClkHalfT() const = 0;
  virtual uint32_t adcReadsPerPixel() const = 0;
  virtual uint32_t adcClkHalfT() const = 0;
  virtual uint32_t asicR0Width() const = 0;
  virtual uint32_t adcPipelineDelay() const = 0;
  /** new */
  virtual uint16_t SyncWidth() const = 0;
  /** new */
  virtual uint16_t SyncDelay() const = 0;
  virtual uint32_t prepulseR0Width() const = 0;
  virtual uint32_t prepulseR0Delay() const = 0;
  virtual uint32_t digitalCardId0() const = 0;
  virtual uint32_t digitalCardId1() const = 0;
  virtual uint32_t analogCardId0() const = 0;
  virtual uint32_t analogCardId1() const = 0;
  virtual uint32_t lastRowExclusions() const = 0;
  virtual uint32_t numberOfAsicsPerRow() const = 0;
  virtual uint32_t numberOfAsicsPerColumn() const = 0;
  virtual uint32_t numberOfRowsPerAsic() const = 0;
  /** for epix10k  176 */
  virtual uint32_t numberOfPixelsPerAsicRow() const = 0;
  /** for epix10k 48*4 */
  virtual uint32_t baseClockFrequency() const = 0;
  virtual uint32_t asicMask() const = 0;
  virtual uint8_t scopeEnable() const = 0;
  virtual uint8_t scopeTrigEdge() const = 0;
  virtual uint8_t scopeTrigChan() const = 0;
  virtual uint8_t scopeArmMode() const = 0;
  virtual uint16_t scopeADCThreshold() const = 0;
  virtual uint16_t scopeTrigHoldoff() const = 0;
  virtual uint16_t scopeTrigOffset() const = 0;
  virtual uint16_t scopeTraceLength() const = 0;
  virtual uint16_t scopeADCsameplesToSkip() const = 0;
  virtual uint8_t scopeChanAwaveformSelect() const = 0;
  virtual uint8_t scopeChanBwaveformSelect() const = 0;
  virtual const Epix::Asic10kConfigV1& asics(uint32_t i0) const = 0;
  virtual ndarray<const uint16_t, 3> asicPixelConfigArray() const = 0;
  /** Number of rows in a readout unit */
  virtual uint32_t numberOfRows() const = 0;
  /** Number of columns in a readout unit */
  virtual uint32_t numberOfColumns() const = 0;
  /** Number of columns in a readout unit */
  virtual uint32_t numberOfAsics() const = 0;
  /** Method which returns the shape (dimensions) of the data returned by asics() method. */
  virtual std::vector<int> asics_shape() const = 0;
};

/** @class Asic100aConfigV1

  
*/


class Asic100aConfigV1 {
public:
  virtual ~Asic100aConfigV1();
  virtual uint8_t pulserVsPixelOnDelay() const = 0;
  virtual uint8_t pulserSync() const = 0;
  virtual uint8_t dummyTest() const = 0;
  virtual uint8_t dummyMask() const = 0;
  virtual uint16_t testPulserLevel() const = 0;
  virtual uint8_t pulserCounterDirection() const = 0;
  virtual uint8_t automaticTestModeEnable() const = 0;
  virtual uint8_t testMode() const = 0;
  virtual uint8_t testModeWithDarkFrame() const = 0;
  virtual uint8_t highResolutionModeTest() const = 0;
  virtual uint8_t pulserReset() const = 0;
  virtual uint8_t digitalMonitorMux1() const = 0;
  virtual uint8_t digitalMonitorMux2() const = 0;
  virtual uint8_t testPulserCurrent() const = 0;
  virtual uint8_t testPointSystemOutputDynamicRange() const = 0;
  virtual uint8_t digitalMonitor1Enable() const = 0;
  virtual uint8_t digitalMonitor2Enable() const = 0;
  virtual uint8_t LVDS_ImpedenceMatchingEnable() const = 0;
  virtual uint8_t VRefBaselineDac() const = 0;
  virtual uint8_t extraRowsLowReferenceValue() const = 0;
  virtual uint8_t testPointSystemTemperatureCompensationEnable() const = 0;
  virtual uint8_t testPointSytemInputSelect() const = 0;
  virtual uint8_t programmableReadoutDelay() const = 0;
  virtual uint8_t outputDriverOutputDynamicRange0() const = 0;
  virtual uint8_t outputDriverOutputDynamicRange1() const = 0;
  virtual uint8_t balconyEnable() const = 0;
  virtual uint8_t balconyDriverCurrent() const = 0;
  virtual uint8_t fastPowerPulsingSpeed() const = 0;
  virtual uint8_t fastPowerPulsingEnable() const = 0;
  virtual uint8_t preamplifierCurrent() const = 0;
  virtual uint8_t pixelOutputBufferCurrent() const = 0;
  virtual uint8_t pixelBufferAndPreamplifierDrivingCapabilities() const = 0;
  virtual uint8_t outputDriverTemperatureCompensationEnable() const = 0;
  virtual uint8_t pixelFilterLevel() const = 0;
  virtual uint8_t bandGapReferenceTemperatureCompensationBits() const = 0;
  virtual uint8_t outputDriverDrivingCapabilitiesAndStability() const = 0;
  virtual uint8_t outputDriverDacReferenceBias() const = 0;
  virtual uint8_t testPointSystemTemperatureCompensationGain() const = 0;
  virtual uint8_t testPointSystemInputCommonMode() const = 0;
  virtual uint8_t outputDriverTemperatureCompensationGain0() const = 0;
  virtual uint8_t outputDriverInputCommonMode0() const = 0;
  virtual uint8_t testBackEnd() const = 0;
  virtual uint8_t interleavedReadOutEnable() const = 0;
  virtual uint8_t EXEC_DelayEnable() const = 0;
  virtual uint8_t CCK_RegDelayEnable() const = 0;
  virtual uint8_t syncPinEnable() const = 0;
  virtual uint16_t RowStartAddr() const = 0;
  virtual uint16_t RowStopAddr() const = 0;
  virtual uint8_t ColumnStartAddr() const = 0;
  virtual uint8_t ColumnStopAddr() const = 0;
  virtual uint16_t chipID() const = 0;
  virtual uint8_t outputDriverOutputDynamicRange2() const = 0;
  virtual uint8_t outputDriverOutputDynamicRange3() const = 0;
  virtual uint8_t outputDriverTemperatureCompensationGain1() const = 0;
  virtual uint8_t outputDriverInputCommonMode1() const = 0;
  virtual uint8_t outputDriverTemperatureCompensationGain2() const = 0;
  virtual uint8_t outputDriverInputCommonMode2() const = 0;
  virtual uint8_t outputDriverTemperatureCompensationGain3() const = 0;
  virtual uint8_t outputDriverInputCommonMode3() const = 0;
};

/** @class Config100aV1

  
*/


class Config100aV1 {
public:
  enum { TypeId = Pds::TypeId::Id_Epix100aConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  virtual ~Config100aV1();
  virtual uint32_t version() const = 0;
  virtual uint32_t runTrigDelay() const = 0;
  virtual uint32_t daqTrigDelay() const = 0;
  virtual uint32_t dacSetting() const = 0;
  virtual uint8_t asicGR() const = 0;
  virtual uint8_t asicAcq() const = 0;
  virtual uint8_t asicR0() const = 0;
  virtual uint8_t asicPpmat() const = 0;
  virtual uint8_t asicPpbe() const = 0;
  virtual uint8_t asicRoClk() const = 0;
  virtual uint8_t asicGRControl() const = 0;
  virtual uint8_t asicAcqControl() const = 0;
  virtual uint8_t asicR0Control() const = 0;
  virtual uint8_t asicPpmatControl() const = 0;
  virtual uint8_t asicPpbeControl() const = 0;
  virtual uint8_t asicR0ClkControl() const = 0;
  virtual uint8_t prepulseR0En() const = 0;
  virtual uint32_t adcStreamMode() const = 0;
  virtual uint8_t testPatternEnable() const = 0;
  virtual uint8_t SyncMode() const = 0;
  virtual uint8_t R0Mode() const = 0;
  virtual uint32_t acqToAsicR0Delay() const = 0;
  virtual uint32_t asicR0ToAsicAcq() const = 0;
  virtual uint32_t asicAcqWidth() const = 0;
  virtual uint32_t asicAcqLToPPmatL() const = 0;
  virtual uint32_t asicPPmatToReadout() const = 0;
  virtual uint32_t asicRoClkHalfT() const = 0;
  virtual uint32_t adcReadsPerPixel() const = 0;
  virtual uint32_t adcClkHalfT() const = 0;
  virtual uint32_t asicR0Width() const = 0;
  virtual uint32_t adcPipelineDelay() const = 0;
  virtual uint16_t SyncWidth() const = 0;
  virtual uint16_t SyncDelay() const = 0;
  virtual uint32_t prepulseR0Width() const = 0;
  virtual uint32_t prepulseR0Delay() const = 0;
  virtual uint32_t digitalCardId0() const = 0;
  virtual uint32_t digitalCardId1() const = 0;
  virtual uint32_t analogCardId0() const = 0;
  virtual uint32_t analogCardId1() const = 0;
  virtual uint32_t numberOfAsicsPerRow() const = 0;
  virtual uint32_t numberOfAsicsPerColumn() const = 0;
  virtual uint32_t numberOfRowsPerAsic() const = 0;
  virtual uint32_t numberOfReadableRowsPerAsic() const = 0;
  /** for epix100a  352 */
  virtual uint32_t numberOfPixelsPerAsicRow() const = 0;
  /** for epix100a 96*4 = 384 */
  virtual uint32_t calibrationRowCountPerASIC() const = 0;
  virtual uint32_t environmentalRowCountPerASIC() const = 0;
  virtual uint32_t baseClockFrequency() const = 0;
  virtual uint32_t asicMask() const = 0;
  virtual uint8_t scopeEnable() const = 0;
  virtual uint8_t scopeTrigEdge() const = 0;
  virtual uint8_t scopeTrigChan() const = 0;
  virtual uint8_t scopeArmMode() const = 0;
  virtual uint16_t scopeADCThreshold() const = 0;
  virtual uint16_t scopeTrigHoldoff() const = 0;
  virtual uint16_t scopeTrigOffset() const = 0;
  virtual uint16_t scopeTraceLength() const = 0;
  virtual uint16_t scopeADCsameplesToSkip() const = 0;
  virtual uint8_t scopeChanAwaveformSelect() const = 0;
  virtual uint8_t scopeChanBwaveformSelect() const = 0;
  virtual const Epix::Asic100aConfigV1& asics(uint32_t i0) const = 0;
  virtual ndarray<const uint16_t, 2> asicPixelConfigArray() const = 0;
  /** Calibration row config map is one row for every two calib rows */
  virtual ndarray<const uint8_t, 2> calibPixelConfigArray() const = 0;
  /** Number of pixel rows in a readout unit */
  virtual uint32_t numberOfRows() const = 0;
  /** Number of readable pixel rows in a readout unit */
  virtual uint32_t numberOfReadableRows() const = 0;
  /** Number of pixel columns in a readout unit */
  virtual uint32_t numberOfColumns() const = 0;
  /** Number of calibration rows in a readout unit */
  virtual uint32_t numberOfCalibrationRows() const = 0;
  /** Number of rows in a readout unit */
  virtual uint32_t numberOfEnvironmentalRows() const = 0;
  /** Number of columns in a readout unit */
  virtual uint32_t numberOfAsics() const = 0;
  /** Method which returns the shape (dimensions) of the data returned by asics() method. */
  virtual std::vector<int> asics_shape() const = 0;
};

/** @class Config100aV2

  
*/


class Config100aV2 {
public:
  enum { TypeId = Pds::TypeId::Id_Epix100aConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 2 /**< XTC type version number */ };
  virtual ~Config100aV2();
  virtual uint32_t version() const = 0;
  virtual uint32_t usePgpEvr() const = 0;
  virtual uint32_t evrRunCode() const = 0;
  virtual uint32_t evrDaqCode() const = 0;
  virtual uint32_t evrRunTrigDelay() const = 0;
  virtual uint32_t epixRunTrigDelay() const = 0;
  virtual uint32_t dacSetting() const = 0;
  virtual uint8_t asicGR() const = 0;
  virtual uint8_t asicAcq() const = 0;
  virtual uint8_t asicR0() const = 0;
  virtual uint8_t asicPpmat() const = 0;
  virtual uint8_t asicPpbe() const = 0;
  virtual uint8_t asicRoClk() const = 0;
  virtual uint8_t asicGRControl() const = 0;
  virtual uint8_t asicAcqControl() const = 0;
  virtual uint8_t asicR0Control() const = 0;
  virtual uint8_t asicPpmatControl() const = 0;
  virtual uint8_t asicPpbeControl() const = 0;
  virtual uint8_t asicR0ClkControl() const = 0;
  virtual uint8_t prepulseR0En() const = 0;
  virtual uint32_t adcStreamMode() const = 0;
  virtual uint8_t testPatternEnable() const = 0;
  virtual uint8_t SyncMode() const = 0;
  virtual uint8_t R0Mode() const = 0;
  virtual uint32_t acqToAsicR0Delay() const = 0;
  virtual uint32_t asicR0ToAsicAcq() const = 0;
  virtual uint32_t asicAcqWidth() const = 0;
  virtual uint32_t asicAcqLToPPmatL() const = 0;
  virtual uint32_t asicPPmatToReadout() const = 0;
  virtual uint32_t asicRoClkHalfT() const = 0;
  virtual uint32_t adcReadsPerPixel() const = 0;
  virtual uint32_t adcClkHalfT() const = 0;
  virtual uint32_t asicR0Width() const = 0;
  virtual uint32_t adcPipelineDelay() const = 0;
  virtual uint32_t adcPipelineDelay0() const = 0;
  virtual uint32_t adcPipelineDelay1() const = 0;
  virtual uint32_t adcPipelineDelay2() const = 0;
  virtual uint32_t adcPipelineDelay3() const = 0;
  virtual uint16_t SyncWidth() const = 0;
  virtual uint16_t SyncDelay() const = 0;
  virtual uint32_t prepulseR0Width() const = 0;
  virtual uint32_t prepulseR0Delay() const = 0;
  virtual uint32_t digitalCardId0() const = 0;
  virtual uint32_t digitalCardId1() const = 0;
  virtual uint32_t analogCardId0() const = 0;
  virtual uint32_t analogCardId1() const = 0;
  virtual uint32_t carrierId0() const = 0;
  virtual uint32_t carrierId1() const = 0;
  virtual uint32_t numberOfAsicsPerRow() const = 0;
  virtual uint32_t numberOfAsicsPerColumn() const = 0;
  virtual uint32_t numberOfRowsPerAsic() const = 0;
  virtual uint32_t numberOfReadableRowsPerAsic() const = 0;
  /** for epix100a  352 */
  virtual uint32_t numberOfPixelsPerAsicRow() const = 0;
  /** for epix100a 96*4 = 384 */
  virtual uint32_t calibrationRowCountPerASIC() const = 0;
  virtual uint32_t environmentalRowCountPerASIC() const = 0;
  virtual uint32_t baseClockFrequency() const = 0;
  virtual uint32_t asicMask() const = 0;
  virtual uint32_t enableAutomaticRunTrigger() const = 0;
  virtual uint32_t numberOf125MhzTicksPerRunTrigger() const = 0;
  virtual uint8_t scopeEnable() const = 0;
  virtual uint8_t scopeTrigEdge() const = 0;
  virtual uint8_t scopeTrigChan() const = 0;
  virtual uint8_t scopeArmMode() const = 0;
  virtual uint16_t scopeADCThreshold() const = 0;
  virtual uint16_t scopeTrigHoldoff() const = 0;
  virtual uint16_t scopeTrigOffset() const = 0;
  virtual uint16_t scopeTraceLength() const = 0;
  virtual uint16_t scopeADCsameplesToSkip() const = 0;
  virtual uint8_t scopeChanAwaveformSelect() const = 0;
  virtual uint8_t scopeChanBwaveformSelect() const = 0;
  virtual const Epix::Asic100aConfigV1& asics(uint32_t i0) const = 0;
  virtual ndarray<const uint16_t, 2> asicPixelConfigArray() const = 0;
  /** Calibration row config map is one row for every two calib rows */
  virtual ndarray<const uint8_t, 2> calibPixelConfigArray() const = 0;
  /** Number of pixel rows in a readout unit */
  virtual uint32_t numberOfRows() const = 0;
  /** Number of readable pixel rows in a readout unit */
  virtual uint32_t numberOfReadableRows() const = 0;
  /** Number of pixel columns in a readout unit */
  virtual uint32_t numberOfColumns() const = 0;
  /** Number of calibration rows in a readout unit */
  virtual uint32_t numberOfCalibrationRows() const = 0;
  /** Number of rows in a readout unit */
  virtual uint32_t numberOfEnvironmentalRows() const = 0;
  /** Number of columns in a readout unit */
  virtual uint32_t numberOfAsics() const = 0;
  /** Method which returns the shape (dimensions) of the data returned by asics() method. */
  virtual std::vector<int> asics_shape() const = 0;
};

/** @class Asic10kaConfigV1

  
*/


class Asic10kaConfigV1 {
public:
  virtual ~Asic10kaConfigV1();
  virtual uint8_t CompTH_DAC() const = 0;
  virtual uint8_t CompEn_lowBit() const = 0;
  virtual uint8_t PulserSync() const = 0;
  virtual uint8_t pixelDummy() const = 0;
  virtual uint16_t Pulser() const = 0;
  virtual uint8_t Pbit() const = 0;
  virtual uint8_t atest() const = 0;
  virtual uint8_t test() const = 0;
  virtual uint8_t Sab_test() const = 0;
  virtual uint8_t Hrtest() const = 0;
  virtual uint8_t PulserR() const = 0;
  virtual uint8_t DM1() const = 0;
  virtual uint8_t DM2() const = 0;
  virtual uint8_t Pulser_DAC() const = 0;
  virtual uint8_t Monost_Pulser() const = 0;
  virtual uint8_t CompEn_topTwoBits() const = 0;
  virtual uint8_t DM1en() const = 0;
  virtual uint8_t DM2en() const = 0;
  virtual uint8_t emph_bd() const = 0;
  virtual uint8_t emph_bc() const = 0;
  virtual uint8_t VREF_DAC() const = 0;
  virtual uint8_t VrefLow() const = 0;
  virtual uint8_t TPS_tcomp() const = 0;
  virtual uint8_t TPS_MUX() const = 0;
  virtual uint8_t RO_Monost() const = 0;
  virtual uint8_t TPS_GR() const = 0;
  virtual uint8_t S2D0_GR() const = 0;
  virtual uint8_t PP_OCB_S2D() const = 0;
  virtual uint8_t OCB() const = 0;
  virtual uint8_t Monost() const = 0;
  virtual uint8_t fastPP_enable() const = 0;
  virtual uint8_t Preamp() const = 0;
  virtual uint8_t PixelCB() const = 0;
  virtual uint8_t Vld1_b() const = 0;
  virtual uint8_t S2D_tcomp() const = 0;
  virtual uint8_t Filter_DAC() const = 0;
  virtual uint8_t testLVDTransmitter() const = 0;
  virtual uint8_t tc() const = 0;
  virtual uint8_t S2D() const = 0;
  virtual uint8_t S2D_DAC_Bias() const = 0;
  virtual uint8_t TPS_tcDAC() const = 0;
  virtual uint8_t TPS_DAC() const = 0;
  virtual uint8_t S2D0_tcDAC() const = 0;
  virtual uint8_t S2D0_DAC() const = 0;
  virtual uint8_t testBE() const = 0;
  virtual uint8_t is_en() const = 0;
  virtual uint8_t DelEXEC() const = 0;
  virtual uint8_t DelCCKreg() const = 0;
  virtual uint8_t RO_rst_en() const = 0;
  virtual uint8_t SLVDSbit() const = 0;
  virtual uint8_t FELmode() const = 0;
  virtual uint8_t CompEnOn() const = 0;
  virtual uint16_t RowStart() const = 0;
  virtual uint16_t RowStop() const = 0;
  virtual uint8_t ColumnStart() const = 0;
  virtual uint8_t ColumnStop() const = 0;
  virtual uint16_t chipID() const = 0;
  virtual uint8_t S2D1_GR() const = 0;
  virtual uint8_t S2D2_GR() const = 0;
  virtual uint8_t S2D3_GR() const = 0;
  virtual uint8_t trbit() const = 0;
  virtual uint8_t S2D1_tcDAC() const = 0;
  virtual uint8_t S2D1_DAC() const = 0;
  virtual uint8_t S2D2_tcDAC() const = 0;
  virtual uint8_t S2D2_DAC() const = 0;
  virtual uint8_t S2D3_tcDAC() const = 0;
  virtual uint8_t S2D3_DAC() const = 0;
};

/** @class Config10kaV1

  
*/


class Config10kaV1 {
public:
  enum { TypeId = Pds::TypeId::Id_Epix10kaConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  virtual ~Config10kaV1();
  virtual uint32_t version() const = 0;
  virtual uint32_t usePgpEvr() const = 0;
  virtual uint32_t evrRunCode() const = 0;
  virtual uint32_t evrDaqCode() const = 0;
  virtual uint32_t evrRunTrigDelay() const = 0;
  virtual uint32_t epixRunTrigDelay() const = 0;
  virtual uint32_t dacSetting() const = 0;
  virtual uint8_t asicGR() const = 0;
  virtual uint8_t asicAcq() const = 0;
  virtual uint8_t asicR0() const = 0;
  virtual uint8_t asicPpmat() const = 0;
  virtual uint8_t asicPpbe() const = 0;
  virtual uint8_t asicRoClk() const = 0;
  virtual uint8_t asicGRControl() const = 0;
  virtual uint8_t asicAcqControl() const = 0;
  virtual uint8_t asicR0Control() const = 0;
  virtual uint8_t asicPpmatControl() const = 0;
  virtual uint8_t asicPpbeControl() const = 0;
  virtual uint8_t asicR0ClkControl() const = 0;
  virtual uint8_t prepulseR0En() const = 0;
  virtual uint32_t adcStreamMode() const = 0;
  virtual uint8_t testPatternEnable() const = 0;
  virtual uint8_t SyncMode() const = 0;
  virtual uint8_t R0Mode() const = 0;
  virtual uint32_t acqToAsicR0Delay() const = 0;
  virtual uint32_t asicR0ToAsicAcq() const = 0;
  virtual uint32_t asicAcqWidth() const = 0;
  virtual uint32_t asicAcqLToPPmatL() const = 0;
  virtual uint32_t asicPPmatToReadout() const = 0;
  virtual uint32_t asicRoClkHalfT() const = 0;
  virtual uint32_t adcReadsPerPixel() const = 0;
  virtual uint32_t adcClkHalfT() const = 0;
  virtual uint32_t asicR0Width() const = 0;
  virtual uint32_t adcPipelineDelay() const = 0;
  virtual uint32_t adcPipelineDelay0() const = 0;
  virtual uint32_t adcPipelineDelay1() const = 0;
  virtual uint32_t adcPipelineDelay2() const = 0;
  virtual uint32_t adcPipelineDelay3() const = 0;
  virtual uint16_t SyncWidth() const = 0;
  virtual uint16_t SyncDelay() const = 0;
  virtual uint32_t prepulseR0Width() const = 0;
  virtual uint32_t prepulseR0Delay() const = 0;
  virtual uint32_t digitalCardId0() const = 0;
  virtual uint32_t digitalCardId1() const = 0;
  virtual uint32_t analogCardId0() const = 0;
  virtual uint32_t analogCardId1() const = 0;
  virtual uint32_t carrierId0() const = 0;
  virtual uint32_t carrierId1() const = 0;
  virtual uint32_t numberOfAsicsPerRow() const = 0;
  virtual uint32_t numberOfAsicsPerColumn() const = 0;
  virtual uint32_t numberOfRowsPerAsic() const = 0;
  virtual uint32_t numberOfReadableRowsPerAsic() const = 0;
  /** for epix10ka  176 */
  virtual uint32_t numberOfPixelsPerAsicRow() const = 0;
  /** for epix10ka 96*4 = 384 */
  virtual uint32_t calibrationRowCountPerASIC() const = 0;
  virtual uint32_t environmentalRowCountPerASIC() const = 0;
  virtual uint32_t baseClockFrequency() const = 0;
  virtual uint32_t asicMask() const = 0;
  virtual uint32_t enableAutomaticRunTrigger() const = 0;
  virtual uint32_t numberOf125MhzTicksPerRunTrigger() const = 0;
  virtual uint8_t scopeEnable() const = 0;
  virtual uint8_t scopeTrigEdge() const = 0;
  virtual uint8_t scopeTrigChan() const = 0;
  virtual uint8_t scopeArmMode() const = 0;
  virtual uint16_t scopeADCThreshold() const = 0;
  virtual uint16_t scopeTrigHoldoff() const = 0;
  virtual uint16_t scopeTrigOffset() const = 0;
  virtual uint16_t scopeTraceLength() const = 0;
  virtual uint16_t scopeADCsameplesToSkip() const = 0;
  virtual uint8_t scopeChanAwaveformSelect() const = 0;
  virtual uint8_t scopeChanBwaveformSelect() const = 0;
  virtual const Epix::Asic10kaConfigV1& asics(uint32_t i0) const = 0;
  virtual ndarray<const uint16_t, 2> asicPixelConfigArray() const = 0;
  /** Calibration row config map is one row for every two calib rows */
  virtual ndarray<const uint8_t, 2> calibPixelConfigArray() const = 0;
  /** Number of pixel rows in a readout unit */
  virtual uint32_t numberOfRows() const = 0;
  /** Number of readable pixel rows in a readout unit */
  virtual uint32_t numberOfReadableRows() const = 0;
  /** Number of pixel columns in a readout unit */
  virtual uint32_t numberOfColumns() const = 0;
  /** Number of calibration rows in a readout unit */
  virtual uint32_t numberOfCalibrationRows() const = 0;
  /** Number of rows in a readout unit */
  virtual uint32_t numberOfEnvironmentalRows() const = 0;
  /** Number of columns in a readout unit */
  virtual uint32_t numberOfAsics() const = 0;
  /** Method which returns the shape (dimensions) of the data returned by asics() method. */
  virtual std::vector<int> asics_shape() const = 0;
};

/** @class Config10kaV2

  
*/


class Config10kaV2 {
public:
  enum { TypeId = Pds::TypeId::Id_Epix10kaConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 2 /**< XTC type version number */ };
  enum { FirmwareHashMax = 64 };
  enum { FirmwareDescMax = 256 };
  virtual ~Config10kaV2();
  virtual uint32_t version() const = 0;
  virtual uint32_t usePgpEvr() const = 0;
  virtual uint32_t evrRunCode() const = 0;
  virtual uint32_t evrDaqCode() const = 0;
  virtual uint32_t evrRunTrigDelay() const = 0;
  virtual uint32_t epixRunTrigDelay() const = 0;
  virtual uint32_t epixDaqTrigDelay() const = 0;
  virtual uint32_t dacSetting() const = 0;
  virtual uint8_t asicGR() const = 0;
  virtual uint8_t asicAcq() const = 0;
  virtual uint8_t asicR0() const = 0;
  virtual uint8_t asicPpmat() const = 0;
  virtual uint8_t asicPpbe() const = 0;
  virtual uint8_t asicRoClk() const = 0;
  virtual uint8_t asicGRControl() const = 0;
  virtual uint8_t asicAcqControl() const = 0;
  virtual uint8_t asicR0Control() const = 0;
  virtual uint8_t asicPpmatControl() const = 0;
  virtual uint8_t asicPpbeControl() const = 0;
  virtual uint8_t asicR0ClkControl() const = 0;
  virtual uint8_t prepulseR0En() const = 0;
  virtual uint32_t adcStreamMode() const = 0;
  virtual uint8_t testPatternEnable() const = 0;
  virtual uint32_t acqToAsicR0Delay() const = 0;
  virtual uint32_t asicR0ToAsicAcq() const = 0;
  virtual uint32_t asicAcqWidth() const = 0;
  virtual uint32_t asicAcqLToPPmatL() const = 0;
  virtual uint32_t asicPPmatToReadout() const = 0;
  virtual uint32_t asicRoClkHalfT() const = 0;
  virtual uint32_t adcClkHalfT() const = 0;
  virtual uint32_t asicR0Width() const = 0;
  virtual uint32_t adcPipelineDelay() const = 0;
  virtual uint32_t adcPipelineDelay0() const = 0;
  virtual uint32_t adcPipelineDelay1() const = 0;
  virtual uint32_t adcPipelineDelay2() const = 0;
  virtual uint32_t adcPipelineDelay3() const = 0;
  virtual uint16_t SyncWidth() const = 0;
  virtual uint16_t SyncDelay() const = 0;
  virtual uint32_t prepulseR0Width() const = 0;
  virtual uint32_t prepulseR0Delay() const = 0;
  virtual uint32_t digitalCardId0() const = 0;
  virtual uint32_t digitalCardId1() const = 0;
  virtual uint32_t analogCardId0() const = 0;
  virtual uint32_t analogCardId1() const = 0;
  virtual uint32_t carrierId0() const = 0;
  virtual uint32_t carrierId1() const = 0;
  virtual uint32_t numberOfAsicsPerRow() const = 0;
  virtual uint32_t numberOfAsicsPerColumn() const = 0;
  virtual uint32_t numberOfRowsPerAsic() const = 0;
  virtual uint32_t numberOfReadableRowsPerAsic() const = 0;
  /** for epix10ka  176 */
  virtual uint32_t numberOfPixelsPerAsicRow() const = 0;
  /** for epix10ka 96*4 = 384 */
  virtual uint32_t calibrationRowCountPerASIC() const = 0;
  virtual uint32_t environmentalRowCountPerASIC() const = 0;
  virtual uint32_t baseClockFrequency() const = 0;
  virtual uint32_t asicMask() const = 0;
  virtual uint32_t enableAutomaticRunTrigger() const = 0;
  virtual uint32_t numberOf125MhzTicksPerRunTrigger() const = 0;
  virtual uint32_t ghostCorrEn() const = 0;
  virtual uint32_t oversampleEn() const = 0;
  virtual uint32_t oversampleSize() const = 0;
  virtual uint8_t scopeEnable() const = 0;
  virtual uint8_t scopeTrigEdge() const = 0;
  virtual uint8_t scopeTrigChan() const = 0;
  virtual uint8_t scopeArmMode() const = 0;
  virtual uint16_t scopeADCThreshold() const = 0;
  virtual uint16_t scopeTrigHoldoff() const = 0;
  virtual uint16_t scopeTrigOffset() const = 0;
  virtual uint16_t scopeTraceLength() const = 0;
  virtual uint16_t scopeADCsameplesToSkip() const = 0;
  virtual uint8_t scopeChanAwaveformSelect() const = 0;
  virtual uint8_t scopeChanBwaveformSelect() const = 0;
  virtual const char* firmwareHash() const = 0;
  virtual const char* firmwareDesc() const = 0;
  virtual const Epix::Asic10kaConfigV1& asics(uint32_t i0) const = 0;
  virtual ndarray<const uint16_t, 2> asicPixelConfigArray() const = 0;
  /** Calibration row config map is one row for every two calib rows */
  virtual ndarray<const uint8_t, 2> calibPixelConfigArray() const = 0;
  /** Number of pixel rows in a readout unit */
  virtual uint32_t numberOfRows() const = 0;
  /** Number of readable pixel rows in a readout unit */
  virtual uint32_t numberOfReadableRows() const = 0;
  /** Number of pixel columns in a readout unit */
  virtual uint32_t numberOfColumns() const = 0;
  /** Number of calibration rows in a readout unit */
  virtual uint32_t numberOfCalibrationRows() const = 0;
  /** Number of rows in a readout unit */
  virtual uint32_t numberOfEnvironmentalRows() const = 0;
  /** Number of columns in a readout unit */
  virtual uint32_t numberOfAsics() const = 0;
  /** Method which returns the shape (dimensions) of the data returned by firmwareHash() method. */
  virtual std::vector<int> firmwareHash_shape() const = 0;
  /** Method which returns the shape (dimensions) of the data returned by firmwareDesc() method. */
  virtual std::vector<int> firmwareDesc_shape() const = 0;
  /** Method which returns the shape (dimensions) of the data returned by asics() method. */
  virtual std::vector<int> asics_shape() const = 0;
};

/** @class Elem10kaConfigV1

  
*/


class Elem10kaConfigV1 {
public:
  enum { _numberOfAsicsPerRow = 2 };
  enum { _numberOfAsicsPerColumn = 2 };
  enum { _numberOfRowsPerAsic = 176 };
  enum { _numberOfReadableRowsPerAsic = 176 };
  enum { _numberOfPixelsPerAsicRow = 192 };
  enum { _calibrationRowCountPerASIC = 2 };
  enum { _environmentalRowCountPerASIC = 1 };
  virtual ~Elem10kaConfigV1();
  /** Mimic previous Epix Config interfaces */
  virtual uint32_t numberOfAsicsPerRow() const = 0;
  virtual uint32_t numberOfAsicsPerColumn() const = 0;
  virtual uint32_t numberOfRowsPerAsic() const = 0;
  virtual uint32_t numberOfReadableRowsPerAsic() const = 0;
  virtual uint32_t numberOfPixelsPerAsicRow() const = 0;
  virtual uint32_t calibrationRowCountPerASIC() const = 0;
  virtual uint32_t environmentalRowCountPerASIC() const = 0;
  /** read-only */
  virtual uint32_t carrierId0() const = 0;
  /** read-only */
  virtual uint32_t carrierId1() const = 0;
  virtual uint32_t asicMask() const = 0;
  virtual const Epix::Asic10kaConfigV1& asics(uint32_t i0) const = 0;
  virtual ndarray<const uint16_t, 2> asicPixelConfigArray() const = 0;
  virtual ndarray<const uint8_t, 2> calibPixelConfigArray() const = 0;
  /** Interface
Number of pixel rows in a readout unit */
  virtual uint32_t numberOfRows() const = 0;
  /** Number of readable pixel rows in a readout unit */
  virtual uint32_t numberOfReadableRows() const = 0;
  /** Number of pixel columns in a readout unit */
  virtual uint32_t numberOfColumns() const = 0;
  /** Number of calibration rows in a readout unit */
  virtual uint32_t numberOfCalibrationRows() const = 0;
  /** Number of rows in a readout unit */
  virtual uint32_t numberOfEnvironmentalRows() const = 0;
  /** Number of columns in a readout unit */
  virtual uint32_t numberOfAsics() const = 0;
  /** Method which returns the shape (dimensions) of the data returned by asics() method. */
  virtual std::vector<int> asics_shape() const = 0;
};

/** @class PgpEvrConfig

  
*/


class PgpEvrConfig {
public:
  virtual ~PgpEvrConfig();
  virtual uint16_t enable() const = 0;
  virtual uint8_t runCode() const = 0;
  virtual uint8_t daqCode() const = 0;
  virtual uint32_t runDelay() const = 0;
};

/** @class Ad9249Config

  
*/


class Ad9249Config {
public:
  virtual ~Ad9249Config();
  /** read-only */
  virtual uint32_t chipId() const = 0;
  virtual uint32_t devIndexMask() const = 0;
  virtual uint32_t devIndexMaskDcoFco() const = 0;
  virtual uint8_t extPwdnMode() const = 0;
  virtual uint8_t intPwdnMode() const = 0;
  virtual uint8_t chopMode() const = 0;
  virtual uint8_t dutyCycleStab() const = 0;
  virtual uint8_t outputInvert() const = 0;
  virtual uint8_t outputFormat() const = 0;
  virtual uint32_t clockDivide() const = 0;
  virtual uint32_t userTestMode() const = 0;
  virtual uint32_t outputTestMode() const = 0;
  virtual uint32_t offsetAdjust() const = 0;
  virtual ndarray<const uint32_t, 1> channelDelay() const = 0;
  virtual uint32_t frameDelay() const = 0;
};

/** @class Quad10kaConfigV1

  
*/


class Quad10kaConfigV1 {
public:
  virtual ~Quad10kaConfigV1();
  /** Global */
  virtual uint32_t baseClockFrequency() const = 0;
  virtual uint32_t enableAutomaticRunTrigger() const = 0;
  virtual uint32_t numberOf125MhzTicksPerRunTrigger() const = 0;
  /** AxiVersion (RO) */
  virtual uint32_t digitalCardId0() const = 0;
  virtual uint32_t digitalCardId1() const = 0;
  /** SystemRegs */
  virtual uint32_t dcdcEn() const = 0;
  virtual uint32_t asicAnaEn() const = 0;
  virtual uint32_t asicDigEn() const = 0;
  virtual uint32_t ddrVttEn() const = 0;
  virtual uint32_t trigSrcSel() const = 0;
  virtual uint32_t vguardDac() const = 0;
  /** AcqCore */
  virtual uint32_t acqToAsicR0Delay() const = 0;
  virtual uint32_t asicR0Width() const = 0;
  virtual uint32_t asicR0ToAsicAcq() const = 0;
  virtual uint32_t asicAcqWidth() const = 0;
  virtual uint32_t asicAcqLToPPmatL() const = 0;
  virtual uint32_t asicPPmatToReadout() const = 0;
  virtual uint32_t asicRoClkHalfT() const = 0;
  virtual uint8_t asicAcqForce() const = 0;
  virtual uint8_t asicR0Force() const = 0;
  virtual uint8_t asicPPmatForce() const = 0;
  virtual uint8_t asicSyncForce() const = 0;
  virtual uint8_t asicRoClkForce() const = 0;
  virtual uint8_t asicAcqValue() const = 0;
  virtual uint8_t asicR0Value() const = 0;
  virtual uint8_t asicPPmatValue() const = 0;
  virtual uint8_t asicSyncValue() const = 0;
  virtual uint8_t asicRoClkValue() const = 0;
  /** RdoutCore */
  virtual uint32_t adcPipelineDelay() const = 0;
  virtual uint32_t testData() const = 0;
  virtual uint8_t scopeEnable() const = 0;
  virtual uint8_t scopeTrigEdge() const = 0;
  virtual uint8_t scopeTrigChan() const = 0;
  virtual uint8_t scopeTrigMode() const = 0;
  virtual uint16_t scopeADCThreshold() const = 0;
  virtual uint16_t scopeTrigHoldoff() const = 0;
  virtual uint16_t scopeTrigOffset() const = 0;
  virtual uint16_t scopeTraceLength() const = 0;
  virtual uint16_t scopeADCsamplesToSkip() const = 0;
  virtual uint8_t scopeChanAwaveformSelect() const = 0;
  virtual uint8_t scopeChanBwaveformSelect() const = 0;
  virtual uint32_t scopeTrigDelay() const = 0;
  /** Ad9249ReadoutGroup [10]
Ad9249ConfigGroup [10] */
  virtual const Epix::Ad9249Config& adc(uint32_t i0) const = 0;
  /** AdcTester */
  virtual uint32_t testChannel() const = 0;
  virtual uint32_t testDataMask() const = 0;
  virtual uint32_t testPattern() const = 0;
  virtual uint32_t testSamples() const = 0;
  virtual uint32_t testTimeout() const = 0;
  virtual uint32_t testRequest() const = 0;
  /** Method which returns the shape (dimensions) of the data returned by adc() method. */
  virtual std::vector<int> adc_shape() const = 0;
};

/** @class Quad10kaConfigV2

  
*/


class Quad10kaConfigV2 {
public:
  enum { FirmwareHashMax = 64 };
  enum { FirmwareDescMax = 256 };
  virtual ~Quad10kaConfigV2();
  /** Global */
  virtual uint32_t baseClockFrequency() const = 0;
  virtual uint32_t enableAutomaticRunTrigger() const = 0;
  virtual uint32_t numberOf125MhzTicksPerRunTrigger() const = 0;
  /** AxiVersion (RO) */
  virtual uint32_t firmwareVersion() const = 0;
  virtual uint32_t digitalCardId0() const = 0;
  virtual uint32_t digitalCardId1() const = 0;
  virtual const char* firmwareHash() const = 0;
  virtual const char* firmwareDesc() const = 0;
  /** SystemRegs */
  virtual uint32_t dcdcEn() const = 0;
  virtual uint32_t asicAnaEn() const = 0;
  virtual uint32_t asicDigEn() const = 0;
  virtual uint32_t ddrVttEn() const = 0;
  virtual uint32_t trigSrcSel() const = 0;
  virtual uint32_t vguardDac() const = 0;
  /** AcqCore */
  virtual uint32_t acqToAsicR0Delay() const = 0;
  virtual uint32_t asicR0Width() const = 0;
  virtual uint32_t asicR0ToAsicAcq() const = 0;
  virtual uint32_t asicAcqWidth() const = 0;
  virtual uint32_t asicAcqLToPPmatL() const = 0;
  virtual uint32_t asicPPmatToReadout() const = 0;
  virtual uint32_t asicRoClkHalfT() const = 0;
  virtual uint8_t asicAcqForce() const = 0;
  virtual uint8_t asicR0Force() const = 0;
  virtual uint8_t asicPPmatForce() const = 0;
  virtual uint8_t asicSyncForce() const = 0;
  virtual uint8_t asicRoClkForce() const = 0;
  virtual uint8_t asicAcqValue() const = 0;
  virtual uint8_t asicR0Value() const = 0;
  virtual uint8_t asicPPmatValue() const = 0;
  virtual uint8_t asicSyncValue() const = 0;
  virtual uint8_t asicRoClkValue() const = 0;
  virtual uint32_t dummyAcqEn() const = 0;
  virtual uint32_t asicSyncInjEn() const = 0;
  virtual uint32_t asicSyncInjDly() const = 0;
  /** RdoutCore */
  virtual uint32_t adcPipelineDelay() const = 0;
  virtual uint32_t testData() const = 0;
  virtual uint32_t overSampleEn() const = 0;
  virtual uint32_t overSampleSize() const = 0;
  virtual uint8_t scopeEnable() const = 0;
  virtual uint8_t scopeTrigEdge() const = 0;
  virtual uint8_t scopeTrigChan() const = 0;
  virtual uint8_t scopeTrigMode() const = 0;
  virtual uint16_t scopeADCThreshold() const = 0;
  virtual uint16_t scopeTrigHoldoff() const = 0;
  virtual uint16_t scopeTrigOffset() const = 0;
  virtual uint16_t scopeTraceLength() const = 0;
  virtual uint16_t scopeADCsamplesToSkip() const = 0;
  virtual uint8_t scopeChanAwaveformSelect() const = 0;
  virtual uint8_t scopeChanBwaveformSelect() const = 0;
  virtual uint32_t scopeTrigDelay() const = 0;
  /** Ad9249ReadoutGroup [10]
Ad9249ConfigGroup [10] */
  virtual const Epix::Ad9249Config& adc(uint32_t i0) const = 0;
  /** AdcTester */
  virtual uint32_t testChannel() const = 0;
  virtual uint32_t testDataMask() const = 0;
  virtual uint32_t testPattern() const = 0;
  virtual uint32_t testSamples() const = 0;
  virtual uint32_t testTimeout() const = 0;
  virtual uint32_t testRequest() const = 0;
  /** Method which returns the shape (dimensions) of the data returned by firmwareHash() method. */
  virtual std::vector<int> firmwareHash_shape() const = 0;
  /** Method which returns the shape (dimensions) of the data returned by firmwareDesc() method. */
  virtual std::vector<int> firmwareDesc_shape() const = 0;
  /** Method which returns the shape (dimensions) of the data returned by adc() method. */
  virtual std::vector<int> adc_shape() const = 0;
};

/** @class Config10kaQuadV1

  
*/


class Config10kaQuadV1 {
public:
  enum { TypeId = Pds::TypeId::Id_Epix10kaQuadConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  enum { _numberOfElements = 4 };
  virtual ~Config10kaQuadV1();
  virtual uint32_t numberOfElements() const = 0;
  virtual uint32_t numberOfRows() const = 0;
  virtual uint32_t numberOfReadableRows() const = 0;
  virtual uint32_t numberOfColumns() const = 0;
  virtual uint32_t numberOfCalibrationRows() const = 0;
  virtual uint32_t numberOfEnvironmentalRows() const = 0;
  virtual uint32_t numberOfAsics() const = 0;
  virtual const Epix::PgpEvrConfig& evr() const = 0;
  virtual const Epix::Quad10kaConfigV1& quad() const = 0;
  virtual const Epix::Elem10kaConfigV1& elemCfg(uint32_t i0) const = 0;
  /** Method which returns the shape (dimensions) of the data returned by elemCfg() method. */
  virtual std::vector<int> elemCfg_shape() const = 0;
};

/** @class Config10kaQuadV2

  
*/


class Config10kaQuadV2 {
public:
  enum { TypeId = Pds::TypeId::Id_Epix10kaQuadConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 2 /**< XTC type version number */ };
  enum { _numberOfElements = 4 };
  virtual ~Config10kaQuadV2();
  virtual uint32_t numberOfElements() const = 0;
  virtual uint32_t numberOfRows() const = 0;
  virtual uint32_t numberOfReadableRows() const = 0;
  virtual uint32_t numberOfColumns() const = 0;
  virtual uint32_t numberOfCalibrationRows() const = 0;
  virtual uint32_t numberOfEnvironmentalRows() const = 0;
  virtual uint32_t numberOfAsics() const = 0;
  virtual const Epix::PgpEvrConfig& evr() const = 0;
  virtual const Epix::Quad10kaConfigV2& quad() const = 0;
  virtual const Epix::Elem10kaConfigV1& elemCfg(uint32_t i0) const = 0;
  /** Method which returns the shape (dimensions) of the data returned by elemCfg() method. */
  virtual std::vector<int> elemCfg_shape() const = 0;
};

/** @class Config10ka2MV1

  
*/


class Config10ka2MV1 {
public:
  enum { TypeId = Pds::TypeId::Id_Epix10ka2MConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  enum { _numberOfElements = 16 };
  virtual ~Config10ka2MV1();
  virtual uint32_t numberOfElements() const = 0;
  virtual uint32_t numberOfRows() const = 0;
  virtual uint32_t numberOfReadableRows() const = 0;
  virtual uint32_t numberOfColumns() const = 0;
  virtual uint32_t numberOfCalibrationRows() const = 0;
  virtual uint32_t numberOfEnvironmentalRows() const = 0;
  virtual uint32_t numberOfAsics() const = 0;
  virtual const Epix::PgpEvrConfig& evr() const = 0;
  virtual const Epix::Quad10kaConfigV1& quad(uint32_t i0) const = 0;
  virtual const Epix::Elem10kaConfigV1& elemCfg(uint32_t i0) const = 0;
  /** Method which returns the shape (dimensions) of the data returned by quad() method. */
  virtual std::vector<int> quad_shape() const = 0;
  /** Method which returns the shape (dimensions) of the data returned by elemCfg() method. */
  virtual std::vector<int> elemCfg_shape() const = 0;
};

/** @class Config10ka2MV2

  
*/


class Config10ka2MV2 {
public:
  enum { TypeId = Pds::TypeId::Id_Epix10ka2MConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 2 /**< XTC type version number */ };
  enum { _numberOfElements = 16 };
  virtual ~Config10ka2MV2();
  virtual uint32_t numberOfElements() const = 0;
  virtual uint32_t numberOfRows() const = 0;
  virtual uint32_t numberOfReadableRows() const = 0;
  virtual uint32_t numberOfColumns() const = 0;
  virtual uint32_t numberOfCalibrationRows() const = 0;
  virtual uint32_t numberOfEnvironmentalRows() const = 0;
  virtual uint32_t numberOfAsics() const = 0;
  virtual const Epix::PgpEvrConfig& evr() const = 0;
  virtual const Epix::Quad10kaConfigV2& quad(uint32_t i0) const = 0;
  virtual const Epix::Elem10kaConfigV1& elemCfg(uint32_t i0) const = 0;
  /** Method which returns the shape (dimensions) of the data returned by quad() method. */
  virtual std::vector<int> quad_shape() const = 0;
  /** Method which returns the shape (dimensions) of the data returned by elemCfg() method. */
  virtual std::vector<int> elemCfg_shape() const = 0;
};

/** @class ElementV1

  
*/

class ConfigV1;
class Config10KV1;

class ElementV1 {
public:
  enum { TypeId = Pds::TypeId::Id_EpixElement /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  virtual ~ElementV1();
  virtual uint8_t vc() const = 0;
  virtual uint8_t lane() const = 0;
  virtual uint16_t acqCount() const = 0;
  virtual uint32_t frameNumber() const = 0;
  virtual uint32_t ticks() const = 0;
  virtual uint32_t fiducials() const = 0;
  virtual ndarray<const uint16_t, 2> frame() const = 0;
  virtual ndarray<const uint16_t, 2> excludedRows() const = 0;
  virtual ndarray<const uint16_t, 1> temperatures() const = 0;
  virtual uint32_t lastWord() const = 0;
};

/** @class ElementV2

  
*/

class Config100aV1;
class Config100aV2;

class ElementV2 {
public:
  enum { TypeId = Pds::TypeId::Id_EpixElement /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 2 /**< XTC type version number */ };
  virtual ~ElementV2();
  virtual uint8_t vc() const = 0;
  virtual uint8_t lane() const = 0;
  virtual uint16_t acqCount() const = 0;
  virtual uint32_t frameNumber() const = 0;
  virtual uint32_t ticks() const = 0;
  virtual uint32_t fiducials() const = 0;
  virtual ndarray<const uint16_t, 2> frame() const = 0;
  virtual ndarray<const uint16_t, 2> calibrationRows() const = 0;
  virtual ndarray<const uint16_t, 2> environmentalRows() const = 0;
  virtual ndarray<const uint16_t, 1> temperatures() const = 0;
  virtual uint32_t lastWord() const = 0;
};

/** @class ElementV3

  
*/

class Config100aV1;
class Config100aV2;
class Config10kaV1;
class Config10kaV2;

class ElementV3 {
public:
  enum { TypeId = Pds::TypeId::Id_EpixElement /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 3 /**< XTC type version number */ };
  virtual ~ElementV3();
  virtual uint8_t vc() const = 0;
  virtual uint8_t lane() const = 0;
  virtual uint16_t acqCount() const = 0;
  virtual uint32_t frameNumber() const = 0;
  virtual uint32_t ticks() const = 0;
  virtual uint32_t fiducials() const = 0;
  virtual ndarray<const uint16_t, 2> frame() const = 0;
  virtual ndarray<const uint16_t, 2> calibrationRows() const = 0;
  virtual ndarray<const uint32_t, 2> environmentalRows() const = 0;
  virtual ndarray<const uint16_t, 1> temperatures() const = 0;
  virtual uint32_t lastWord() const = 0;
};

/** @class ArrayV1

  
*/

class Config10ka2MV1;
class Config10kaQuadV1;
class Config10ka2MV2;
class Config10kaQuadV2;

class ArrayV1 {
public:
  enum { TypeId = Pds::TypeId::Id_Epix10kaArray /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  virtual ~ArrayV1();
  virtual uint32_t frameNumber() const = 0;
  virtual ndarray<const uint16_t, 3> frame() const = 0;
  virtual ndarray<const uint16_t, 3> calibrationRows() const = 0;
  virtual ndarray<const uint32_t, 3> environmentalRows() const = 0;
  virtual ndarray<const uint16_t, 1> temperatures() const = 0;
};
} // namespace Epix
} // namespace Psana
#endif // PSANA_EPIX_DDL_H
