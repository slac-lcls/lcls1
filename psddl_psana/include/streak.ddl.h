#ifndef PSANA_STREAK_DDL_H
#define PSANA_STREAK_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include <vector>
#include <iosfwd>
#include <cstring>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
namespace Psana {
namespace Streak {

/** @class ConfigV1

  
*/


class ConfigV1 {
public:
  enum { TypeId = Pds::TypeId::Id_StreakConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  enum { Row_Pixels = 1024 };
  enum { Column_Pixels = 1344 };
  enum { NumCalibConstants = 3 };
  enum DeviceMode {
    Focus = 0,
    Operate = 1,
  };
  enum ShutterMode {
    Closed = 0,
    Open = 1,
  };
  enum GateMode {
    Normal = 0,
    Gate = 1,
    OpenFixed = 2,
  };
  enum TriggerMode {
    Single = 0,
    Continuous = 1,
  };
  enum CalibScale {
    Nanoseconds = 0,
    Microseconds = 1,
    Milliseconds = 2,
    Seconds = 3,
  };
  virtual ~ConfigV1();
  /** The time range of the camera (in ps). */
  virtual uint64_t timeRange() const = 0;
  /** The trigger mode of the camera. */
  virtual Streak::ConfigV1::DeviceMode mode() const = 0;
  /** The gate mode of the camera. */
  virtual Streak::ConfigV1::GateMode gate() const = 0;
  /** Camera II-gain value. */
  virtual uint32_t gain() const = 0;
  /** The shutter configuration of the camera. */
  virtual Streak::ConfigV1::ShutterMode shutter() const = 0;
  /** The trigger mode of the camera. */
  virtual Streak::ConfigV1::TriggerMode triggerMode() const = 0;
  /** The focus mode time out in minutes. */
  virtual uint32_t focusTimeOver() const = 0;
  /** The configured exposure time of the camera in seconds. */
  virtual double exposureTime() const = 0;
  /** Time calibration scale (ns, us, ms, or s). */
  virtual Streak::ConfigV1::CalibScale calibScale() const = 0;
  /** Time calibration constants (c0 + c1 * n + c2 * n * n). */
  virtual ndarray<const double, 1> calib() const = 0;
  /** Factor for converting the time calibration value to seconds. */
  virtual double calibScaleFactor() const = 0;
  /** The X-axis pixel to time mapping in units set in calibScale. */
  virtual ndarray<const double, 1> calibTimes() const = 0;
  /** The X-axis pixel to time mapping in seconds. */
  virtual ndarray<const double, 1> calibTimesInSeconds() const = 0;
};
std::ostream& operator<<(std::ostream& str, Streak::ConfigV1::DeviceMode enval);
std::ostream& operator<<(std::ostream& str, Streak::ConfigV1::ShutterMode enval);
std::ostream& operator<<(std::ostream& str, Streak::ConfigV1::GateMode enval);
std::ostream& operator<<(std::ostream& str, Streak::ConfigV1::TriggerMode enval);
std::ostream& operator<<(std::ostream& str, Streak::ConfigV1::CalibScale enval);
} // namespace Streak
} // namespace Psana
#endif // PSANA_STREAK_DDL_H
