#ifndef PSANA_PIXIS_DDL_H
#define PSANA_PIXIS_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include <vector>
#include <iosfwd>
#include <cstring>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
namespace Psana {
namespace Pixis {

/** @class ConfigV1

  
*/


class ConfigV1 {
public:
  enum { TypeId = Pds::TypeId::Id_PixisConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  enum GainMode {
    Low = 1,
    Medium = 2,
    High = 3,
  };
  enum AdcMode {
    LowNoise = 1,
    HighCapacity = 2,
  };
  enum TriggerMode {
    Software = 0,
    External = 1,
    ExternalWithCleaning = 2,
  };
  virtual ~ConfigV1();
  virtual uint32_t width() const = 0;
  virtual uint32_t height() const = 0;
  virtual uint32_t orgX() const = 0;
  virtual uint32_t orgY() const = 0;
  virtual uint32_t binX() const = 0;
  virtual uint32_t binY() const = 0;
  /** Detector exposure time in seconds. */
  virtual float exposureTime() const = 0;
  /** Detector cooler setpoint temperature in degrees Celsius. */
  virtual float coolingTemp() const = 0;
  /** Detector ADC digitization speed in MHz. */
  virtual float readoutSpeed() const = 0;
  /** Enum of the available gain settings of the detector. */
  virtual Pixis::ConfigV1::GainMode gainMode() const = 0;
  /** Enum of the available ADC Quality settings of the detector. */
  virtual Pixis::ConfigV1::AdcMode adcMode() const = 0;
  /** Trigger setting for the detector. */
  virtual Pixis::ConfigV1::TriggerMode triggerMode() const = 0;
  /** Detector active width in columns. */
  virtual uint32_t activeWidth() const = 0;
  /** Detector active height in rows. */
  virtual uint32_t activeHeight() const = 0;
  /** Number of inactive rows at the top of the sensor. */
  virtual uint32_t activeTopMargin() const = 0;
  /** Number of inactive rows at the top of the sensor. */
  virtual uint32_t activeBottomMargin() const = 0;
  /** Number of inactive columns at the left of the sensor. */
  virtual uint32_t activeLeftMargin() const = 0;
  /** Number of inactive columns at the right of the sensor. */
  virtual uint32_t activeRightMargin() const = 0;
  /** The number of clean cycles to run before acquisition begins. */
  virtual uint32_t cleanCycleCount() const = 0;
  /** The number of rows in a clean cycle. */
  virtual uint32_t cleanCycleHeight() const = 0;
  /** The final height rows for exponential decomposition cleaning. */
  virtual uint32_t cleanFinalHeight() const = 0;
  /** The final height iterations for exponential decomposition cleaning. */
  virtual uint32_t cleanFinalHeightCount() const = 0;
  virtual uint32_t maskedHeight() const = 0;
  virtual uint32_t kineticHeight() const = 0;
  /** Detector vertical shift speed. */
  virtual float vsSpeed() const = 0;
  virtual int16_t infoReportInterval() const = 0;
  virtual uint16_t exposureEventCode() const = 0;
  virtual uint32_t numIntegrationShots() const = 0;
  /** Total size in bytes of the Frame object */
  virtual uint32_t frameSize() const = 0;
  /** calculate frame X size in pixels based on the current ROI and binning settings */
  virtual uint32_t numPixelsX() const = 0;
  /** calculate frame Y size in pixels based on the current ROI and binning settings */
  virtual uint32_t numPixelsY() const = 0;
  /** calculate total frame size in pixels based on the current ROI and binning settings */
  virtual uint32_t numPixels() const = 0;
};
std::ostream& operator<<(std::ostream& str, Pixis::ConfigV1::GainMode enval);
std::ostream& operator<<(std::ostream& str, Pixis::ConfigV1::AdcMode enval);
std::ostream& operator<<(std::ostream& str, Pixis::ConfigV1::TriggerMode enval);

/** @class FrameV1

  
*/

class ConfigV1;

class FrameV1 {
public:
  enum { TypeId = Pds::TypeId::Id_PixisFrame /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  virtual ~FrameV1();
  virtual uint32_t shotIdStart() const = 0;
  virtual float readoutTime() const = 0;
  virtual float temperature() const = 0;
  virtual ndarray<const uint16_t, 2> data() const = 0;
};
} // namespace Pixis
} // namespace Psana
#endif // PSANA_PIXIS_DDL_H
