#ifndef PSANA_ZYLA_DDL_H
#define PSANA_ZYLA_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include <vector>
#include <iosfwd>
#include <cstring>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/istar.ddl.h"
namespace Psana {
namespace Zyla {

/** @class ConfigV1

  
*/


class ConfigV1 {
public:
  enum { TypeId = Pds::TypeId::Id_ZylaConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  enum { STR_LEN_MAX = 64 };
  enum ATBool {
    False = 0,
    True = 1,
  };
  enum ShutteringMode {
    Rolling = 0,
    Global = 1,
  };
  enum FanSpeed {
    Off = 0,
    Low = 1,
    On = 2,
  };
  enum ReadoutRate {
    Rate280MHz = 0,
    Rate200MHz = 1,
    Rate100MHz = 2,
    Rate10MHz = 3,
  };
  enum TriggerMode {
    Internal = 0,
    ExternalLevelTransition = 1,
    ExternalStart = 2,
    ExternalExposure = 3,
    Software = 4,
    Advanced = 5,
    External = 6,
  };
  enum GainMode {
    HighWellCap12Bit = 0,
    LowNoise12Bit = 1,
    LowNoiseHighWellCap16Bit = 2,
  };
  enum CoolingSetpoint {
    Temp_0C = 0,
    Temp_Neg5C = 1,
    Temp_Neg10C = 2,
    Temp_Neg15C = 3,
    Temp_Neg20C = 4,
    Temp_Neg25C = 5,
    Temp_Neg30C = 6,
    Temp_Neg35C = 7,
    Temp_Neg40C = 8,
  };
  virtual ~ConfigV1();
  virtual Zyla::ConfigV1::ATBool cooling() const = 0;
  virtual Zyla::ConfigV1::ATBool overlap() const = 0;
  virtual Zyla::ConfigV1::ATBool noiseFilter() const = 0;
  virtual Zyla::ConfigV1::ATBool blemishCorrection() const = 0;
  virtual Zyla::ConfigV1::ShutteringMode shutter() const = 0;
  virtual Zyla::ConfigV1::FanSpeed fanSpeed() const = 0;
  virtual Zyla::ConfigV1::ReadoutRate readoutRate() const = 0;
  virtual Zyla::ConfigV1::TriggerMode triggerMode() const = 0;
  virtual Zyla::ConfigV1::GainMode gainMode() const = 0;
  virtual Zyla::ConfigV1::CoolingSetpoint setpoint() const = 0;
  virtual uint32_t width() const = 0;
  virtual uint32_t height() const = 0;
  virtual uint32_t orgX() const = 0;
  virtual uint32_t orgY() const = 0;
  virtual uint32_t binX() const = 0;
  virtual uint32_t binY() const = 0;
  virtual double exposureTime() const = 0;
  virtual double triggerDelay() const = 0;
  /** Total size in bytes of the Frame object */
  virtual uint32_t frameSize() const = 0;
  /** calculate frame X size in pixels based on the current ROI and binning settings */
  virtual uint32_t numPixelsX() const = 0;
  /** calculate frame Y size in pixels based on the current ROI and binning settings */
  virtual uint32_t numPixelsY() const = 0;
  /** calculate total frame size in pixels based on the current ROI and binning settings */
  virtual uint32_t numPixels() const = 0;
};
std::ostream& operator<<(std::ostream& str, Zyla::ConfigV1::ATBool enval);
std::ostream& operator<<(std::ostream& str, Zyla::ConfigV1::ShutteringMode enval);
std::ostream& operator<<(std::ostream& str, Zyla::ConfigV1::FanSpeed enval);
std::ostream& operator<<(std::ostream& str, Zyla::ConfigV1::ReadoutRate enval);
std::ostream& operator<<(std::ostream& str, Zyla::ConfigV1::TriggerMode enval);
std::ostream& operator<<(std::ostream& str, Zyla::ConfigV1::GainMode enval);
std::ostream& operator<<(std::ostream& str, Zyla::ConfigV1::CoolingSetpoint enval);

/** @class FrameV1

  
*/

class ConfigV1;

class FrameV1 {
public:
  enum { TypeId = Pds::TypeId::Id_ZylaFrame /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  virtual ~FrameV1();
  /** The internal camera FPGA clock timestamp for the frame. */
  virtual uint64_t timestamp() const = 0;
  virtual ndarray<const uint16_t, 2> data() const = 0;
};
} // namespace Zyla
} // namespace Psana
#endif // PSANA_ZYLA_DDL_H
