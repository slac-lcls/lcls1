#ifndef PSANA_VIMBA_DDL_H
#define PSANA_VIMBA_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include <vector>
#include <iosfwd>
#include <cstring>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
namespace Psana {
namespace Vimba {

/** @class AlviumConfigV1

  
*/


class AlviumConfigV1 {
public:
  enum { TypeId = Pds::TypeId::Id_AlviumConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  enum { DESC_CHAR_MAX = 48 };
  enum VmbBool {
    False = 0,
    True = 1,
  };
  enum RoiMode {
    Off = 0,
    On = 1,
    Centered = 2,
  };
  enum TriggerMode {
    FreeRun = 0,
    External = 1,
    Software = 2,
  };
  enum PixelMode {
    Mono8 = 0,
    Mono10 = 1,
    Mono10p = 2,
    Mono12 = 3,
    Mono12p = 4,
  };
  enum ImgCorrectionType {
    DefectPixelCorrection = 0,
    FixedPatternNoiseCorrection = 1,
  };
  enum ImgCorrectionSet {
    Preset = 0,
    User = 1,
  };
  virtual ~AlviumConfigV1();
  /** Reverse the image along the x-axis of the image. */
  virtual Vimba::AlviumConfigV1::VmbBool reverseX() const = 0;
  /** Reverse the image along the y-axis of the image. */
  virtual Vimba::AlviumConfigV1::VmbBool reverseY() const = 0;
  /** Enable contrast enhancement features. */
  virtual Vimba::AlviumConfigV1::VmbBool contrastEnable() const = 0;
  /** Enable image correction feature. */
  virtual Vimba::AlviumConfigV1::VmbBool correctionEnable() const = 0;
  /** Enable image roi. */
  virtual Vimba::AlviumConfigV1::RoiMode roiEnable() const = 0;
  /** Sets the type of image correction to use. */
  virtual Vimba::AlviumConfigV1::ImgCorrectionType correctionType() const = 0;
  /** Sets which image correction date to use. */
  virtual Vimba::AlviumConfigV1::ImgCorrectionSet correctionSet() const = 0;
  /** Sets the pixel bit depth. */
  virtual Vimba::AlviumConfigV1::PixelMode pixelMode() const = 0;
  /** Sets the trigger mode. */
  virtual Vimba::AlviumConfigV1::TriggerMode triggerMode() const = 0;
  virtual uint32_t width() const = 0;
  virtual uint32_t height() const = 0;
  virtual uint32_t offsetX() const = 0;
  virtual uint32_t offsetY() const = 0;
  virtual uint32_t sensorWidth() const = 0;
  virtual uint32_t sensorHeight() const = 0;
  virtual uint32_t contrastDarkLimit() const = 0;
  virtual uint32_t contrastBrightLimit() const = 0;
  virtual uint32_t contrastShape() const = 0;
  virtual double exposureTime() const = 0;
  virtual double blackLevel() const = 0;
  virtual double gain() const = 0;
  virtual double gamma() const = 0;
  /** The name of the manufacturer of the camera. */
  virtual const char* manufacturer() const = 0;
  /** The model family of the camera. */
  virtual const char* family() const = 0;
  /** The model name of the camera. */
  virtual const char* model() const = 0;
  /** The manufacturer id of the camera. */
  virtual const char* manufacturerId() const = 0;
  /** The hardware version number of the camera. */
  virtual const char* version() const = 0;
  /** The serial number of the camera. */
  virtual const char* serialNumber() const = 0;
  /** The firmware id of the camera. */
  virtual const char* firmwareId() const = 0;
  /** The firmware version of the camera. */
  virtual const char* firmwareVersion() const = 0;
  /** Number of bits per pixel. */
  virtual uint32_t depth() const = 0;
  /** Total size in bytes of the Frame object */
  virtual uint32_t frameSize() const = 0;
  /** calculate frame X size in pixels based on the current ROI */
  virtual uint32_t numPixelsX() const = 0;
  /** calculate frame Y size in pixels based on the current ROI */
  virtual uint32_t numPixelsY() const = 0;
  /** calculate total frame size in pixels based on the current ROI and binning settings */
  virtual uint32_t numPixels() const = 0;
};
std::ostream& operator<<(std::ostream& str, Vimba::AlviumConfigV1::VmbBool enval);
std::ostream& operator<<(std::ostream& str, Vimba::AlviumConfigV1::RoiMode enval);
std::ostream& operator<<(std::ostream& str, Vimba::AlviumConfigV1::TriggerMode enval);
std::ostream& operator<<(std::ostream& str, Vimba::AlviumConfigV1::PixelMode enval);
std::ostream& operator<<(std::ostream& str, Vimba::AlviumConfigV1::ImgCorrectionType enval);
std::ostream& operator<<(std::ostream& str, Vimba::AlviumConfigV1::ImgCorrectionSet enval);

/** @class FrameV1

  
*/

class AlviumConfigV1;

class FrameV1 {
public:
  enum { TypeId = Pds::TypeId::Id_VimbaFrame /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  virtual ~FrameV1();
  /** The internal frame id from the camera. */
  virtual uint64_t frameid() const = 0;
  /** The internal camera FPGA clock timestamp for the frame. */
  virtual uint64_t timestamp() const = 0;
  virtual ndarray<const uint16_t, 2> data() const = 0;
};
} // namespace Vimba
} // namespace Psana
#endif // PSANA_VIMBA_DDL_H
