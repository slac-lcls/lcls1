
// *** Do not edit this file, it is auto-generated ***

#include <cstddef>
#include "psddl_psana/istar.ddl.h"
#include <iostream>
namespace Psana {
namespace iStar {

ConfigV1::~ConfigV1() {}

std::ostream& operator<<(std::ostream& str, iStar::ConfigV1::ATBool enval) {
  const char* val;
  switch (enval) {
  case iStar::ConfigV1::False:
    val = "False";
    break;
  case iStar::ConfigV1::True:
    val = "True";
    break;
  default:
    return str << "ATBool(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, iStar::ConfigV1::FanSpeed enval) {
  const char* val;
  switch (enval) {
  case iStar::ConfigV1::Off:
    val = "Off";
    break;
  case iStar::ConfigV1::On:
    val = "On";
    break;
  default:
    return str << "FanSpeed(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, iStar::ConfigV1::ReadoutRate enval) {
  const char* val;
  switch (enval) {
  case iStar::ConfigV1::Rate280MHz:
    val = "Rate280MHz";
    break;
  case iStar::ConfigV1::Rate100MHz:
    val = "Rate100MHz";
    break;
  default:
    return str << "ReadoutRate(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, iStar::ConfigV1::TriggerMode enval) {
  const char* val;
  switch (enval) {
  case iStar::ConfigV1::Internal:
    val = "Internal";
    break;
  case iStar::ConfigV1::ExternalLevelTransition:
    val = "ExternalLevelTransition";
    break;
  case iStar::ConfigV1::ExternalStart:
    val = "ExternalStart";
    break;
  case iStar::ConfigV1::ExternalExposure:
    val = "ExternalExposure";
    break;
  case iStar::ConfigV1::Software:
    val = "Software";
    break;
  case iStar::ConfigV1::Advanced:
    val = "Advanced";
    break;
  case iStar::ConfigV1::External:
    val = "External";
    break;
  default:
    return str << "TriggerMode(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, iStar::ConfigV1::GainMode enval) {
  const char* val;
  switch (enval) {
  case iStar::ConfigV1::HighWellCap12Bit:
    val = "HighWellCap12Bit";
    break;
  case iStar::ConfigV1::LowNoise12Bit:
    val = "LowNoise12Bit";
    break;
  case iStar::ConfigV1::LowNoiseHighWellCap16Bit:
    val = "LowNoiseHighWellCap16Bit";
    break;
  default:
    return str << "GainMode(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, iStar::ConfigV1::GateMode enval) {
  const char* val;
  switch (enval) {
  case iStar::ConfigV1::CWOn:
    val = "CWOn";
    break;
  case iStar::ConfigV1::CWOff:
    val = "CWOff";
    break;
  case iStar::ConfigV1::FireOnly:
    val = "FireOnly";
    break;
  case iStar::ConfigV1::GateOnly:
    val = "GateOnly";
    break;
  case iStar::ConfigV1::FireAndGate:
    val = "FireAndGate";
    break;
  case iStar::ConfigV1::DDG:
    val = "DDG";
    break;
  default:
    return str << "GateMode(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, iStar::ConfigV1::InsertionDelay enval) {
  const char* val;
  switch (enval) {
  case iStar::ConfigV1::Normal:
    val = "Normal";
    break;
  case iStar::ConfigV1::Fast:
    val = "Fast";
    break;
  default:
    return str << "InsertionDelay(" << int(enval) << ")";
  }
  return str << val;
}
} // namespace iStar
} // namespace Psana
