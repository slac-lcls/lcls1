from __future__ import print_function
#!/bin/env scons
#===============================================================================
#
# Main SCons script for SIT release building
#
# $Id$
#
#===============================================================================

import os
import sys
from pprint import *
from os.path import join as pjoin

########## start SConstruct script ###############
cwd = os.getcwd()

def get_conda_env_path(fail_if_not_conda=True):
    '''conda used to use CONDA_ENV_PATH, and now it is CONDA_PREFIX,
    would be good to switch to conda_api for this
    '''
    if 'PREFIX' in os.environ:
        # use this for the case where conda build has both build/host
        # envs.  PREFIX seems to point to the host env.
        return os.environ['PREFIX']
    if 'CONDA_PREFIX' in os.environ:
        return os.environ['CONDA_PREFIX']
    if 'CONDA_ENV_PATH' in os.environ:
        return os.environ['CONDA_ENV_PATH']
    print("Neither CONDA_PREFIX nor CONDA_ENV_PATH defined. It does not look like a conda environment is active.", file=sys.stderr)
    if fail_if_not_conda:
        Exit(2)
    else:
        return None

#   check that all required envvars are defined
for envVar in ['SIT_ARCH', 'SIT_RELEASE']:
    if os.environ.get(envVar, None) is None:
        print("Environment variable %s is not defined" % envVar, file=sys.stderr)
        Exit(2)

if 'SIT_USE_CONDA' in os.environ:
    conda_env_path = get_conda_env_path() # will exit if can't find it
    path_dirs = os.environ.get('PATH','').split(os.path.pathsep)
    #if len(path_dirs)==0 or os.path.join(conda_env_path, 'bin') not in path_dirs[0:2]:
    #    print("SIT_USE_CONDA defined but %s/bin is not at the first or second plath in the PATH" % conda_env_path, file=sys.stderr)
    #    Exit(2)
else:
    for envVar in ['SIT_ROOT']:
        if os.environ.get(envVar, None) is None:
            print("Environment variable %s is not defined" % envVar, file=sys.stderr)
            Exit(2)


sit_arch = os.environ["SIT_ARCH"]

# check .sit_release
try:
    test_rel = open('.sit_release').read().strip()
except IOError:
    print("File .sit_release does not exist or unreadable.", file=sys.stderr)
    print("Trying to run scons outside release directory?", file=sys.stderr)
    Exit(2)
#if os.environ["SIT_RELEASE"] != test_rel:
#    print("* SIT_RELEASE conflicts with release directory", file=sys.stderr)
#    print("* SIT_RELEASE =", os.environ["SIT_RELEASE"], file=sys.stderr)
#    print("* .sit_release =", test_rel, file=sys.stderr)
#    print("* Please run sit_setup or relupgrade", file=sys.stderr)
#    Exit(2)

# check conda
if os.environ.get('SIT_USE_CONDA', None):
    try:
        conda_rel = open('.sit_conda_env').read().strip()
    except IOError:
        print("SIT_USE_CONDA is true, but file .sit_conda_env " \
            "does not exist or unreadable.", file=sys.stderr)
        print("building scons in older style release? " \
            "unset SIT_USE_CONDA", file=sys.stderr)
        Exit(2)
    if get_conda_env_path() != conda_rel:
        print("* conda_env_path conflicts with release directory. %s %s"%(get_conda_env_path(),conda_rel), file=sys.stderr)
        print("* They must agree for building.", file=sys.stderr)
        print("* Please run condarel --relupgrade" \
            " (for now, edit .sit_conda_env file)", file=sys.stderr)
        Exit(2)


#
# Before doing any other imports link the python files from
# SConsTools/src/*.py and SConsTools/src/tools/*.py to arch/$SIT_ARCH/python/SConsTools/...
#

for dirs in [("SConsTools/src", "SConsTools"), ("SConsTools/src/tools", "SConsTools/tools")]:
    if os.path.isdir(dirs[0]):

        # python tends to remember empty directories, reset its cache
        sys.path_importer_cache = {}

        # list of python files in source directory
        pys = set(f for f in os.listdir(dirs[0]) if os.path.splitext(f)[1] == ".py")

        # list of links in arch/$SIT_ARCH/python/SConsTools
        d = pjoin("arch", sit_arch, "python", dirs[1])
        if not os.path.isdir(d): os.makedirs(d)
        links = set(f for f in os.listdir(d) if os.path.splitext(f)[1] == ".py")

        # remove extra links
        for f in links - pys:
            try:
                os.remove(pjoin(d, f))
            except Exception as e:
                print("Failed to remove file " + pjoin(d, f), file=sys.stderr)
                print(str(e), file=sys.stderr)
                print("Check your permissions and AFS token", file=sys.stderr)
                Exit(2)

        # add missing links (make links relative)
        for f in pys - links:
            reldst = '/'.join(['..'] * len(d.split('/')))
            os.symlink(pjoin(reldst, dirs[0], f), pjoin(d, f))

        init = pjoin(d, "__init__.py")
        if not os.path.isfile(init):
            open(init, 'w').close()
        del init

#
# Now can import rest of the stuff
#
from SConsTools.trace import *
from SConsTools.scons_functions import *
from SConsTools.scons_env import buildEnv
from SConsTools.standardSConscript import standardSConscript
from SConsTools.dependencies import *

# ===================================
#   Setup default build environment
# ===================================
env = buildEnv()

# re-build dependencies based on timestamps
env.Decider('timestamp-newer')

# if help is requested then do not load any packages
if env.GetOption('help'):
    env.Help('\nList of standard targets:\n')
    env.Help('    all       - build all libraries and executables, this is default target\n')
    env.Help('    doc       - generate documentation\n')
    env.Help('    test      - run all unit tests\n')
    env.Help('    test-pkg  - run unit tests in package pkg\n')
    env.Help('    pylint    - run pylint on all Python modules\n')
    env.Help('\nList of less frequently used targets:\n')
    if env['CONDA']:
        env.Help('    conda-install                - install step of conda build\n')
    else:
        env.Help('    install                      - install release, old style (use DESTDIR variable)\n')
    env.Help('    SConsTools.pkg_list          - produce package list file (use PKG_LIST_FILE)\n')
    env.Help('    package-dependencies         - print dependencies for all packages\n')
    env.Help('    package-dependencies-reverse - print reverse dependencies for all packages\n')
    env.Help('    package-dependencies-base    - print dependencies for packages in base release\n')
    env.Help('    package-dependencies-local   - print dependencies for packages in local release\n')
    Return()

#
# find out which packages we have locally
#
packages = [ d for d in os.listdir(cwd) if os.path.isfile(pjoin(d, "SConscript")) ]
trace("Packages: " + pformat(packages), "<top>", 1)

#
# Check the links in include/, data/, web/
#
makePackageLinks("include", packages)
makePackageLinks("data", packages)
makePackageLinks("web", packages)

#
# load package dependencies from base releases
#
trace("Loading existing package dependencies", "<top>", 1)
for r in reversed(env['SIT_REPOS']):
    fname = pjoin(r, env['PKG_DEPS_FILE'])
    if os.path.isfile(fname):
        loadPkgDeps(fname)


#
# include all SConscript files from all packages
#
trace("Reading packages SConscript files", "<top>", 1)
for p in packages:
    scons = pjoin(p, "SConscript")
    build = pjoin("#build", sit_arch, p)
    env.SConscript(pjoin(p, "SConscript"),
                variant_dir=build,
                src_dir='#' + p,
                duplicate=0,
                exports="env trace standardSConscript")

#
# Analyze whole dependency tree and adjust dependencies and libraries
#
trace("Recalculating packages dependencies", "<top>", 1)
adjustPkgDeps()

#
# Now store the dependencies in case somebody else would want to use them later
#
trace("Storing packages dependencies", "<top>", 1)
storePkgDeps(env['PKG_DEPS_FILE'])

#
# define few aliases and default targets
#
incs = env.Alias('includes', env['ALL_TARGETS']['INCLUDES'])
libs = env.Alias('lib', env['ALL_TARGETS']['LIBS'])
bins = env.Alias('bin', env['ALL_TARGETS']['BINS'])
all = env.Alias('all', incs + libs + bins)
tests = env.Alias('test', env['ALL_TARGETS']['TESTS'])
pylint_tests = env.Alias('pylint', env['ALL_TARGETS']['PYLINT'])

#
# make package specific test targets
#
pkg2tests = collections.defaultdict(list)
for testTarget in env['ALL_TARGETS']['TESTS']:
    pkgName = os.path.basename(os.path.split(str(testTarget))[0])
    pkg2tests[pkgName].append(testTarget)
for pkg, pkgTests in pkg2tests.items():
    env.Alias('test-%s'%pkg, pkgTests)

# these are not strictly necessary, just to make it look more make-ish
env.Requires(env['ALL_TARGETS']['TESTS'], all)
env.Requires(libs, incs)
env.Requires(bins, libs)
# default is to build all
env.Default(all)

#
# Special install target
#
if env['CONDA']:
    #destdir = get_conda_env_path()
    destdir = os.environ['DESTDIR']
    conda_install = env.CondaInstall([Dir(destdir)], [])
    env.AlwaysBuild(conda_install)
    env.Alias('conda-install', [conda_install])
    env.Requires(conda_install, all)
else:
    destdir = env['DESTDIR']
    install = env.ReleaseInstall([Dir(destdir)], [])
    env.AlwaysBuild(install)
    env.Alias('install', [install])
    env.Requires(install, all)

#
# Special target for package list file
#
#pkg_list = env['PKG_LIST_FILE']
pkg_list = env.PackageList(['SConsTools.pkg_list'], [])
env.AlwaysBuild(pkg_list)
#env.Alias('SConsTools.pkg_list', pkg_list)

env.Command(['package-dependencies'], [], PrintDependencies([env['PKG_TREE_BASE'], env['PKG_TREE']]))
env.Command(['package-dependencies-reverse'], [], PrintDependencies([env['PKG_TREE_BASE'], env['PKG_TREE']], True))
env.Command(['package-dependencies-base'], [], PrintDependencies([env['PKG_TREE_BASE']]))
env.Command(['package-dependencies-local'], [], PrintDependencies([env['PKG_TREE']]))
env.AlwaysBuild('package-dependencies')
env.AlwaysBuild('package-dependencies-base')
env.AlwaysBuild('package-dependencies-local')
env.AlwaysBuild('package-dependencies-reverse')

#
# Additional targets for documentation generation
#
docTargets = []
if 'doxy-all' in env['DOC_TARGETS']:
    sources = env['DOC_TARGETS']['doxy-all']
    commands = ["rm -rf doc/doxy-all/", "doxy-driver -p 'PSDM Software' doc/doxy-all/ " + ' '.join(sources)]
    docTargets.append(env.Command('doc/doxy-all/html/index.html', [], commands))
if 'psana-doxy' in env['DOC_TARGETS']:
    sources = env['DOC_TARGETS']['psana-doxy']
    commands = ["rm -rf doc/psana-doxy/", "doxy-driver -p 'PSANA classes' doc/psana-doxy/ " + ' '.join(sources)]
    docTargets.append(env.Command('doc/psana-doxy/html/index.html', [], commands))
if 'psana-modules-doxy' in env['DOC_TARGETS']:
    sources = env['DOC_TARGETS']['psana-modules-doxy']
    commands = ["rm -rf doc/psana-modules-doxy/", "doxy-driver -p 'PSANA modules' doc/psana-modules-doxy/ " + ' '.join(sources)]
    docTargets.append(env.Command('doc/psana-modules-doxy/html/index.html', [], commands))
if 'psana-ref' in env['DOC_TARGETS']:
    modules = env['DOC_TARGETS']['psana-ref']
    commands = ["rm -rf doc/psana-ref/", "OMPI_MCA_btl=^openib pydoc-driver -p psana -Q -s -S doc/psana-ref/html "+ ' '.join(modules)]
    docTargets.append(env.Command('doc/psana-ref/html/index.html', [], commands))
if 'pyana-ref' in env['DOC_TARGETS']:
    modules = env['DOC_TARGETS']['pyana-ref']
    commands = ["rm -rf doc/pyana-ref/", "OMPI_MCA_btl=^openib pydoc-driver -p pyana -Q -s -S doc/pyana-ref/html "+ ' '.join(modules)]
    docTargets.append(env.Command('doc/pyana-ref/html/index.html', [], commands))
if 'pydoc-all' in env['DOC_TARGETS']:
    modules = env['DOC_TARGETS']['pydoc-all']
    commands = ["rm -rf doc/pydoc-all/", "OMPI_MCA_btl=^openib pydoc-driver -p pydoc-all -Q -s -S doc/pydoc-all/html "+ ' '.join(modules)]
    docTargets.append(env.Command('doc/pydoc-all/html/index.html', [], commands))
if 'psddl_psana' in env['DOC_TARGETS']:
    # this command does not actually need any input
    commands = ["rm -rf doc/psddl_psana/", "ddl_psanadoc doc/psddl_psana/"]
    docTargets.append(env.Command('doc/psddl_psana/index.html', [], commands))
env.Alias('doc', docTargets)
env.AlwaysBuild(docTargets)

trace( "Build env = "+pformat(env.Dictionary()), "<top>", 7 )
trace("BUILD_TARGETS is " + pformat(list(map(str, BUILD_TARGETS))), "<top>", 1)
trace("DEFAULT_TARGETS is " + pformat(list(map(str, DEFAULT_TARGETS))), "<top>", 1)
trace("COMMAND_LINE_TARGETS is " + pformat(list(map(str, COMMAND_LINE_TARGETS))), "<top>", 1)

