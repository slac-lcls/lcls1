#!@PYTHON@

from __future__ import print_function
import os
os.environ['LIBGL_ALWAYS_INDIRECT'] = '1' # get rid of libGL error: unable to load driver: swrast_dri.so

import sys
from optparse import OptionParser
from PyQt5 import QtGui, QtWidgets
from graphqt.Logger import log
from graphqt.IVMain import IVMain
from graphqt.IVConfigParameters import cp

from expmon.PSQThreadWorker import PSQThreadWorker


class IMAGE_VIEWER(object):
    def __init__(self):
        """Image Viever (iv)"""

        #log.setPrintBits(0377)

        self.parser = option_parser()
        (opts, args) = self.parser.parse_args()
        self.args = args
        self.opts = vars(opts)
        self.defs = vars(self.parser.get_default_values())

        self.vrb = opts.vrb
        #if self.vrb: self.print_raw()
        if self.vrb: self.print_pars()

        app = QtWidgets.QApplication(sys.argv)

        t1 = PSQThreadWorker(cp, parent=None, dt_msec=5000, pbits=0) #0177777)
        t1.start()

        w = IVMain(self.parser)
        #w = QtGui.QWidget()

        w.show()
        stat = app.exec_()
        statt1 = t1.quit() # t1.exit(0)
        del w
        del app
        sys.exit(stat)
        #os._exit(stat)


    def print_raw(self):
        print('Command:', ' '.join(sys.argv))
        print('  opts: ', self.opts)
        print('  defs: ', self.defs)
        print('  args: ', self.args)


    def print_pars(self):
        """Prints input parameters"""
        print('Command:', ' '.join(sys.argv)+\
              '\nStart %s' % self.__init__.__doc__+\
              '\nwith argument %s and optional parameters:\n' % str(self.args)+\
              '<key>      <value>          <default>')
        for k,v in self.opts.items():
            print('%s %s %s' % (k.ljust(10), str(v).ljust(16), str(self.defs[k]).ljust(16)))


    def dsname(self):
        """Returns dsname retrieved from input parameters, e.g.'exp=mfxn8316:run=11' """
        exp = self.opts['exp']
        run = self.opts['run']
        return 'exp=%s:run=%s' % (exp, run)


def usage():
    return '\n\nCommand to launch Monitoring Tool GUI:\n'+\
           '\n  %prog -e <experiment> -r <run-number> -n <event-number> -v'+\
           '\n  or:'+\
           '\n  %prog -f <file-name> -v'+\
           '\n\n  Examples:'+\
           '\n  %prog -e mfxn8316 -r 11 -n 10'+\
           '\n  %prog -f image.txt # accepts types txt, bin, npy, h5'+\
           '\n  %prog image.txt'


def option_parser():

    def_exp = '' # 'mfxn8316'
    def_run = 0
    def_nev = 0
    def_clb = ''
    def_ifn = ''
    def_vrb = True

    h_exp = 'experiment, e.g., cxi43210, default = %s' % def_exp
    h_run = 'run number, default = %d' % def_run
    h_nev = 'event number, default = %d' % def_nev
    h_clb = 'calibration directory, e.g., ./calib, default = %s' % def_clb
    h_ifn = 'input file with image, e.g., image.txt (accepts types *.txt, *.npy, *.bin, *.h5), default = %s' % def_ifn
    h_vrb = 'verbosity, default = %s' % str(def_vrb)

    parser = OptionParser(description='Command line parameters', usage ='usage: %prog <opts>' + usage())
    parser.add_option('-e', '--exp', default=def_exp, action='store', type='string', help=h_exp)
    parser.add_option('-r', '--run', default=def_run, action='store', type='int',    help=h_run)
    parser.add_option('-n', '--nev', default=def_nev, action='store', type='int',    help=h_nev)
    parser.add_option('-c', '--clb', default=def_clb, action='store', type='string', help=h_clb)
    parser.add_option('-f', '--ifn', default=def_ifn, action='store', type='string', help=h_ifn)
    parser.add_option('-v', '--vrb', default=def_vrb, action='store_false',          help=h_vrb)

    return parser #, parser.parse_args()


if __name__ == "__main__":
    IMAGE_VIEWER()
    sys.exit(0)

# EOF
