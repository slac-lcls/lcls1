#!@PYTHON@
#------------------------------
from __future__ import print_function

import os
import sys
import expmon.HexUtils as hu
from expmon.HexDataPreProc import preproc_data

#------------------------------

def usage():
    return 'command examples\n'\
           '  mpirun -n 8 hex_data_preproc -n 2000 <other-options>\n'\
           '  bsub -o log-mpi-n08-%J.log -q psnehq -n 8 mpirun hex_data_preproc -n 1000000 <other-options>\n'\
           '  hex_data_preproc -d exp=xpptut15:run=390:smd -n 1200 <other-options>\n'\
           '  hex_data_preproc -h'

#------------------------------

def hex_data_preproc() :
    """
    """
    parser = input_option_parser()

    if len(sys.argv) == 1 :
        parser.print_help()
        print(80*'_')
        parser.print_usage()
        print(80*'_')
        msg = 'WARNING: ALL DEFAULT PARAMETERS ARE USELESS...'
        #print msg
        sys.exit(msg)

    (popts, pargs) = parser.parse_args()
    opts = vars(popts)
    opts['srcchs'] = hu.dict_from_str_srcchs(popts.srcchs)
    kwargs = opts
    hu.print_kwargs(kwargs)
    preproc_data(**kwargs)

#------------------------------

def input_option_parser() :

    from optparse import OptionParser

    d_srcchs = "{'AmoETOF.0:Acqiris.0':(6,7,8,9,10,11),'AmoITOF.0:Acqiris.0':(0,)}"
    d_dsname = 'exp=xpptut15:run=390:smd'
    d_evskip = 0
    d_events = 1000
    d_ofpref = './'
    d_numchs = 7
    d_numhts = 16
    d_verbos = True

    d_cfd_base            = 0.
    d_cfd_thr             =-0.04
    d_cfd_cfr             = 0.9
    d_cfd_deadtime        = 5.0
    d_cfd_leadingedge     = True
    d_cfd_ioffsetbeg      = 0
    d_cfd_ioffsetend      = 1000

    h_srcchs = 'sources and channels, string like dict, no spaces, default = %s' % d_srcchs
    h_dsname = 'data set name, default = %s' % d_dsname
    h_evskip = 'number of events to skip before start processing, default = %s' % d_evskip
    h_events = 'number of events to process, default = %s' % d_events
    h_ofpref = 'output file prefix, default = %s' % d_ofpref
    h_numchs = 'number of waveform detector channels, default = %s' % d_numchs
    h_numhts = 'maximal number of hits per channel, default = %s' % d_numhts
    h_verbos = 'verbosity, default = %s' % d_verbos

    h_cfd_base           = 'CFD waveform baseline: , default = %s' % d_cfd_base
    h_cfd_thr            = 'CFD threshold for hit search, default = %s' % d_cfd_thr
    h_cfd_cfr            = 'CFD constant fraction of the peak value to set hit time, default = %s' % d_cfd_cfr
    h_cfd_deadtime       = 'CFD dead time for searching of the next peak, default = %s' % d_cfd_deadtime
    h_cfd_leadingedge    = 'CFD search for the hit time on leading edge, default = %s' % d_cfd_leadingedge
    h_cfd_ioffsetbeg     = 'CFD waveform begin index for baseline evaluation, default = %s' % d_cfd_ioffsetbeg
    h_cfd_ioffsetend     = 'CFD waveform end index for baseline evaluation, default = %s' % d_cfd_ioffsetend

    parser = OptionParser(description='Process hexanode xtc data and creates "small data" hdf5', usage=usage())

    parser.add_option('-s', '--srcchs', default=d_srcchs, action='store', type='string', help=h_srcchs)
    parser.add_option('-d', '--dsname', default=d_dsname, action='store', type='string', help=h_dsname)
    parser.add_option('-m', '--evskip', default=d_evskip, action='store', type='int',    help=h_evskip)
    parser.add_option('-n', '--events', default=d_events, action='store', type='int',    help=h_events)
    parser.add_option('-o', '--ofpref', default=d_ofpref, action='store', type='string', help=h_ofpref)
    parser.add_option('-C', '--numchs', default=d_numchs, action='store', type='int',    help=h_numchs)
    parser.add_option('-H', '--numhts', default=d_numhts, action='store', type='int',    help=h_numhts)
    parser.add_option('-v', '--verbos', default=d_verbos, action='store_false',          help=h_verbos)

    parser.add_option('--cfd_base',        default=d_cfd_base,        action='store', type='float', help=h_cfd_base)
    parser.add_option('--cfd_thr',         default=d_cfd_thr,         action='store', type='float', help=h_cfd_thr)
    parser.add_option('--cfd_cfr',         default=d_cfd_cfr,         action='store', type='float', help=h_cfd_cfr)
    parser.add_option('--cfd_deadtime',    default=d_cfd_deadtime,    action='store', type='float', help=h_cfd_deadtime)
    parser.add_option('--cfd_leadingedge', default=d_cfd_leadingedge, action='store_true',          help=h_cfd_leadingedge)
    parser.add_option('--cfd_ioffsetbeg',  default=d_cfd_ioffsetbeg,  action='store', type='int',   help=h_cfd_ioffsetbeg)
    parser.add_option('--cfd_ioffsetend',  default=d_cfd_ioffsetend,  action='store', type='int',   help=h_cfd_ioffsetend)

     #parser.add_option('-', '--', default=d_ins, action='store', type='string', help=h_)

    return parser

#------------------------------

if __name__ == "__main__" :
    hex_data_preproc()
    sys.exit(0)

#------------------------------
