#!@PYTHON@
#------------------------------
from __future__ import print_function

import os
import sys
import expmon.HexUtils as hu
from expmon.HexCalib import calib_on_data

#------------------------------

def usage():
    return '\n  CLI:\n'\
           '    hex_calib -d <dataset> -M <command-number> [options]\n'\
           '\n  command=2 - calibrate time sum offsets:\n'\
           '    hex_calib -d xpptut15-r0390-e300000-n16-mpi.h5 -M 2 -n 1000000\n'\
           '      then apply correction to configuration file hex_config in the calib directory.\n'\
           '      Iterate on this command untill correction is stable.\n'\
           '\n  command=3 - calibrate non-linearity:\n'\
           '    hex_calib -d xpptut15-r0390-e300000-n16-mpi.h5 -M 3 -n 1000000\n'\
           '      non-linearity correction table hex_table is saved in the calib directory at the end of processing.\n'\
           '\n  command=1 - test of calibration on data:\n'\
           '    hex_calib -d xpptut15-r0390-e300000-n16-mpi.h5 -M 1 -n 1200\n'\
           '\n  or run it in batch:\n'\
           '    bsub -o log-hex-calib-%J.log -q psnehq hex_calib -d xpptut15-r0390-e300000-n16-mpi.h5 -M 1 <other-parameters>'

#------------------------------

def hex_calib(parser) :
    """
    """
    if False :
        parser.print_usage()
        parser.print_help()

    (popts, pargs) = parser.parse_args()
    opts = vars(popts)

    #dsname   = popts.dsname
    #defs = vars(parser.get_default_values())
    #if verbos :
    #    print 'arguments: "%s"' % str(pargs)
    #    print 'options  : %s' % str(popts)
    #    for k,v in vars(popts).iteritems() : print '  %10s : %10s' % (k,v)

    opts['srcchs'] = hu.dict_from_str_srcchs(popts.srcchs)
    kwargs = opts
    hu.print_kwargs(kwargs)
    calib_on_data(**kwargs)

#------------------------------

def input_option_parser() :

    from optparse import OptionParser

    d_srcchs = "{'AmoETOF.0:Acqiris.0':(6,7,8,9,10,11),'AmoITOF.0:Acqiris.0':(0,)}"
    d_dsname = 'exp=xpptut15:run=390:smd'
    d_evskip = 0
    d_events = 1000
    d_ofpref = './'
    d_numchs = 7
    d_numhts = 16
    d_verbos = True
    d_calibtab = None # use calib dir 'calibration_table_data.txt'
    d_plot_his = True
    d_command  = 1

    d_cfd_base            = 0.
    d_cfd_thr             =-0.05
    d_cfd_cfr             = 0.9
    d_cfd_deadtime        = 5.0
    d_cfd_leadingedge     = True
    d_cfd_ioffsetbeg      = 0
    d_cfd_ioffsetend      = 1000

    d_PLOT_NHITS          = True
    d_PLOT_TIME_CH        = True
    d_PLOT_UVW            = True
    d_PLOT_TIME_SUMS      = True
    d_PLOT_CORRELATIONS   = True
    d_PLOT_XY_COMPONENTS  = True
    d_PLOT_XY_2D          = True
    d_PLOT_XY_RESOLUTION  = True
    d_PLOT_MISC           = True
    d_PLOT_REFLECTIONS    = True
    d_PLOT_PHYSICS        = True

    h_srcchs = 'sources and channels, string like dict, no spaces, default = %s' % d_srcchs
    h_dsname = 'data set name, default = %s' % d_dsname
    h_evskip = 'number of events to skip before start processing, default = %s' % d_evskip
    h_events = 'number of events to process, default = %s' % d_events
    h_ofpref = 'output file prefix, default = %s' % d_ofpref
    h_numchs = 'number of channels, default = %s' % d_numchs
    h_numhts = 'maximal number of hits per channel, default = %s' % d_numhts
    h_verbos = 'verbosity, default = %s' % d_verbos
    h_calibtab= 'calibration table file name, default = %s' % d_calibtab
    h_plot_his= 'plot hiostograms, default = %s' % d_plot_his
    h_command= '1-sort, 2-calibrate fu,fv,fw,w_offset, 3-generate correction tables and write them to disk, default = %d' % d_command

    h_cfd_base           = 'CFD waveform baseline: , default = %s' % d_cfd_base
    h_cfd_thr            = 'CFD threshold for hit search, default = %s' % d_cfd_thr
    h_cfd_cfr            = 'CFD constant fraction of the peak value to set hit time, default = %s' % d_cfd_cfr
    h_cfd_deadtime       = 'CFD dead time for searching of the next peak, default = %s' % d_cfd_deadtime
    h_cfd_leadingedge    = 'CFD search for the hit time on leading edge, default = %s' % d_cfd_leadingedge
    h_cfd_ioffsetbeg     = 'CFD waveform begin index for baseline evaluation, default = %s' % d_cfd_ioffsetbeg
    h_cfd_ioffsetend     = 'CFD waveform end index for baseline evaluation, default = %s' % d_cfd_ioffsetend

    h_PLOT_NHITS         = ', default = %s' % d_PLOT_NHITS
    h_PLOT_TIME_CH       = ', default = %s' % d_PLOT_TIME_CH
    h_PLOT_UVW           = ', default = %s' % d_PLOT_UVW
    h_PLOT_TIME_SUMS     = ', default = %s' % d_PLOT_TIME_SUMS
    h_PLOT_CORRELATIONS  = ', default = %s' % d_PLOT_CORRELATIONS
    h_PLOT_XY_COMPONENTS = ', default = %s' % d_PLOT_XY_COMPONENTS
    h_PLOT_XY_2D         = ', default = %s' % d_PLOT_XY_2D
    h_PLOT_XY_RESOLUTION = ', default = %s' % d_PLOT_XY_RESOLUTION
    h_PLOT_MISC          = ', default = %s' % d_PLOT_MISC
    h_PLOT_REFLECTIONS   = ', default = %s' % d_PLOT_REFLECTIONS
    h_PLOT_PHYSICS       = ', default = %s' % d_PLOT_PHYSICS
    #h_ = ', default = %s' % d_

    parser = OptionParser(description='Calibrate hexanode detector on data from hdf5 or xtc.', usage=usage())

    parser.add_option('-s', '--srcchs',   default=d_srcchs,   action='store', type='string', help=h_srcchs)
    parser.add_option('-d', '--dsname',   default=d_dsname,   action='store', type='string', help=h_dsname)
    parser.add_option('-m', '--evskip',   default=d_evskip,   action='store', type='int',    help=h_evskip)
    parser.add_option('-n', '--events',   default=d_events,   action='store', type='int',    help=h_events)
    parser.add_option('-o', '--ofpref',   default=d_ofpref,   action='store', type='string', help=h_ofpref)
    parser.add_option('-C', '--numchs',   default=d_numchs,   action='store', type='int',    help=h_numchs)
    parser.add_option('-H', '--numhts',   default=d_numhts,   action='store', type='int',    help=h_numhts)
    parser.add_option('-v', '--verbos',   default=d_verbos,   action='store_false',          help=h_verbos)
    parser.add_option('-p', '--plot_his', default=d_plot_his, action='store_false',          help=h_plot_his)
    parser.add_option('-M', '--command',  default=d_command,  action='store', type='int',    help=h_command)

    parser.add_option('--cfd_base',        default=d_cfd_base,        action='store', type='float', help=h_cfd_base)
    parser.add_option('--cfd_thr',         default=d_cfd_thr,         action='store', type='float', help=h_cfd_thr)
    parser.add_option('--cfd_cfr',         default=d_cfd_cfr,         action='store', type='float', help=h_cfd_cfr)
    parser.add_option('--cfd_deadtime',    default=d_cfd_deadtime,    action='store', type='float', help=h_cfd_deadtime)
    parser.add_option('--cfd_leadingedge', default=d_cfd_leadingedge, action='store_true',          help=h_cfd_leadingedge)
    parser.add_option('--cfd_ioffsetbeg',  default=d_cfd_ioffsetbeg,  action='store', type='int',   help=h_cfd_ioffsetbeg)
    parser.add_option('--cfd_ioffsetend',  default=d_cfd_ioffsetend,  action='store', type='int',   help=h_cfd_ioffsetend)

    parser.add_option('--PLOT_NHITS',         default=d_PLOT_NHITS,         action='store_true', help=h_PLOT_NHITS)
    parser.add_option('--PLOT_TIME_CH',       default=d_PLOT_TIME_CH,       action='store_true', help=h_PLOT_TIME_CH)
    parser.add_option('--PLOT_UVW',           default=d_PLOT_UVW,           action='store_true', help=h_PLOT_UVW)
    parser.add_option('--PLOT_TIME_SUMS',     default=d_PLOT_TIME_SUMS,     action='store_true', help=h_PLOT_TIME_SUMS)
    parser.add_option('--PLOT_CORRELATIONS',  default=d_PLOT_CORRELATIONS,  action='store_true', help=h_PLOT_CORRELATIONS )
    parser.add_option('--PLOT_XY_COMPONENTS', default=d_PLOT_XY_COMPONENTS, action='store_true', help=h_PLOT_XY_COMPONENTS)
    parser.add_option('--PLOT_XY_2D',         default=d_PLOT_XY_2D,         action='store_true', help=h_PLOT_XY_2D)
    parser.add_option('--PLOT_XY_RESOLUTION', default=d_PLOT_XY_RESOLUTION, action='store_true', help=h_PLOT_XY_RESOLUTION)
    parser.add_option('--PLOT_MISC',          default=d_PLOT_MISC,          action='store_true', help=h_PLOT_MISC)
    parser.add_option('--PLOT_REFLECTIONS',   default=d_PLOT_REFLECTIONS,   action='store_true', help=h_PLOT_REFLECTIONS)
    parser.add_option('--PLOT_PHYSICS',       default=d_PLOT_PHYSICS,       action='store_true', help=h_PLOT_PHYSICS)

    return parser

#------------------------------

if __name__ == "__main__" :

    parser = input_option_parser()

    if len(sys.argv) == 1 :
        parser.print_help()
        print('\nWARNING: this app needs in a few optional parameters...')
        sys.exit(0)

    hex_calib(parser)
    sys.exit(0)

#------------------------------
#------------------------------
