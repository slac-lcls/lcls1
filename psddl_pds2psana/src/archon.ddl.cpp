
// *** Do not edit this file, it is auto-generated ***

#include "psddl_pds2psana/archon.ddl.h"

#include <cstddef>

#include <stdexcept>

namespace psddl_pds2psana {
namespace Archon {
Psana::Archon::ConfigV1::ReadoutMode pds_to_psana(Pds::Archon::ConfigV1::ReadoutMode e)
{
  return Psana::Archon::ConfigV1::ReadoutMode(e);
}

ConfigV1::ConfigV1(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Archon::ConfigV1()
  , m_xtcObj(xtcPtr)
{
}
ConfigV1::~ConfigV1()
{
}


Psana::Archon::ConfigV1::ReadoutMode ConfigV1::readoutMode() const {
  return pds_to_psana(m_xtcObj->readoutMode());
}


uint16_t ConfigV1::sweepCount() const {
  return m_xtcObj->sweepCount();
}


uint32_t ConfigV1::integrationTime() const {
  return m_xtcObj->integrationTime();
}


uint32_t ConfigV1::nonIntegrationTime() const {
  return m_xtcObj->nonIntegrationTime();
}


uint32_t ConfigV1::preSkipPixels() const {
  return m_xtcObj->preSkipPixels();
}


uint32_t ConfigV1::pixels() const {
  return m_xtcObj->pixels();
}


uint32_t ConfigV1::postSkipPixels() const {
  return m_xtcObj->postSkipPixels();
}


uint32_t ConfigV1::overscanPixels() const {
  return m_xtcObj->overscanPixels();
}


uint16_t ConfigV1::preSkipLines() const {
  return m_xtcObj->preSkipLines();
}


uint16_t ConfigV1::lines() const {
  return m_xtcObj->lines();
}


uint16_t ConfigV1::postSkipLines() const {
  return m_xtcObj->postSkipLines();
}


uint16_t ConfigV1::overScanLines() const {
  return m_xtcObj->overScanLines();
}


uint16_t ConfigV1::horizontalBinning() const {
  return m_xtcObj->horizontalBinning();
}


uint16_t ConfigV1::verticalBinning() const {
  return m_xtcObj->verticalBinning();
}


uint16_t ConfigV1::rgh() const {
  return m_xtcObj->rgh();
}


uint16_t ConfigV1::rgl() const {
  return m_xtcObj->rgl();
}


uint16_t ConfigV1::shp() const {
  return m_xtcObj->shp();
}


uint16_t ConfigV1::shd() const {
  return m_xtcObj->shd();
}


uint16_t ConfigV1::st() const {
  return m_xtcObj->st();
}


uint16_t ConfigV1::stm1() const {
  return m_xtcObj->stm1();
}


uint16_t ConfigV1::at() const {
  return m_xtcObj->at();
}


uint16_t ConfigV1::dwell1() const {
  return m_xtcObj->dwell1();
}


uint16_t ConfigV1::dwell2() const {
  return m_xtcObj->dwell2();
}


int16_t ConfigV1::rgHigh() const {
  return m_xtcObj->rgHigh();
}


int16_t ConfigV1::rgLow() const {
  return m_xtcObj->rgLow();
}


int16_t ConfigV1::sHigh() const {
  return m_xtcObj->sHigh();
}


int16_t ConfigV1::sLow() const {
  return m_xtcObj->sLow();
}


int16_t ConfigV1::aHigh() const {
  return m_xtcObj->aHigh();
}


int16_t ConfigV1::aLow() const {
  return m_xtcObj->aLow();
}


int16_t ConfigV1::rgSlew() const {
  return m_xtcObj->rgSlew();
}


int16_t ConfigV1::sSlew() const {
  return m_xtcObj->sSlew();
}


int16_t ConfigV1::aSlew() const {
  return m_xtcObj->aSlew();
}


const char* ConfigV1::config() const {
  return m_xtcObj->config();
}

Psana::Archon::ConfigV2::ReadoutMode pds_to_psana(Pds::Archon::ConfigV2::ReadoutMode e)
{
  return Psana::Archon::ConfigV2::ReadoutMode(e);
}

ConfigV2::ConfigV2(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Archon::ConfigV2()
  , m_xtcObj(xtcPtr)
{
}
ConfigV2::~ConfigV2()
{
}


Psana::Archon::ConfigV2::ReadoutMode ConfigV2::readoutMode() const {
  return pds_to_psana(m_xtcObj->readoutMode());
}


uint16_t ConfigV2::exposureEventCode() const {
  return m_xtcObj->exposureEventCode();
}


uint32_t ConfigV2::configSize() const {
  return m_xtcObj->configSize();
}


uint32_t ConfigV2::preFrameSweepCount() const {
  return m_xtcObj->preFrameSweepCount();
}


uint32_t ConfigV2::idleSweepCount() const {
  return m_xtcObj->idleSweepCount();
}


uint32_t ConfigV2::integrationTime() const {
  return m_xtcObj->integrationTime();
}


uint32_t ConfigV2::nonIntegrationTime() const {
  return m_xtcObj->nonIntegrationTime();
}


uint32_t ConfigV2::batches() const {
  return m_xtcObj->batches();
}


uint32_t ConfigV2::pixels() const {
  return m_xtcObj->pixels();
}


uint32_t ConfigV2::lines() const {
  return m_xtcObj->lines();
}


uint32_t ConfigV2::horizontalBinning() const {
  return m_xtcObj->horizontalBinning();
}


uint32_t ConfigV2::verticalBinning() const {
  return m_xtcObj->verticalBinning();
}


uint32_t ConfigV2::sensorPixels() const {
  return m_xtcObj->sensorPixels();
}


uint32_t ConfigV2::sensorLines() const {
  return m_xtcObj->sensorLines();
}


uint32_t ConfigV2::sensorTaps() const {
  return m_xtcObj->sensorTaps();
}


uint32_t ConfigV2::st() const {
  return m_xtcObj->st();
}


uint32_t ConfigV2::stm1() const {
  return m_xtcObj->stm1();
}


uint32_t ConfigV2::at() const {
  return m_xtcObj->at();
}


const char* ConfigV2::config() const {
  return m_xtcObj->config();
}


std::vector<int> ConfigV2::config_shape() const {
  return m_xtcObj->config_shape();
}

Psana::Archon::ConfigV3::ReadoutMode pds_to_psana(Pds::Archon::ConfigV3::ReadoutMode e)
{
  return Psana::Archon::ConfigV3::ReadoutMode(e);
}

Psana::Archon::ConfigV3::Switch pds_to_psana(Pds::Archon::ConfigV3::Switch e)
{
  return Psana::Archon::ConfigV3::Switch(e);
}

Psana::Archon::ConfigV3::BiasChannelId pds_to_psana(Pds::Archon::ConfigV3::BiasChannelId e)
{
  return Psana::Archon::ConfigV3::BiasChannelId(e);
}

ConfigV3::ConfigV3(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Archon::ConfigV3()
  , m_xtcObj(xtcPtr)
{
}
ConfigV3::~ConfigV3()
{
}


Psana::Archon::ConfigV3::ReadoutMode ConfigV3::readoutMode() const {
  return pds_to_psana(m_xtcObj->readoutMode());
}


Psana::Archon::ConfigV3::Switch ConfigV3::power() const {
  return pds_to_psana(m_xtcObj->power());
}


uint16_t ConfigV3::exposureEventCode() const {
  return m_xtcObj->exposureEventCode();
}


uint32_t ConfigV3::configSize() const {
  return m_xtcObj->configSize();
}


uint32_t ConfigV3::preFrameSweepCount() const {
  return m_xtcObj->preFrameSweepCount();
}


uint32_t ConfigV3::idleSweepCount() const {
  return m_xtcObj->idleSweepCount();
}


uint32_t ConfigV3::integrationTime() const {
  return m_xtcObj->integrationTime();
}


uint32_t ConfigV3::nonIntegrationTime() const {
  return m_xtcObj->nonIntegrationTime();
}


uint32_t ConfigV3::batches() const {
  return m_xtcObj->batches();
}


uint32_t ConfigV3::pixels() const {
  return m_xtcObj->pixels();
}


uint32_t ConfigV3::lines() const {
  return m_xtcObj->lines();
}


uint32_t ConfigV3::horizontalBinning() const {
  return m_xtcObj->horizontalBinning();
}


uint32_t ConfigV3::verticalBinning() const {
  return m_xtcObj->verticalBinning();
}


uint32_t ConfigV3::sensorPixels() const {
  return m_xtcObj->sensorPixels();
}


uint32_t ConfigV3::sensorLines() const {
  return m_xtcObj->sensorLines();
}


uint32_t ConfigV3::sensorTaps() const {
  return m_xtcObj->sensorTaps();
}


uint32_t ConfigV3::st() const {
  return m_xtcObj->st();
}


uint32_t ConfigV3::stm1() const {
  return m_xtcObj->stm1();
}


uint32_t ConfigV3::at() const {
  return m_xtcObj->at();
}


Psana::Archon::ConfigV3::Switch ConfigV3::bias() const {
  return pds_to_psana(m_xtcObj->bias());
}


Psana::Archon::ConfigV3::BiasChannelId ConfigV3::biasChan() const {
  return pds_to_psana(m_xtcObj->biasChan());
}


float ConfigV3::biasVoltage() const {
  return m_xtcObj->biasVoltage();
}


uint32_t ConfigV3::configVersion() const {
  return m_xtcObj->configVersion();
}


const char* ConfigV3::config() const {
  return m_xtcObj->config();
}


uint32_t ConfigV3::numPixelsX() const {
  return m_xtcObj->numPixelsX();
}


uint32_t ConfigV3::numPixelsY() const {
  return m_xtcObj->numPixelsY();
}


uint32_t ConfigV3::numPixels() const {
  return m_xtcObj->numPixels();
}


std::vector<int> ConfigV3::config_shape() const {
  return m_xtcObj->config_shape();
}

Psana::Archon::ConfigV4::ReadoutMode pds_to_psana(Pds::Archon::ConfigV4::ReadoutMode e)
{
  return Psana::Archon::ConfigV4::ReadoutMode(e);
}

Psana::Archon::ConfigV4::Switch pds_to_psana(Pds::Archon::ConfigV4::Switch e)
{
  return Psana::Archon::ConfigV4::Switch(e);
}

Psana::Archon::ConfigV4::BiasChannelId pds_to_psana(Pds::Archon::ConfigV4::BiasChannelId e)
{
  return Psana::Archon::ConfigV4::BiasChannelId(e);
}

ConfigV4::ConfigV4(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Archon::ConfigV4()
  , m_xtcObj(xtcPtr)
{
}
ConfigV4::~ConfigV4()
{
}


Psana::Archon::ConfigV4::ReadoutMode ConfigV4::readoutMode() const {
  return pds_to_psana(m_xtcObj->readoutMode());
}


Psana::Archon::ConfigV4::Switch ConfigV4::power() const {
  return pds_to_psana(m_xtcObj->power());
}


uint16_t ConfigV4::exposureEventCode() const {
  return m_xtcObj->exposureEventCode();
}


uint32_t ConfigV4::configSize() const {
  return m_xtcObj->configSize();
}


uint32_t ConfigV4::preFrameSweepCount() const {
  return m_xtcObj->preFrameSweepCount();
}


uint32_t ConfigV4::idleSweepCount() const {
  return m_xtcObj->idleSweepCount();
}


uint32_t ConfigV4::preSkipLines() const {
  return m_xtcObj->preSkipLines();
}


uint32_t ConfigV4::integrationTime() const {
  return m_xtcObj->integrationTime();
}


uint32_t ConfigV4::nonIntegrationTime() const {
  return m_xtcObj->nonIntegrationTime();
}


uint32_t ConfigV4::batches() const {
  return m_xtcObj->batches();
}


uint32_t ConfigV4::pixels() const {
  return m_xtcObj->pixels();
}


uint32_t ConfigV4::lines() const {
  return m_xtcObj->lines();
}


uint32_t ConfigV4::horizontalBinning() const {
  return m_xtcObj->horizontalBinning();
}


uint32_t ConfigV4::verticalBinning() const {
  return m_xtcObj->verticalBinning();
}


uint32_t ConfigV4::sensorPixels() const {
  return m_xtcObj->sensorPixels();
}


uint32_t ConfigV4::sensorLines() const {
  return m_xtcObj->sensorLines();
}


uint32_t ConfigV4::sensorTaps() const {
  return m_xtcObj->sensorTaps();
}


uint32_t ConfigV4::st() const {
  return m_xtcObj->st();
}


uint32_t ConfigV4::stm1() const {
  return m_xtcObj->stm1();
}


uint32_t ConfigV4::at() const {
  return m_xtcObj->at();
}


Psana::Archon::ConfigV4::Switch ConfigV4::bias() const {
  return pds_to_psana(m_xtcObj->bias());
}


Psana::Archon::ConfigV4::BiasChannelId ConfigV4::biasChan() const {
  return pds_to_psana(m_xtcObj->biasChan());
}


float ConfigV4::biasVoltage() const {
  return m_xtcObj->biasVoltage();
}


uint32_t ConfigV4::configVersion() const {
  return m_xtcObj->configVersion();
}


const char* ConfigV4::config() const {
  return m_xtcObj->config();
}


uint32_t ConfigV4::numPixelsX() const {
  return m_xtcObj->numPixelsX();
}


uint32_t ConfigV4::numPixelsY() const {
  return m_xtcObj->numPixelsY();
}


uint32_t ConfigV4::numPixels() const {
  return m_xtcObj->numPixels();
}


std::vector<int> ConfigV4::config_shape() const {
  return m_xtcObj->config_shape();
}

} // namespace Archon
} // namespace psddl_pds2psana
