
// *** Do not edit this file, it is auto-generated ***

#include "psddl_pds2psana/jungfrau.ddl.h"

#include <cstddef>

#include <stdexcept>

namespace psddl_pds2psana {
namespace Jungfrau {
ModuleConfigV1::ModuleConfigV1(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Jungfrau::ModuleConfigV1()
  , m_xtcObj(xtcPtr)
{
}
ModuleConfigV1::~ModuleConfigV1()
{
}


uint64_t ModuleConfigV1::serialNumber() const {
  return m_xtcObj->serialNumber();
}


uint64_t ModuleConfigV1::moduleVersion() const {
  return m_xtcObj->moduleVersion();
}


uint64_t ModuleConfigV1::firmwareVersion() const {
  return m_xtcObj->firmwareVersion();
}

Psana::Jungfrau::ConfigV1::GainMode pds_to_psana(Pds::Jungfrau::ConfigV1::GainMode e)
{
  return Psana::Jungfrau::ConfigV1::GainMode(e);
}

Psana::Jungfrau::ConfigV1::SpeedMode pds_to_psana(Pds::Jungfrau::ConfigV1::SpeedMode e)
{
  return Psana::Jungfrau::ConfigV1::SpeedMode(e);
}

ConfigV1::ConfigV1(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Jungfrau::ConfigV1()
  , m_xtcObj(xtcPtr)
{
}
ConfigV1::~ConfigV1()
{
}


uint32_t ConfigV1::numberOfModules() const {
  return m_xtcObj->numberOfModules();
}


uint32_t ConfigV1::numberOfRowsPerModule() const {
  return m_xtcObj->numberOfRowsPerModule();
}


uint32_t ConfigV1::numberOfColumnsPerModule() const {
  return m_xtcObj->numberOfColumnsPerModule();
}


uint32_t ConfigV1::biasVoltage() const {
  return m_xtcObj->biasVoltage();
}


Psana::Jungfrau::ConfigV1::GainMode ConfigV1::gainMode() const {
  return pds_to_psana(m_xtcObj->gainMode());
}


Psana::Jungfrau::ConfigV1::SpeedMode ConfigV1::speedMode() const {
  return pds_to_psana(m_xtcObj->speedMode());
}


double ConfigV1::triggerDelay() const {
  return m_xtcObj->triggerDelay();
}


double ConfigV1::exposureTime() const {
  return m_xtcObj->exposureTime();
}


uint32_t ConfigV1::frameSize() const {
  return m_xtcObj->frameSize();
}


uint32_t ConfigV1::numPixels() const {
  return m_xtcObj->numPixels();
}

Psana::Jungfrau::ConfigV2::GainMode pds_to_psana(Pds::Jungfrau::ConfigV2::GainMode e)
{
  return Psana::Jungfrau::ConfigV2::GainMode(e);
}

Psana::Jungfrau::ConfigV2::SpeedMode pds_to_psana(Pds::Jungfrau::ConfigV2::SpeedMode e)
{
  return Psana::Jungfrau::ConfigV2::SpeedMode(e);
}

ConfigV2::ConfigV2(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Jungfrau::ConfigV2()
  , m_xtcObj(xtcPtr)
{
}
ConfigV2::~ConfigV2()
{
}


uint32_t ConfigV2::numberOfModules() const {
  return m_xtcObj->numberOfModules();
}


uint32_t ConfigV2::numberOfRowsPerModule() const {
  return m_xtcObj->numberOfRowsPerModule();
}


uint32_t ConfigV2::numberOfColumnsPerModule() const {
  return m_xtcObj->numberOfColumnsPerModule();
}


uint32_t ConfigV2::biasVoltage() const {
  return m_xtcObj->biasVoltage();
}


Psana::Jungfrau::ConfigV2::GainMode ConfigV2::gainMode() const {
  return pds_to_psana(m_xtcObj->gainMode());
}


Psana::Jungfrau::ConfigV2::SpeedMode ConfigV2::speedMode() const {
  return pds_to_psana(m_xtcObj->speedMode());
}


double ConfigV2::triggerDelay() const {
  return m_xtcObj->triggerDelay();
}


double ConfigV2::exposureTime() const {
  return m_xtcObj->exposureTime();
}


double ConfigV2::exposurePeriod() const {
  return m_xtcObj->exposurePeriod();
}


uint16_t ConfigV2::vb_ds() const {
  return m_xtcObj->vb_ds();
}


uint16_t ConfigV2::vb_comp() const {
  return m_xtcObj->vb_comp();
}


uint16_t ConfigV2::vb_pixbuf() const {
  return m_xtcObj->vb_pixbuf();
}


uint16_t ConfigV2::vref_ds() const {
  return m_xtcObj->vref_ds();
}


uint16_t ConfigV2::vref_comp() const {
  return m_xtcObj->vref_comp();
}


uint16_t ConfigV2::vref_prech() const {
  return m_xtcObj->vref_prech();
}


uint16_t ConfigV2::vin_com() const {
  return m_xtcObj->vin_com();
}


uint16_t ConfigV2::vdd_prot() const {
  return m_xtcObj->vdd_prot();
}


uint32_t ConfigV2::frameSize() const {
  return m_xtcObj->frameSize();
}


uint32_t ConfigV2::numPixels() const {
  return m_xtcObj->numPixels();
}

Psana::Jungfrau::ConfigV3::GainMode pds_to_psana(Pds::Jungfrau::ConfigV3::GainMode e)
{
  return Psana::Jungfrau::ConfigV3::GainMode(e);
}

Psana::Jungfrau::ConfigV3::SpeedMode pds_to_psana(Pds::Jungfrau::ConfigV3::SpeedMode e)
{
  return Psana::Jungfrau::ConfigV3::SpeedMode(e);
}

ConfigV3::ConfigV3(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Jungfrau::ConfigV3()
  , m_xtcObj(xtcPtr)
{
  {
    const std::vector<int>& dims = xtcPtr->moduleConfig_shape();
    _moduleConfig.reserve(dims[0]);
    for (int i0=0; i0 != dims[0]; ++i0) {
      const Pds::Jungfrau::ModuleConfigV1& d = xtcPtr->moduleConfig(i0);
      boost::shared_ptr<const Pds::Jungfrau::ModuleConfigV1> dPtr(m_xtcObj, &d);
      _moduleConfig.push_back(psddl_pds2psana::Jungfrau::ModuleConfigV1(dPtr));
    }
  }
}
ConfigV3::~ConfigV3()
{
}


uint32_t ConfigV3::numberOfModules() const {
  return m_xtcObj->numberOfModules();
}


uint32_t ConfigV3::numberOfRowsPerModule() const {
  return m_xtcObj->numberOfRowsPerModule();
}


uint32_t ConfigV3::numberOfColumnsPerModule() const {
  return m_xtcObj->numberOfColumnsPerModule();
}


uint32_t ConfigV3::biasVoltage() const {
  return m_xtcObj->biasVoltage();
}


Psana::Jungfrau::ConfigV3::GainMode ConfigV3::gainMode() const {
  return pds_to_psana(m_xtcObj->gainMode());
}


Psana::Jungfrau::ConfigV3::SpeedMode ConfigV3::speedMode() const {
  return pds_to_psana(m_xtcObj->speedMode());
}


double ConfigV3::triggerDelay() const {
  return m_xtcObj->triggerDelay();
}


double ConfigV3::exposureTime() const {
  return m_xtcObj->exposureTime();
}


double ConfigV3::exposurePeriod() const {
  return m_xtcObj->exposurePeriod();
}


uint16_t ConfigV3::vb_ds() const {
  return m_xtcObj->vb_ds();
}


uint16_t ConfigV3::vb_comp() const {
  return m_xtcObj->vb_comp();
}


uint16_t ConfigV3::vb_pixbuf() const {
  return m_xtcObj->vb_pixbuf();
}


uint16_t ConfigV3::vref_ds() const {
  return m_xtcObj->vref_ds();
}


uint16_t ConfigV3::vref_comp() const {
  return m_xtcObj->vref_comp();
}


uint16_t ConfigV3::vref_prech() const {
  return m_xtcObj->vref_prech();
}


uint16_t ConfigV3::vin_com() const {
  return m_xtcObj->vin_com();
}


uint16_t ConfigV3::vdd_prot() const {
  return m_xtcObj->vdd_prot();
}

const Psana::Jungfrau::ModuleConfigV1& ConfigV3::moduleConfig(uint32_t i0) const { return _moduleConfig.at(i0); }

uint32_t ConfigV3::frameSize() const {
  return m_xtcObj->frameSize();
}


uint32_t ConfigV3::numPixels() const {
  return m_xtcObj->numPixels();
}

std::vector<int> ConfigV3::moduleConfig_shape() const
{
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(_moduleConfig.size());
  return shape;
}

Psana::Jungfrau::ConfigV4::GainMode pds_to_psana(Pds::Jungfrau::ConfigV4::GainMode e)
{
  return Psana::Jungfrau::ConfigV4::GainMode(e);
}

Psana::Jungfrau::ConfigV4::SpeedMode pds_to_psana(Pds::Jungfrau::ConfigV4::SpeedMode e)
{
  return Psana::Jungfrau::ConfigV4::SpeedMode(e);
}

ConfigV4::ConfigV4(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Jungfrau::ConfigV4()
  , m_xtcObj(xtcPtr)
{
  {
    const std::vector<int>& dims = xtcPtr->moduleConfig_shape();
    _moduleConfig.reserve(dims[0]);
    for (int i0=0; i0 != dims[0]; ++i0) {
      const Pds::Jungfrau::ModuleConfigV1& d = xtcPtr->moduleConfig(i0);
      boost::shared_ptr<const Pds::Jungfrau::ModuleConfigV1> dPtr(m_xtcObj, &d);
      _moduleConfig.push_back(psddl_pds2psana::Jungfrau::ModuleConfigV1(dPtr));
    }
  }
}
ConfigV4::~ConfigV4()
{
}


uint32_t ConfigV4::numberOfModules() const {
  return m_xtcObj->numberOfModules();
}


uint32_t ConfigV4::numberOfRowsPerModule() const {
  return m_xtcObj->numberOfRowsPerModule();
}


uint32_t ConfigV4::numberOfColumnsPerModule() const {
  return m_xtcObj->numberOfColumnsPerModule();
}


uint32_t ConfigV4::biasVoltage() const {
  return m_xtcObj->biasVoltage();
}


Psana::Jungfrau::ConfigV4::GainMode ConfigV4::gainMode() const {
  return pds_to_psana(m_xtcObj->gainMode());
}


Psana::Jungfrau::ConfigV4::SpeedMode ConfigV4::speedMode() const {
  return pds_to_psana(m_xtcObj->speedMode());
}


double ConfigV4::triggerDelay() const {
  return m_xtcObj->triggerDelay();
}


double ConfigV4::exposureTime() const {
  return m_xtcObj->exposureTime();
}


double ConfigV4::exposurePeriod() const {
  return m_xtcObj->exposurePeriod();
}


uint16_t ConfigV4::vb_ds() const {
  return m_xtcObj->vb_ds();
}


uint16_t ConfigV4::vb_comp() const {
  return m_xtcObj->vb_comp();
}


uint16_t ConfigV4::vb_pixbuf() const {
  return m_xtcObj->vb_pixbuf();
}


uint16_t ConfigV4::vref_ds() const {
  return m_xtcObj->vref_ds();
}


uint16_t ConfigV4::vref_comp() const {
  return m_xtcObj->vref_comp();
}


uint16_t ConfigV4::vref_prech() const {
  return m_xtcObj->vref_prech();
}


uint16_t ConfigV4::vin_com() const {
  return m_xtcObj->vin_com();
}


uint16_t ConfigV4::vdd_prot() const {
  return m_xtcObj->vdd_prot();
}

const Psana::Jungfrau::ModuleConfigV1& ConfigV4::moduleConfig(uint32_t i0) const { return _moduleConfig.at(i0); }

uint32_t ConfigV4::frameSize() const {
  return m_xtcObj->frameSize();
}


uint32_t ConfigV4::numPixels() const {
  return m_xtcObj->numPixels();
}

std::vector<int> ConfigV4::moduleConfig_shape() const
{
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(_moduleConfig.size());
  return shape;
}

ModuleInfoV1::ModuleInfoV1(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Jungfrau::ModuleInfoV1()
  , m_xtcObj(xtcPtr)
{
}
ModuleInfoV1::~ModuleInfoV1()
{
}


uint64_t ModuleInfoV1::timestamp() const {
  return m_xtcObj->timestamp();
}


uint32_t ModuleInfoV1::exposureTime() const {
  return m_xtcObj->exposureTime();
}


uint16_t ModuleInfoV1::moduleID() const {
  return m_xtcObj->moduleID();
}


uint16_t ModuleInfoV1::xCoord() const {
  return m_xtcObj->xCoord();
}


uint16_t ModuleInfoV1::yCoord() const {
  return m_xtcObj->yCoord();
}


uint16_t ModuleInfoV1::zCoord() const {
  return m_xtcObj->zCoord();
}

template <typename Config>
ElementV1<Config>::ElementV1(const boost::shared_ptr<const XtcType>& xtcPtr, const boost::shared_ptr<const Config>& cfgPtr)
  : Psana::Jungfrau::ElementV1()
  , m_xtcObj(xtcPtr)
  , m_cfgPtr(cfgPtr)
{
}
template <typename Config>
ElementV1<Config>::~ElementV1()
{
}


template <typename Config>
uint32_t ElementV1<Config>::frameNumber() const {
  return m_xtcObj->frameNumber();
}


template <typename Config>
uint32_t ElementV1<Config>::ticks() const {
  return m_xtcObj->ticks();
}


template <typename Config>
uint32_t ElementV1<Config>::fiducials() const {
  return m_xtcObj->fiducials();
}


template <typename Config>
ndarray<const uint16_t, 3> ElementV1<Config>::frame() const {
  return m_xtcObj->frame(*m_cfgPtr, m_xtcObj);
}

template class ElementV1<Pds::Jungfrau::ConfigV1>;
template class ElementV1<Pds::Jungfrau::ConfigV2>;
template class ElementV1<Pds::Jungfrau::ConfigV3>;
template class ElementV1<Pds::Jungfrau::ConfigV4>;
template <typename Config>
ElementV2<Config>::ElementV2(const boost::shared_ptr<const XtcType>& xtcPtr, const boost::shared_ptr<const Config>& cfgPtr)
  : Psana::Jungfrau::ElementV2()
  , m_xtcObj(xtcPtr)
  , m_cfgPtr(cfgPtr)
{
  {
    const std::vector<int>& dims = xtcPtr->moduleInfo_shape(*cfgPtr);
    _moduleInfo.reserve(dims[0]);
    for (int i0=0; i0 != dims[0]; ++i0) {
      const Pds::Jungfrau::ModuleInfoV1& d = xtcPtr->moduleInfo(i0);
      boost::shared_ptr<const Pds::Jungfrau::ModuleInfoV1> dPtr(m_xtcObj, &d);
      _moduleInfo.push_back(psddl_pds2psana::Jungfrau::ModuleInfoV1(dPtr));
    }
  }
}
template <typename Config>
ElementV2<Config>::~ElementV2()
{
}


template <typename Config>
uint64_t ElementV2<Config>::frameNumber() const {
  return m_xtcObj->frameNumber();
}


template <typename Config>
uint32_t ElementV2<Config>::ticks() const {
  return m_xtcObj->ticks();
}


template <typename Config>
uint32_t ElementV2<Config>::fiducials() const {
  return m_xtcObj->fiducials();
}

template <typename Config>
const Psana::Jungfrau::ModuleInfoV1& ElementV2<Config>::moduleInfo(uint32_t i0) const { return _moduleInfo.at(i0); }

template <typename Config>
ndarray<const uint16_t, 3> ElementV2<Config>::frame() const {
  return m_xtcObj->frame(*m_cfgPtr, m_xtcObj);
}

template <typename Config>
std::vector<int> ElementV2<Config>::moduleInfo_shape() const
{
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(_moduleInfo.size());
  return shape;
}

template class ElementV2<Pds::Jungfrau::ConfigV1>;
template class ElementV2<Pds::Jungfrau::ConfigV2>;
template class ElementV2<Pds::Jungfrau::ConfigV3>;
template class ElementV2<Pds::Jungfrau::ConfigV4>;
} // namespace Jungfrau
} // namespace psddl_pds2psana
