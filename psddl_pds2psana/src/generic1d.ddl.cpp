
// *** Do not edit this file, it is auto-generated ***

#include "psddl_pds2psana/generic1d.ddl.h"

#include <cstddef>

#include <stdexcept>

namespace psddl_pds2psana {
namespace Generic1D {
Psana::Generic1D::ConfigV0::Sample_Type pds_to_psana(Pds::Generic1D::ConfigV0::Sample_Type e)
{
  return Psana::Generic1D::ConfigV0::Sample_Type(e);
}

ConfigV0::ConfigV0(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Generic1D::ConfigV0()
  , m_xtcObj(xtcPtr)
{
}
ConfigV0::~ConfigV0()
{
}


uint32_t ConfigV0::NChannels() const {
  return m_xtcObj->NChannels();
}


ndarray<const uint32_t, 1> ConfigV0::Length() const {
  return m_xtcObj->Length(m_xtcObj);
}


ndarray<const uint32_t, 1> ConfigV0::SampleType() const {
  return m_xtcObj->SampleType(m_xtcObj);
}


ndarray<const int32_t, 1> ConfigV0::Offset() const {
  return m_xtcObj->Offset(m_xtcObj);
}


ndarray<const double, 1> ConfigV0::Period() const {
  return m_xtcObj->Period(m_xtcObj);
}


int32_t ConfigV0::data_offset(uint32_t channel) const {
  return m_xtcObj->data_offset(channel);
}


uint32_t ConfigV0::Depth(uint32_t channel) const {
  return m_xtcObj->Depth(channel);
}

template <typename Config>
DataV0<Config>::DataV0(const boost::shared_ptr<const XtcType>& xtcPtr, const boost::shared_ptr<const Config>& cfgPtr)
  : Psana::Generic1D::DataV0()
  , m_xtcObj(xtcPtr)
  , m_cfgPtr(cfgPtr)
{
}
template <typename Config>
DataV0<Config>::~DataV0()
{
}


template <typename Config>
uint32_t DataV0<Config>::data_size() const {
  return m_xtcObj->data_size();
}


template <typename Config>
ndarray<const uint8_t, 1> DataV0<Config>::_int_data() const {
  return m_xtcObj->_int_data(m_xtcObj);
}


template <typename Config>
ndarray<const uint8_t, 1> DataV0<Config>::data_u8(uint32_t channel) const {
  return m_xtcObj->data_u8(*m_cfgPtr, channel);
}


template <typename Config>
ndarray<const uint16_t, 1> DataV0<Config>::data_u16(uint32_t channel) const {
  return m_xtcObj->data_u16(*m_cfgPtr, channel);
}


template <typename Config>
ndarray<const uint32_t, 1> DataV0<Config>::data_u32(uint32_t channel) const {
  return m_xtcObj->data_u32(*m_cfgPtr, channel);
}


template <typename Config>
ndarray<const float, 1> DataV0<Config>::data_f32(uint32_t channel) const {
  return m_xtcObj->data_f32(*m_cfgPtr, channel);
}


template <typename Config>
ndarray<const double, 1> DataV0<Config>::data_f64(uint32_t channel) const {
  return m_xtcObj->data_f64(*m_cfgPtr, channel);
}

template class DataV0<Pds::Generic1D::ConfigV0>;
} // namespace Generic1D
} // namespace psddl_pds2psana
