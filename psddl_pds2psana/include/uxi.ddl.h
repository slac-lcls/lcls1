#ifndef PSDDL_PDS2PSANA_UXI_DDL_H
#define PSDDL_PDS2PSANA_UXI_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include <vector>
#include <boost/shared_ptr.hpp>
#include "psddl_psana/uxi.ddl.h"
#include "pdsdata/psddl/uxi.ddl.h"
namespace psddl_pds2psana {
namespace Uxi {

class ConfigV1 : public Psana::Uxi::ConfigV1 {
public:
  typedef Pds::Uxi::ConfigV1 XtcType;
  typedef Psana::Uxi::ConfigV1 PsanaType;
  ConfigV1(const boost::shared_ptr<const XtcType>& xtcPtr);
  virtual ~ConfigV1();
  virtual uint32_t width() const;
  virtual uint32_t height() const;
  virtual uint32_t numberOfFrames() const;
  virtual uint32_t numberOFBytesPerPixel() const;
  virtual uint32_t sensorType() const;
  virtual ndarray<const uint32_t, 1> timeOn() const;
  virtual ndarray<const uint32_t, 1> timeOff() const;
  virtual ndarray<const uint32_t, 1> delay() const;
  virtual uint32_t readOnlyPots() const;
  virtual ndarray<const double, 1> pots() const;
  virtual uint8_t potIsReadOnly(uint8_t i) const;
  virtual uint8_t potIsTuned(uint8_t i) const;
  virtual uint32_t numPixelsPerFrame() const;
  virtual uint32_t numPixels() const;
  virtual uint32_t frameSize() const;
  const XtcType& _xtcObj() const { return *m_xtcObj; }
private:
  boost::shared_ptr<const XtcType> m_xtcObj;
};

Psana::Uxi::RoiCoord pds_to_psana(Pds::Uxi::RoiCoord pds);


class ConfigV2 : public Psana::Uxi::ConfigV2 {
public:
  typedef Pds::Uxi::ConfigV2 XtcType;
  typedef Psana::Uxi::ConfigV2 PsanaType;
  ConfigV2(const boost::shared_ptr<const XtcType>& xtcPtr);
  virtual ~ConfigV2();
  virtual Psana::Uxi::ConfigV2::RoiMode roiEnable() const;
  virtual const Psana::Uxi::RoiCoord& roiRows() const;
  virtual const Psana::Uxi::RoiCoord& roiFrames() const;
  virtual uint32_t width() const;
  virtual uint32_t height() const;
  virtual uint32_t numberOfFrames() const;
  virtual uint32_t numberOFBytesPerPixel() const;
  virtual uint32_t sensorType() const;
  virtual ndarray<const uint32_t, 1> timeOn() const;
  virtual ndarray<const uint32_t, 1> timeOff() const;
  virtual ndarray<const uint32_t, 1> delay() const;
  virtual uint32_t readOnlyPots() const;
  virtual ndarray<const double, 1> pots() const;
  virtual uint8_t potIsReadOnly(uint8_t i) const;
  virtual uint8_t potIsTuned(uint8_t i) const;
  virtual uint32_t numPixelsPerFrame() const;
  virtual uint32_t numPixels() const;
  virtual uint32_t frameSize() const;
  const XtcType& _xtcObj() const { return *m_xtcObj; }
private:
  boost::shared_ptr<const XtcType> m_xtcObj;
  Psana::Uxi::RoiCoord _roiRows;
  Psana::Uxi::RoiCoord _roiFrames;
};


class ConfigV3 : public Psana::Uxi::ConfigV3 {
public:
  typedef Pds::Uxi::ConfigV3 XtcType;
  typedef Psana::Uxi::ConfigV3 PsanaType;
  ConfigV3(const boost::shared_ptr<const XtcType>& xtcPtr);
  virtual ~ConfigV3();
  virtual Psana::Uxi::ConfigV3::RoiMode roiEnable() const;
  virtual const Psana::Uxi::RoiCoord& roiRows() const;
  virtual const Psana::Uxi::RoiCoord& roiFrames() const;
  virtual Psana::Uxi::ConfigV3::OscMode oscillator() const;
  virtual uint32_t width() const;
  virtual uint32_t height() const;
  virtual uint32_t numberOfFrames() const;
  virtual uint32_t numberOFBytesPerPixel() const;
  virtual uint32_t sensorType() const;
  virtual ndarray<const uint32_t, 1> timeOn() const;
  virtual ndarray<const uint32_t, 1> timeOff() const;
  virtual ndarray<const uint32_t, 1> delay() const;
  virtual uint32_t readOnlyPots() const;
  virtual ndarray<const double, 1> pots() const;
  virtual uint8_t potIsReadOnly(uint8_t i) const;
  virtual uint8_t potIsTuned(uint8_t i) const;
  virtual uint32_t numPixelsPerFrame() const;
  virtual uint32_t numPixels() const;
  virtual uint32_t frameSize() const;
  const XtcType& _xtcObj() const { return *m_xtcObj; }
private:
  boost::shared_ptr<const XtcType> m_xtcObj;
  Psana::Uxi::RoiCoord _roiRows;
  Psana::Uxi::RoiCoord _roiFrames;
};


template <typename Config>
class FrameV1 : public Psana::Uxi::FrameV1 {
public:
  typedef Pds::Uxi::FrameV1 XtcType;
  typedef Psana::Uxi::FrameV1 PsanaType;
  FrameV1(const boost::shared_ptr<const XtcType>& xtcPtr, const boost::shared_ptr<const Config>& cfgPtr);
  virtual ~FrameV1();
  virtual uint32_t acquisitionCount() const;
  virtual uint32_t timestamp() const;
  virtual double temperature() const;
  virtual ndarray<const uint16_t, 3> frames() const;
  const XtcType& _xtcObj() const { return *m_xtcObj; }
private:
  boost::shared_ptr<const XtcType> m_xtcObj;
  boost::shared_ptr<const Config> m_cfgPtr;
};

} // namespace Uxi
} // namespace psddl_pds2psana
#endif // PSDDL_PDS2PSANA_UXI_DDL_H
